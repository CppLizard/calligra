diff --git a/libs/flake/KoShapeRegistry.cpp b/libs/flake/KoShapeRegistry.cpp
index c628704..b021820 100644
--- a/libs/flake/KoShapeRegistry.cpp
+++ b/libs/flake/KoShapeRegistry.cpp
@@ -50,17 +50,22 @@
 class KoShapeRegistry::Private
 {
 public:
+    KoShapeRegistry *q;
+    mutable bool factoriesInitialized;
+
+    // Map namespace,tagname to priority:factory
+    QHash<QPair<QString, QString>, QMultiMap<int, KoShapeFactoryBase*> > factoryMap;
+
+    void ensureFactoriesInitialized() const;
     void insertFactory(KoShapeFactoryBase *factory);
-    void init(KoShapeRegistry *q);
 
     KoShape *createShapeInternal(const KoXmlElement &fullElement, KoShapeLoadingContext &context, const KoXmlElement &element) const;
 
-    // Map namespace,tagname to priority:factory
-    QHash<QPair<QString, QString>, QMultiMap<int, KoShapeFactoryBase*> > factoryMap;
+    explicit Private(KoShapeRegistry *qq);
 };
 
 KoShapeRegistry::KoShapeRegistry()
-        : d(new Private())
+        : d(new Private(this))
 {
 }
 
@@ -71,7 +76,8 @@ KoShapeRegistry::~KoShapeRegistry()
     delete d;
 }
 
-void KoShapeRegistry::Private::init(KoShapeRegistry *q)
+KoShapeRegistry::Private::Private(KoShapeRegistry *qq)
+    : q(qq), factoriesInitialized(false)
 {
     KoPluginLoader::PluginsConfig config;
     config.whiteList = "FlakePlugins";
@@ -92,6 +98,13 @@ void KoShapeRegistry::Private::init(KoShapeRegistry *q)
     // As long as there is no shape dealing with embedded svg images
     // we add the svg shape factory here by default
     q->add(new SvgShapeFactory);
+}
+
+void KoShapeRegistry::Private::ensureFactoriesInitialized() const
+{
+    if (factoriesInitialized)
+        return;
+    factoriesInitialized = true;
 
     // Now all shape factories are registered with us, determine their
     // assocated odf tagname & priority and prepare ourselves for
@@ -99,21 +112,21 @@ void KoShapeRegistry::Private::init(KoShapeRegistry *q)
 
     QList<KoShapeFactoryBase*> factories = q->values();
     for (int i = 0; i < factories.size(); ++i) {
-        insertFactory(factories[i]);
+        const_cast<Private*>(this)->insertFactory(factories[i]);
     }
 }
 
 KoShapeRegistry* KoShapeRegistry::instance()
 {
     K_GLOBAL_STATIC(KoShapeRegistry, s_instance)
-    if (!s_instance.exists()) {
-        s_instance->d->init(s_instance);
-    }
     return s_instance;
 }
 
 void KoShapeRegistry::addFactory(KoShapeFactoryBase * factory)
 {
+    //FIXME maybe call here to preserve QMultiMap order? All that is so hacky and all the registries duplicate lots of code while doing it all slightly different without good reason...
+    //ensureFactoriesInitialized()
+
     add(factory);
     d->insertFactory(factory);
 }
@@ -279,6 +292,8 @@ KoShape *KoShapeRegistry::Private::createShapeInternal(const KoXmlElement &fullE
                                                        KoShapeLoadingContext &context,
                                                        const KoXmlElement &element) const
 {
+    ensureFactoriesInitialized();
+
     // Pair of namespace, tagname
     QPair<QString, QString> p = QPair<QString, QString>(element.namespaceURI(), element.tagName());
 
@@ -335,6 +350,8 @@ KoShape *KoShapeRegistry::Private::createShapeInternal(const KoXmlElement &fullE
 
 QList<KoShapeFactoryBase*> KoShapeRegistry::factoriesForElement(const QString &nameSpace, const QString &elementName)
 {
+    d->ensureFactoriesInitialized();
+
     // Pair of namespace, tagname
     QPair<QString, QString> p = QPair<QString, QString>(nameSpace, elementName);
 
diff --git a/libs/flake/KoUnavailShape.cpp b/libs/flake/KoUnavailShape.cpp
index ecc771f..0ead6cf 100644
--- a/libs/flake/KoUnavailShape.cpp
+++ b/libs/flake/KoUnavailShape.cpp
@@ -607,7 +607,7 @@ void KoUnavailShape::Private::storeXmlRecursive(const KoXmlElement &el, KoXmlWri
 void KoUnavailShape::Private::storeFile(const QString &fileName, KoShapeLoadingContext &context)
 {
     kDebug(30006) << "Saving file: " << fileName;
-
+return;
     // Directories need to be saved too, but they don't have any file contents.
     if (fileName.endsWith('/')) {
         FileEntry *entry = new FileEntry;
diff --git a/libs/kotext/KoInlineObjectRegistry.cpp b/libs/kotext/KoInlineObjectRegistry.cpp
index 6caf3d1..5c47eb3 100644
--- a/libs/kotext/KoInlineObjectRegistry.cpp
+++ b/libs/kotext/KoInlineObjectRegistry.cpp
@@ -32,13 +32,16 @@
 class KoInlineObjectRegistry::Private
 {
 public:
-    void insertFactory(KoInlineObjectFactoryBase *factory);
-    void init(KoInlineObjectRegistry *q);
-
+    KoInlineObjectRegistry *q;
+    bool factoriesInitialized;
     QHash<QPair<QString, QString>, KoInlineObjectFactoryBase *> factories;
+
+    void ensureFactoriesInitialized();
+    explicit Private(KoInlineObjectRegistry *qq);
 };
 
-void KoInlineObjectRegistry::Private::init(KoInlineObjectRegistry *q)
+KoInlineObjectRegistry::Private::Private(KoInlineObjectRegistry *qq)
+    : q(qq), factoriesInitialized(false)
 {
     KoPluginLoader::PluginsConfig config;
     config.whiteList = "TextInlinePlugins";
@@ -46,7 +49,13 @@ void KoInlineObjectRegistry::Private::init(KoInlineObjectRegistry *q)
     config.group = "calligra";
     KoPluginLoader::instance()->load(QString::fromLatin1("Calligra/Text-InlineObject"),
                                      QString::fromLatin1("[X-KoText-PluginVersion] == 27"), config);
+}
 
+void KoInlineObjectRegistry::Private::ensureFactoriesInitialized()
+{
+    if (factoriesInitialized)
+        return;
+    factoriesInitialized = true;
     foreach (KoInlineObjectFactoryBase *factory, q->values()) {
         QString nameSpace = factory->odfNameSpace();
         if (nameSpace.isEmpty() || factory->odfElementNames().isEmpty()) {
@@ -65,9 +74,6 @@ void KoInlineObjectRegistry::Private::init(KoInlineObjectRegistry *q)
 KoInlineObjectRegistry* KoInlineObjectRegistry::instance()
 {
     K_GLOBAL_STATIC(KoInlineObjectRegistry, s_instance)
-    if (!s_instance.exists()) {
-        s_instance->d->init(s_instance);
-    }
     return s_instance;
 }
 
@@ -92,6 +98,8 @@ QList<QAction*> KoInlineObjectRegistry::createInsertVariableActions(KoCanvasBase
 
 KoInlineObject *KoInlineObjectRegistry::createFromOdf(const KoXmlElement &element, KoShapeLoadingContext &context) const
 {
+    d->ensureFactoriesInitialized();
+
     KoInlineObjectFactoryBase *factory = d->factories.value(
             QPair<QString, QString>(element.namespaceURI(), element.tagName()));
     if (factory == 0) {
@@ -115,6 +123,6 @@ KoInlineObjectRegistry::~KoInlineObjectRegistry()
 }
 
 KoInlineObjectRegistry::KoInlineObjectRegistry()
-        : d(new Private())
+        : d(new Private(this))
 {
 }
diff --git a/libs/main/KoDocumentSectionView.cpp b/libs/main/KoDocumentSectionView.cpp
index 154e4a8..0dd1334 100644
--- a/libs/main/KoDocumentSectionView.cpp
+++ b/libs/main/KoDocumentSectionView.cpp
@@ -395,5 +395,5 @@ void KoDocumentSectionView::setDraggingFlag(bool flag)
     m_draggingFlag = flag;
 }
 
-#include <KoDocumentSectionPropertyAction_p.moc>
+//#include <KoDocumentSectionPropertyAction_p.moc>
 #include <KoDocumentSectionView.moc>
diff --git a/libs/main/KoView.cpp b/libs/main/KoView.cpp
index efd39ec..e5cc661 100644
--- a/libs/main/KoView.cpp
+++ b/libs/main/KoView.cpp
@@ -631,5 +631,5 @@ QList<QAction*> KoView::createChangeUnitActions()
     return unitActions->actions();
 }
 
-#include <KoView_p.moc>
+//#include <KoView_p.moc>
 #include <KoView.moc>
diff --git a/plugins/pictureshape/PictureShapeFactory.cpp b/plugins/pictureshape/PictureShapeFactory.cpp
index c7786cb..9cd8b20 100644
--- a/plugins/pictureshape/PictureShapeFactory.cpp
+++ b/plugins/pictureshape/PictureShapeFactory.cpp
@@ -22,7 +22,7 @@
 #include "PictureShapeFactory.h"
 
 #include "PictureShape.h"
-#include "PictureShapeConfigWidget.h"
+//#include "PictureShapeConfigWidget.h"
 
 #include <QByteArray>
 #include <QBuffer>
@@ -114,7 +114,7 @@ bool PictureShapeFactory::supports(const KoXmlElement &e, KoShapeLoadingContext
 QList<KoShapeConfigWidgetBase*> PictureShapeFactory::createShapeOptionPanels()
 {
     QList<KoShapeConfigWidgetBase*> panels;
-    panels.append( new PictureShapeConfigWidget() );
+    //panels.append( new PictureShapeConfigWidget() );
     return panels;
 }
 
diff --git a/plugins/pictureshape/Plugin.cpp b/plugins/pictureshape/Plugin.cpp
index b167d2e..43ba7ad 100644
--- a/plugins/pictureshape/Plugin.cpp
+++ b/plugins/pictureshape/Plugin.cpp
@@ -18,7 +18,7 @@
  */
 #include "Plugin.h"
 #include "PictureShapeFactory.h"
-#include "PictureToolFactory.h"
+//#include "PictureToolFactory.h"
 
 #include <QPixmapCache>
 
@@ -40,7 +40,7 @@ Plugin::Plugin(QObject *parent, const QVariantList &)
     }
 
     KoShapeRegistry::instance()->add( new PictureShapeFactory() );
-    KoToolRegistry::instance()->add( new PictureToolFactory() );
+    //KoToolRegistry::instance()->add( new PictureToolFactory() );
 }
 
 #include <Plugin.moc>
diff --git a/plugins/textshape/TextPlugin.cpp b/plugins/textshape/TextPlugin.cpp
index b99243f..bafee04 100644
--- a/plugins/textshape/TextPlugin.cpp
+++ b/plugins/textshape/TextPlugin.cpp
@@ -17,9 +17,9 @@
  * Boston, MA 02110-1301, USA.
  */
 #include "TextPlugin.h"
-#include "TextToolFactory.h"
-#include "ReferencesToolFactory.h"
-#include "ReviewToolFactory.h"
+// #include "TextToolFactory.h"
+// #include "ReferencesToolFactory.h"
+// #include "ReviewToolFactory.h"
 #ifdef CREATE_TEXTDOCUMENT_INSPECTOR
 #include "TextDocumentInspectionPlugin.h"
 #endif
@@ -46,9 +46,9 @@ K_EXPORT_PLUGIN(TextPluginFactory("TextShape"))
 TextPlugin::TextPlugin(QObject * parent, const QVariantList &)
         : QObject(parent)
 {
-    KoToolRegistry::instance()->add(new TextToolFactory());
-    KoToolRegistry::instance()->add(new ReviewToolFactory());
-    KoToolRegistry::instance()->add(new ReferencesToolFactory());
+//     KoToolRegistry::instance()->add(new TextToolFactory());
+//     KoToolRegistry::instance()->add(new ReviewToolFactory());
+//     KoToolRegistry::instance()->add(new ReferencesToolFactory());
     KoShapeRegistry::instance()->add(new TextShapeFactory());
 }
 
diff --git a/words/part/KWDocument.cpp b/words/part/KWDocument.cpp
index 54cccdc..c62c60c 100644
--- a/words/part/KWDocument.cpp
+++ b/words/part/KWDocument.cpp
@@ -353,9 +353,9 @@ void KWDocument::relayout(QList<KWFrameSet*> framesets)
         KoTextDocumentLayout *lay = dynamic_cast<KoTextDocumentLayout*>(tfs->document()->documentLayout());
         Q_ASSERT(lay);
 
-        if (tfs->textFrameSetType() == Words::MainTextFrameSet && m_layoutProgressUpdater) {
-            connect(lay, SIGNAL(layoutProgressChanged(int)), this, SLOT(layoutProgressChanged(int)));
-            connect(lay, SIGNAL(finishedLayout()), this, SLOT(layoutFinished()));
+        if (tfs->textFrameSetType() == Words::MainTextFrameSet) {
+            connect(lay, SIGNAL(layoutProgressChanged(int)), this, SLOT(slotLayoutProgressChanged(int)));
+            connect(lay, SIGNAL(finishedLayout()), this, SLOT(slotLayoutFinished()));
         }
 
         // schedule all calls so multiple layout calls are compressed
@@ -365,19 +365,21 @@ void KWDocument::relayout(QList<KWFrameSet*> framesets)
     firePageSetupChanged();
 }
 
-void KWDocument::layoutProgressChanged(int percent)
+void KWDocument::slotLayoutProgressChanged(int percent)
 {
-    Q_ASSERT(m_layoutProgressUpdater);
-    m_layoutProgressUpdater->setProgress(percent);
+    if (m_layoutProgressUpdater)
+        m_layoutProgressUpdater->setProgress(percent);
 }
 
-void KWDocument::layoutFinished()
+void KWDocument::slotLayoutFinished()
 {
-    Q_ASSERT(m_layoutProgressUpdater);
-    disconnect(QObject::sender(), SIGNAL(layoutProgressChanged(int)), this, SLOT(layoutProgressChanged(int)));
-    disconnect(QObject::sender(), SIGNAL(finishedLayout()), this, SLOT(layoutFinished()));
-    m_layoutProgressUpdater->setProgress(100);
-    m_layoutProgressUpdater = 0; // free the instance
+    if (m_layoutProgressUpdater) {
+        disconnect(QObject::sender(), SIGNAL(layoutProgressChanged(int)), this, SLOT(slotLayoutProgressChanged(int)));
+        disconnect(QObject::sender(), SIGNAL(finishedLayout()), this, SLOT(slotLayoutFinished()));
+        m_layoutProgressUpdater->setProgress(100);
+        m_layoutProgressUpdater = 0; // free the instance
+    }
+    emit layoutFinished();
 }
 
 void KWDocument::addFrameSet(KWFrameSet *fs)
diff --git a/words/part/KWDocument.h b/words/part/KWDocument.h
index 7654aa3..14e50ec 100644
--- a/words/part/KWDocument.h
+++ b/words/part/KWDocument.h
@@ -226,6 +226,9 @@ signals:
     /// signal emitted when a page has been added
     void pageSetupChanged();
 
+    /// signal emitted when layouting finished
+    void layoutFinished();
+
     /// emitted whenever a shape is added.
     void shapeAdded(KoShape *, KoShapeManager::Repaint);
 
@@ -242,8 +245,8 @@ private slots:
     /// Called after the constructor figures out there is an install problem.
     void mainTextFrameSetLayoutDone();
 
-    void layoutProgressChanged(int percent);
-    void layoutFinished();
+    void slotLayoutProgressChanged(int percent);
+    void slotLayoutFinished();
 
 protected:
     /// reimplemented from KoDocument
