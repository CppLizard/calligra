/* This code was generated by msoscheme (http://gitorious.org/msoscheme) */
#ifndef API_H
#define API_H
#include "leinput.h"
namespace MSO{
class RecordHeader;
class CurrentUserAtom;
class TODOS;
class Byte;
class ZeroByte;
class CurrentUserStream;
class OfficeArtBStoreDelay;
class OfficeArtRecordHeader;
class OfficeArtBlipJPEG;
class OfficeArtBlipPNG;
class OfficeArtBlipDIB;
class OfficeArtBlipTIFF;
class RECT;
class POINT;
class PowerPointStructs;
class SoundCollectionAtom;
class HeadersFootersAtom;
class UserDateAtom;
class HeaderAtom;
class FooterAtom;
class PerSlideHeadersFootersContainer;
class EndDocumentAtom;
class DocInfoListContainer;
class SlideViewInfoAtom;
class GuideAtom;
class DocProgTagsContainer;
class TextAutoNumberScheme;
class BlipCollection9Container;
class Kinsoku9Atom;
class ExHyperlink9Container;
class PresAdvisorFlags9Atom;
class EnvelopeData9Atom;
class EnvelopeFlags9Atom;
class HTMLDocInfo9Atom;
class HTMLPublishInfo9Container;
class BroadcastDocInfo9Container;
class OutlineTextProps9Container;
class OutlineTextPropsHeaderExAtom;
class StyleTextProp9Atom;
class FontCollection10Container;
class GridSpacing10Atom;
class AuthorNameAtom;
class CommentIndex10Atom;
class FontEmbedFlags10Atom;
class CopyrightAtom;
class KeywordsAtom;
class FilterPrivacyFlags10Atom;
class OutlineTextProps10Container;
class StyleTextProp10Atom;
class DocToolbarStates10Atom;
class SlideListTable10Container;
class DiffTree10Container;
class ModifyPasswordAtom;
class PhotoAlbumInfo10Atom;
class SmartTagStore11Container;
class OutlineTextProps11Container;
class BinaryTagDataBlob;
class PP12DocBinaryTagExtension;
class SorterViewInfoContainer;
class VBAInfoAtom;
class MasterListWithTextContainer;
class MasterPersistAtom;
class SlideListWithTextContainer;
class NotesListWithTextContainer;
class NotesPersistAtom;
class TextHeaderAtom;
class TextCharsAtom;
class TextBytesAtom;
class MasterTextPropAtom;
class MasterTextPropRun;
class StyleTextPropAtom;
class SlideNumberMCAtom;
class DateTimeMCAtom;
class GenericDateMCAtom;
class HeaderMCAtom;
class FooterMCAtom;
class RTFDateTimeMCAtom;
class TextBookmarkAtom;
class TextRange;
class MouseClickTextInteractiveInfoAtom;
class MouseOverTextInteractiveInfoAtom;
class SlideId;
class TabStops;
class TabStop;
class PFWrapFlags;
class ColorIndexStruct;
class BulletFlags;
class PFMasks;
class CFMasks;
class CFStyle;
class FontCollectionContainer;
class FontEntityAtom;
class FontEmbedDataBlob;
class KinsokuAtom;
class KinsokuLeadingAtom;
class KinsokuFollowingAtom;
class TextSpecialInfoAtom;
class SmartTags;
class ExOleEmbedAtom;
class PointStruct;
class RatioStruct;
class PersistDirectoryAtom;
class UnknownDocumentContainerChild;
class UnknownOfficeArtClientDataChild;
class UnknownSlideContainerChild;
class UnknownTextContainerChild;
class PersistDirectoryEntry;
class PersistIdRef;
class SchemeListElementColorSchemeAtom;
class RoundTripOArtTextStyles12Atom;
class SlideNameAtom;
class SlideProgTagsContainer;
class PP9SlideBinaryTagExtension;
class Comment10Container;
class Comment10Atom;
class LinkedSlide10Atom;
class LinkedShape10Atom;
class SlideFlags10Atom;
class HashCode10Atom;
class ExtTimeNodeContainer;
class BuildListContainer;
class RoundTripHeaderFooterDefaults12Atom;
class TagNameAtom;
class TagValueAtom;
class RoundTripMainMasterRecord;
class TemplateNameAtom;
class RoundTripSlideSyncInfo12Container;
class SlideFlags;
class NotesRoundTripAtom;
class HandoutContainer;
class ExControlStg;
class ExOleObjStg;
class UserEditAtom;
class VbaProjectStg;
class SlideAtom;
class SlideShowSlideInfoAtom;
class SlideShowDocInfoAtom;
class SlideSchemeColorSchemeAtom;
class RoundTripSlideRecord;
class NamedShowsContainer;
class SummaryContainer;
class DocRoutingSlipAtom;
class PrintOptionsAtom;
class RoundTripCustomTableStyles12Atom;
class RoundTripCompositeMasterId12Atom;
class ColorStruct;
class ExObjListAtom;
class ExAviMovieContainer;
class ExCDAudioContainer;
class ExControlAtom;
class ExHyperlinkAtom;
class FriendlyNameAtom;
class TargetAtom;
class LocationAtom;
class ExMCIMovieContainer;
class ExMIDIAudioContainer;
class ExWAVAudioEmbeddedContainer;
class ExWAVAudioLinkContainer;
class UnknownExObjListSubContainerChild;
class ExOleLinkAtom;
class ExOleObjAtom;
class MenuNameAtom;
class ProgIDAtom;
class ClipboardNameAtom;
class MetafileBlob;
class OfficeArtFDGG;
class OfficeArtFDG;
class OfficeArtFRITContainer;
class OfficeArtFRIT;
class OfficeArtBStoreContainer;
class OfficeArtSpgrContainer;
class OfficeArtSolverContainer;
class OfficeArtFConnectorRule;
class OfficeArtFArcRule;
class OfficeArtFCalloutRule;
class OfficeArtFSPGR;
class OfficeArtFSP;
class OfficeArtFOPT;
class OfficeArtSecondaryFOPT;
class OfficeArtTertiaryFOPT;
class MSOPATHINFO;
class FixedPoint;
class PVertices_complex;
class PSegmentInfo_complex;
class FillShadeColors_complex;
class PWrapPolygonVertices_complex;
class OfficeArtCOLORREF;
class OfficeArtChildAnchor;
class DocOfficeArtClientAnchor;
class XlsOfficeArtClientAnchor;
class OfficeArtFPSPL;
class RectStruct;
class SmallRectStruct;
class DocOfficeArtClientData;
class XlsOfficeArtClientData;
class ShapeFlagsAtom;
class ShapeFlags10Atom;
class ExObjRefAtom;
class AnimationInfoAtom;
class SoundContainer;
class InteractiveInfoAtom;
class MacroNameAtom;
class PlaceholderAtom;
class RecolorInfoAtom;
class OutlineTextRefAtom;
class ShapeProgsTagContainer;
class PP9ShapeBinaryTagExtension;
class PP10ShapeBinaryTagExtension;
class PP11ShapeBinaryTagExtension;
class RoundTripNewPlaceHolderId12Atom;
class RoundTripShapeId12Atom;
class RoundTripHFPlaceholder12Atom;
class RoundTripShapeCheckSumForCustomLayouts12Atom;
class XlsOfficeArtClientTextBox;
class DocOfficeArtClientTextBox;
class PptOfficeArtClientTextBox;
class OfficeArtIDCL;
class OfficeArtFOPTEOPID;
class OfficeArtColorMRUContainer;
class MSOCR;
class OfficeArtSplitMenuColorContainer;
class todo;
class FibBase;
class FibRgW97;
class FibRgLw97;
class FibRgFcLcb97;
class FibRgFcLcb2000;
class FibRgFcLcb2002;
class LPStshi;
class LPStd;
class PlcfSed;
class Sed;
class Plcfhdd;
class PlcBteChpx;
class PlcfBtePapx;
class Tcg;
class PrcData;
class Sprm;
class Pcdt;
class FCompressed;
class Prm0;
class Prm1;
class SttbfFfn;
class SttbfFfnEntry;
class CodePageString;
class FILETIME;
class ClipboardData;
class PropertyIdentifierAndOffset;
class TypedPropertyValue;
class PropertySet;
class PropertySetStream;
class SummaryInformationPropertySetStream;
class DocumentSummaryInformationPropertySetStream;
class PicturesStream;
class OfficeArtMetafileHeader;
class SoundCollectionContainer;
class SlideHeadersFootersContainer;
class NotesHeadersFootersContainer;
class ScalingStruct;
class TextPFException9;
class TextCFException9;
class TextDefaults9Atom;
class Kinsoku9Container;
class OutlineTextProps9Entry;
class TextCFException10;
class TextDefaults10Atom;
class CommentIndex10Container;
class OutlineTextProps10Entry;
class PP11DocBinaryTagExtension;
class UnknownBinaryTag;
class NoZoomViewInfoAtom;
class VBAInfoContainer;
class NormalViewSetInfoAtom;
class TextContainer;
class TextContainerMeta;
class SlidePersistAtom;
class TextRuler;
class TextPFException;
class TextCFException;
class FontCollectionEntry;
class KinsokuContainer;
class TextSIException;
class TextMasterStyleLevel;
class DocumentAtom;
class SlideTime10Atom;
class PP12SlideBinaryTagExtension;
class ProgStringTagContainer;
class NotesAtom;
class ExObjListContainer;
class ExControlContainer;
class ExHyperlinkContainer;
class ExOleLinkContainer;
class ExOleEmbedContainer;
class OfficeArtFDGGBlock;
class OfficeArtSolverContainerFileBlock;
class Rotation;
class ProtectionBooleanProperties;
class ITxid;
class DxTextLeft;
class DyTextTop;
class DxTextRight;
class DyTextBottom;
class WrapText;
class AnchorText;
class TxflTextFlow;
class CdirFont;
class HspNext;
class Txdir;
class TextBooleanProperties;
class CropFromTop;
class CropFromBottom;
class CropFromLeft;
class CropFromRight;
class Pib;
class PibName;
class PibFlags;
class PictureTransparent;
class PictureContrast;
class PictureBrightness;
class BlipBooleanProperties;
class GeoLeft;
class GeoTop;
class GeoRight;
class GeoBottom;
class ShapePath;
class PVertices;
class PSegmentInfo;
class AdjustValue;
class Adjust2Value;
class Adjust3Value;
class Adjust4Value;
class Adjust5Value;
class Adjust6Value;
class Adjust7Value;
class Adjust8Value;
class GeometryBooleanProperties;
class FillType;
class FillColor;
class FillOpacity;
class FillBackColor;
class FillBackOpacity;
class FillCrMod;
class FillBlip;
class FillBlipName;
class FillBlipFlags;
class FillWidth;
class FillHeight;
class FillAngle;
class FillFocus;
class FillToLeft;
class FillToTop;
class FillToRight;
class FillToBottom;
class FillRectLeft;
class FillRectTop;
class FillRectRight;
class FillRectBottom;
class FillDztype;
class FillShadePreset;
class FillShadeColors;
class FillOriginX;
class FillOriginY;
class FillShapeOriginX;
class FillShapeOriginY;
class FillColorExt;
class FillBackColorExt;
class FillStyleBooleanProperties;
class LineColor;
class LineOpacity;
class LineBackColor;
class LineFillBlip;
class LineWidth;
class LineStyle;
class LineDashing;
class LineStartArrowhead;
class LineEndArrowhead;
class LineStartArrowWidth;
class LineStartArrowLength;
class LineEndArrowWidth;
class LineEndArrowLength;
class LineJoinStyle;
class LineStyleBooleanProperties;
class ShadowType;
class ShadowColor;
class ShadowOpacity;
class ShadowOffsetX;
class ShadowOffsetY;
class ShadowStyleBooleanProperties;
class HspMaster;
class Cxstyle;
class BWMode;
class ShapeBooleanProperties;
class DxyCalloutGap;
class Spcoa;
class Spcod;
class DxyCalloutDropSpecified;
class DxyCalloutLengthSpecified;
class CalloutBooleanProperties;
class PWrapPolygonVertices;
class DxWrapDistLeft;
class DyWrapDistTop;
class DxWrapDistRight;
class DyWrapDistBottom;
class LidRegroup;
class PosH;
class PosRelH;
class PosV;
class PosRelV;
class PctHR;
class AlignHR;
class DxHeightHR;
class DxWidthHR;
class GroupShapeBooleanProperties;
class WzFillId;
class DiagramBooleanProperties;
class PptOfficeArtClientAnchor;
class AnimationInfoContainer;
class MouseClickInteractiveInfoContainer;
class MouseOverInteractiveInfoContainer;
class ShapeClientRoundtripDataSubcontainerOrAtom;
class ShapeProgBinaryTagSubContainerOrAtom;
class OfficeArtClientTextBox;
class TextRulerAtom;
class OfficeArtFOPTE;
class Fib;
class STSH;
class Clx;
class Pcr;
class Prm;
class OfficeArtBlipEMF;
class OfficeArtBlipWMF;
class OfficeArtBlipPICT;
class OfficeArtBlip;
class ZoomViewInfoAtom;
class PP9DocBinaryTagExtension;
class TextMasterStyle9Level;
class StyleTextProp9;
class PP10DocBinaryTagExtension;
class TextMasterStyle10Level;
class NotesTextViewInfoContainer;
class OutlineViewInfoContainer;
class NormalViewSetInfoContainer;
class SlideListWithTextSubContainerOrAtom;
class MouseClickTextInfo;
class MouseOverTextInfo;
class TextClientDataSubContainerOrAtom;
class TextPFRun;
class TextCFRun;
class TextCFExceptionAtom;
class DefaultRulerAtom;
class TextPFExceptionAtom;
class TextSIRun;
class TextSIExceptionAtom;
class TextMasterStyleAtom;
class PP10SlideBinaryTagExtension;
class ExObjListSubContainer;
class OfficeArtDggContainer;
class OfficeArtFOPTEChoice;
class OfficeArtClientAnchor;
class PptOfficeArtClientData;
class ShapeProgBinaryTagContainer;
class WordDocument;
class Table;
class Pcd;
class OfficeArtFBSE;
class OfficeArtBStoreContainerFileBlock;
class SlideViewInfoInstance;
class DocProgBinaryTagSubContainerOrAtom;
class TextMasterStyle9Atom;
class BlipEntityAtom;
class TextMasterStyle10Atom;
class TextContainerInteractiveInfo;
class DocumentTextInfoContainer;
class SlideProgBinaryTagSubContainerOrAtom;
class DrawingGroupContainer;
class OfficeArtClientData;
class ShapeProgTagsSubContainerOrAtom;
class DocumentContainer;
class DocInfoListSubContainerOrAtom;
class DocProgBinaryTagContainer;
class SlideProgBinaryTagContainer;
class OfficeArtSpContainer;
class OfficeArtInlineSpContainer;
class DocProgTagsSubContainerOrAtom;
class SlideProgTagsSubContainerOrAtom;
class OfficeArtDgContainer;
class OfficeArtSpgrContainerFileBlock;
class DrawingContainer;
class MainMasterContainer;
class SlideContainer;
class NotesContainer;
class MasterOrSlideContainer;
class PowerPointStruct;
class RecordHeader {
public:
    const char* _data;
    static const quint32 _size;
    RecordHeader() :_data(0) {}
    RecordHeader(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    quint8 recVer;
    quint16 recInstance;
    quint16 recType;
    quint32 recLen;
    inline operator const void * () const { return _data; }
    inline const RecordHeader* operator->() const { return this; }
    inline const RecordHeader& operator*() const { return *this; }
    inline const RecordHeader* data() const { return this; }
};
class CurrentUserAtom {
public:
    const char* _data;
    quint32 _size;
    CurrentUserAtom() :_data(0), _size(0) {}
    explicit CurrentUserAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint32 size;
    quint32 headerToken;
    quint32 offsetToCurrentEdit;
    quint16 lenUserName;
    quint16 docFileVersion;
    quint8 majorVersion;
    quint8 minorVersion;
    quint16 unused;
    MSOCastArray<char> ansiUserName;
    quint32 relVersion;
    MSOCastArray<quint16> unicodeUserName;
    MSOCastArray<char> unknown;
    bool _has_unicodeUserName;
    bool _has_unknown;
    inline operator const void * () const { return _data; }
    inline const CurrentUserAtom* operator->() const { return this; }
    inline const CurrentUserAtom& operator*() const { return *this; }
    inline const CurrentUserAtom* data() const { return this; }
};
class TODOS {
public:
    const char* _data;
    quint32 _size;
    TODOS() :_data(0), _size(0) {}
    explicit TODOS(const char* data, const quint32 maxsize);
    MSOArray<Byte> anon;
    inline operator const void * () const { return _data; }
    inline const TODOS* operator->() const { return this; }
    inline const TODOS& operator*() const { return *this; }
    inline const TODOS* data() const { return this; }
};
class Byte {
public:
    const char* _data;
    static const quint32 _size;
    Byte() :_data(0) {}
    Byte(const char* data, quint32/*ignored*/ = 0);// 1 bytes
    quint8 b;
    inline operator const void * () const { return _data; }
    inline const Byte* operator->() const { return this; }
    inline const Byte& operator*() const { return *this; }
    inline const Byte* data() const { return this; }
};
class ZeroByte {
public:
    const char* _data;
    static const quint32 _size;
    ZeroByte() :_data(0) {}
    ZeroByte(const char* data, quint32/*ignored*/ = 0);// 1 bytes
    quint8 b;
    inline operator const void * () const { return _data; }
    inline const ZeroByte* operator->() const { return this; }
    inline const ZeroByte& operator*() const { return *this; }
    inline const ZeroByte* data() const { return this; }
};
class CurrentUserStream {
public:
    const char* _data;
    quint32 _size;
    CurrentUserStream() :_data(0), _size(0) {}
    explicit CurrentUserStream(const char* data, const quint32 maxsize);
    CurrentUserAtom anon1;
    MSOArray<Byte> trailing;
    inline operator const void * () const { return _data; }
    inline const CurrentUserStream* operator->() const { return this; }
    inline const CurrentUserStream& operator*() const { return *this; }
    inline const CurrentUserStream* data() const { return this; }
};
class OfficeArtBStoreDelay {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBStoreDelay() :_data(0), _size(0) {}
    explicit OfficeArtBStoreDelay(const char* data, const quint32 maxsize);
    MSOArray<OfficeArtBStoreContainerFileBlock> rgfb;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBStoreDelay* operator->() const { return this; }
    inline const OfficeArtBStoreDelay& operator*() const { return *this; }
    inline const OfficeArtBStoreDelay* data() const { return this; }
};
class OfficeArtRecordHeader {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtRecordHeader() :_data(0) {}
    OfficeArtRecordHeader(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    quint8 recVer;
    quint16 recInstance;
    quint16 recType;
    quint32 recLen;
    inline operator const void * () const { return _data; }
    inline const OfficeArtRecordHeader* operator->() const { return this; }
    inline const OfficeArtRecordHeader& operator*() const { return *this; }
    inline const OfficeArtRecordHeader* data() const { return this; }
};
class OfficeArtBlipJPEG {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipJPEG() :_data(0), _size(0) {}
    explicit OfficeArtBlipJPEG(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    quint8 tag;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipJPEG* operator->() const { return this; }
    inline const OfficeArtBlipJPEG& operator*() const { return *this; }
    inline const OfficeArtBlipJPEG* data() const { return this; }
};
class OfficeArtBlipPNG {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipPNG() :_data(0), _size(0) {}
    explicit OfficeArtBlipPNG(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    quint8 tag;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipPNG* operator->() const { return this; }
    inline const OfficeArtBlipPNG& operator*() const { return *this; }
    inline const OfficeArtBlipPNG* data() const { return this; }
};
class OfficeArtBlipDIB {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipDIB() :_data(0), _size(0) {}
    explicit OfficeArtBlipDIB(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    quint8 tag;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipDIB* operator->() const { return this; }
    inline const OfficeArtBlipDIB& operator*() const { return *this; }
    inline const OfficeArtBlipDIB* data() const { return this; }
};
class OfficeArtBlipTIFF {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipTIFF() :_data(0), _size(0) {}
    explicit OfficeArtBlipTIFF(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    quint8 tag;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipTIFF* operator->() const { return this; }
    inline const OfficeArtBlipTIFF& operator*() const { return *this; }
    inline const OfficeArtBlipTIFF* data() const { return this; }
};
class RECT {
public:
    const char* _data;
    static const quint32 _size;
    RECT() :_data(0) {}
    RECT(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    qint32 left;
    qint32 top;
    qint32 right;
    qint32 bottom;
    inline operator const void * () const { return _data; }
    inline const RECT* operator->() const { return this; }
    inline const RECT& operator*() const { return *this; }
    inline const RECT* data() const { return this; }
};
class POINT {
public:
    const char* _data;
    static const quint32 _size;
    POINT() :_data(0) {}
    POINT(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    qint32 x;
    qint32 y;
    inline operator const void * () const { return _data; }
    inline const POINT* operator->() const { return this; }
    inline const POINT& operator*() const { return *this; }
    inline const POINT* data() const { return this; }
};
class PowerPointStructs {
public:
    const char* _data;
    quint32 _size;
    PowerPointStructs() :_data(0), _size(0) {}
    explicit PowerPointStructs(const char* data, const quint32 maxsize);
    MSOArray<PowerPointStruct> anon;
    inline operator const void * () const { return _data; }
    inline const PowerPointStructs* operator->() const { return this; }
    inline const PowerPointStructs& operator*() const { return *this; }
    inline const PowerPointStructs* data() const { return this; }
};
class SoundCollectionAtom {
public:
    const char* _data;
    static const quint32 _size;
    SoundCollectionAtom() :_data(0) {}
    SoundCollectionAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint32 soundIdSeed;
    inline operator const void * () const { return _data; }
    inline const SoundCollectionAtom* operator->() const { return this; }
    inline const SoundCollectionAtom& operator*() const { return *this; }
    inline const SoundCollectionAtom* data() const { return this; }
};
class HeadersFootersAtom {
public:
    const char* _data;
    static const quint32 _size;
    HeadersFootersAtom() :_data(0) {}
    HeadersFootersAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint16 formatId;
    bool fHasDate;
    bool fHasTodayDate;
    bool fHasUserDate;
    bool fHasSlideNumber;
    bool fHasHeader;
    bool fHasFooter;
    quint8 reserved1;
    quint8 reserved2;
    inline operator const void * () const { return _data; }
    inline const HeadersFootersAtom* operator->() const { return this; }
    inline const HeadersFootersAtom& operator*() const { return *this; }
    inline const HeadersFootersAtom* data() const { return this; }
};
class UserDateAtom {
public:
    const char* _data;
    quint32 _size;
    UserDateAtom() :_data(0), _size(0) {}
    explicit UserDateAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> userDate;
    inline operator const void * () const { return _data; }
    inline const UserDateAtom* operator->() const { return this; }
    inline const UserDateAtom& operator*() const { return *this; }
    inline const UserDateAtom* data() const { return this; }
};
class HeaderAtom {
public:
    const char* _data;
    quint32 _size;
    HeaderAtom() :_data(0), _size(0) {}
    explicit HeaderAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> header;
    inline operator const void * () const { return _data; }
    inline const HeaderAtom* operator->() const { return this; }
    inline const HeaderAtom& operator*() const { return *this; }
    inline const HeaderAtom* data() const { return this; }
};
class FooterAtom {
public:
    const char* _data;
    quint32 _size;
    FooterAtom() :_data(0), _size(0) {}
    explicit FooterAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> footer;
    inline operator const void * () const { return _data; }
    inline const FooterAtom* operator->() const { return this; }
    inline const FooterAtom& operator*() const { return *this; }
    inline const FooterAtom* data() const { return this; }
};
class PerSlideHeadersFootersContainer {
public:
    const char* _data;
    quint32 _size;
    PerSlideHeadersFootersContainer() :_data(0), _size(0) {}
    explicit PerSlideHeadersFootersContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    UserDateAtom userDateAtom;
    HeaderAtom headerAtom;
    FooterAtom footerAtom;
    UserDateAtom userDateAtom2;
    inline operator const void * () const { return _data; }
    inline const PerSlideHeadersFootersContainer* operator->() const { return this; }
    inline const PerSlideHeadersFootersContainer& operator*() const { return *this; }
    inline const PerSlideHeadersFootersContainer* data() const { return this; }
};
class EndDocumentAtom {
public:
    const char* _data;
    static const quint32 _size;
    EndDocumentAtom() :_data(0) {}
    EndDocumentAtom(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    RecordHeader rh;
    inline operator const void * () const { return _data; }
    inline const EndDocumentAtom* operator->() const { return this; }
    inline const EndDocumentAtom& operator*() const { return *this; }
    inline const EndDocumentAtom* data() const { return this; }
};
class DocInfoListContainer {
public:
    const char* _data;
    quint32 _size;
    DocInfoListContainer() :_data(0), _size(0) {}
    explicit DocInfoListContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<DocInfoListSubContainerOrAtom> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const DocInfoListContainer* operator->() const { return this; }
    inline const DocInfoListContainer& operator*() const { return *this; }
    inline const DocInfoListContainer* data() const { return this; }
};
class SlideViewInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlideViewInfoAtom() :_data(0) {}
    SlideViewInfoAtom(const char* data, quint32/*ignored*/ = 0);// 11 bytes
    RecordHeader rh;
    quint8 unused1;
    quint8 fSnapToGrid;
    quint8 fSnapToShape;
    inline operator const void * () const { return _data; }
    inline const SlideViewInfoAtom* operator->() const { return this; }
    inline const SlideViewInfoAtom& operator*() const { return *this; }
    inline const SlideViewInfoAtom* data() const { return this; }
};
class GuideAtom {
public:
    const char* _data;
    static const quint32 _size;
    GuideAtom() :_data(0) {}
    GuideAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 type;
    qint32 pos;
    inline operator const void * () const { return _data; }
    inline const GuideAtom* operator->() const { return this; }
    inline const GuideAtom& operator*() const { return *this; }
    inline const GuideAtom* data() const { return this; }
};
class DocProgTagsContainer {
public:
    const char* _data;
    quint32 _size;
    DocProgTagsContainer() :_data(0), _size(0) {}
    explicit DocProgTagsContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<DocProgTagsSubContainerOrAtom> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const DocProgTagsContainer* operator->() const { return this; }
    inline const DocProgTagsContainer& operator*() const { return *this; }
    inline const DocProgTagsContainer* data() const { return this; }
};
class TextAutoNumberScheme {
public:
    const char* _data;
    static const quint32 _size;
    TextAutoNumberScheme() :_data(0) {}
    TextAutoNumberScheme(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint16 scheme;
    quint16 startNum;
    inline operator const void * () const { return _data; }
    inline const TextAutoNumberScheme* operator->() const { return this; }
    inline const TextAutoNumberScheme& operator*() const { return *this; }
    inline const TextAutoNumberScheme* data() const { return this; }
};
class BlipCollection9Container {
public:
    const char* _data;
    quint32 _size;
    BlipCollection9Container() :_data(0), _size(0) {}
    explicit BlipCollection9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<BlipEntityAtom> rgBlipEntityAtom;
    inline operator const void * () const { return _data; }
    inline const BlipCollection9Container* operator->() const { return this; }
    inline const BlipCollection9Container& operator*() const { return *this; }
    inline const BlipCollection9Container* data() const { return this; }
};
class Kinsoku9Atom {
public:
    const char* _data;
    static const quint32 _size;
    Kinsoku9Atom() :_data(0) {}
    Kinsoku9Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint8 korLevel;
    quint8 scLevel;
    quint8 tcLevel;
    quint8 jpnLevel;
    quint8 reserveda;
    quint32 reservedb;
    inline operator const void * () const { return _data; }
    inline const Kinsoku9Atom* operator->() const { return this; }
    inline const Kinsoku9Atom& operator*() const { return *this; }
    inline const Kinsoku9Atom* data() const { return this; }
};
class ExHyperlink9Container {
public:
    const char* _data;
    quint32 _size;
    ExHyperlink9Container() :_data(0), _size(0) {}
    explicit ExHyperlink9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExHyperlink9Container* operator->() const { return this; }
    inline const ExHyperlink9Container& operator*() const { return *this; }
    inline const ExHyperlink9Container* data() const { return this; }
};
class PresAdvisorFlags9Atom {
public:
    const char* _data;
    static const quint32 _size;
    PresAdvisorFlags9Atom() :_data(0) {}
    PresAdvisorFlags9Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    bool fDisableCaseStyleTitleRule;
    bool fDisableCaseStyleBodyRule;
    bool fDisableEndPunctuationTitleRule;
    bool fDisableEndPunctuationBodyRule;
    bool fDisableTooManyBulletsRule;
    bool fDisableFontSizeTitleRule;
    bool fDisableFontSizeBodyRule;
    bool fDisableNumberOfLinesTitleRule;
    bool fDisableNumberOfLinesBodyRule;
    bool fDisableTooManyFontsRule;
    bool fDisablePrintTip;
    quint8 reserveda;
    quint16 reservedb;
    inline operator const void * () const { return _data; }
    inline const PresAdvisorFlags9Atom* operator->() const { return this; }
    inline const PresAdvisorFlags9Atom& operator*() const { return *this; }
    inline const PresAdvisorFlags9Atom* data() const { return this; }
};
class EnvelopeData9Atom {
public:
    const char* _data;
    quint32 _size;
    EnvelopeData9Atom() :_data(0), _size(0) {}
    explicit EnvelopeData9Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const EnvelopeData9Atom* operator->() const { return this; }
    inline const EnvelopeData9Atom& operator*() const { return *this; }
    inline const EnvelopeData9Atom* data() const { return this; }
};
class EnvelopeFlags9Atom {
public:
    const char* _data;
    static const quint32 _size;
    EnvelopeFlags9Atom() :_data(0) {}
    EnvelopeFlags9Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    bool fHasEnvelope;
    bool fEnvelopeVisible;
    quint8 reserved1;
    bool fEnvelopeDirty;
    quint8 reserved2a;
    quint8 reserved2b;
    quint16 reserved2c;
    inline operator const void * () const { return _data; }
    inline const EnvelopeFlags9Atom* operator->() const { return this; }
    inline const EnvelopeFlags9Atom& operator*() const { return *this; }
    inline const EnvelopeFlags9Atom* data() const { return this; }
};
class HTMLDocInfo9Atom {
public:
    const char* _data;
    static const quint32 _size;
    HTMLDocInfo9Atom() :_data(0) {}
    HTMLDocInfo9Atom(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    RecordHeader rh;
    quint32 unused1;
    quint32 encoding;
    quint16 frameColorType;
    quint8 screenSize;
    quint8 unused2;
    quint8 outputType;
    bool fShowFrame;
    bool fResizeGraphics;
    bool fOrganizeInFolder;
    bool fUseLongFileNames;
    bool fRelyOnVML;
    bool fAllowPNG;
    bool fShowSlideAnimation;
    bool reserved1;
    quint16 unused3;
    inline operator const void * () const { return _data; }
    inline const HTMLDocInfo9Atom* operator->() const { return this; }
    inline const HTMLDocInfo9Atom& operator*() const { return *this; }
    inline const HTMLDocInfo9Atom* data() const { return this; }
};
class HTMLPublishInfo9Container {
public:
    const char* _data;
    quint32 _size;
    HTMLPublishInfo9Container() :_data(0), _size(0) {}
    explicit HTMLPublishInfo9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const HTMLPublishInfo9Container* operator->() const { return this; }
    inline const HTMLPublishInfo9Container& operator*() const { return *this; }
    inline const HTMLPublishInfo9Container* data() const { return this; }
};
class BroadcastDocInfo9Container {
public:
    const char* _data;
    quint32 _size;
    BroadcastDocInfo9Container() :_data(0), _size(0) {}
    explicit BroadcastDocInfo9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const BroadcastDocInfo9Container* operator->() const { return this; }
    inline const BroadcastDocInfo9Container& operator*() const { return *this; }
    inline const BroadcastDocInfo9Container* data() const { return this; }
};
class OutlineTextProps9Container {
public:
    const char* _data;
    quint32 _size;
    OutlineTextProps9Container() :_data(0), _size(0) {}
    explicit OutlineTextProps9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<OutlineTextProps9Entry> rgOutlineTextProps9Entry;
    inline operator const void * () const { return _data; }
    inline const OutlineTextProps9Container* operator->() const { return this; }
    inline const OutlineTextProps9Container& operator*() const { return *this; }
    inline const OutlineTextProps9Container* data() const { return this; }
};
class OutlineTextPropsHeaderExAtom {
public:
    const char* _data;
    static const quint32 _size;
    OutlineTextPropsHeaderExAtom() :_data(0) {}
    OutlineTextPropsHeaderExAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 slideIdRef;
    quint32 txType;
    inline operator const void * () const { return _data; }
    inline const OutlineTextPropsHeaderExAtom* operator->() const { return this; }
    inline const OutlineTextPropsHeaderExAtom& operator*() const { return *this; }
    inline const OutlineTextPropsHeaderExAtom* data() const { return this; }
};
class StyleTextProp9Atom {
public:
    const char* _data;
    quint32 _size;
    StyleTextProp9Atom() :_data(0), _size(0) {}
    explicit StyleTextProp9Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<StyleTextProp9> rgStyleTextProp9;
    inline operator const void * () const { return _data; }
    inline const StyleTextProp9Atom* operator->() const { return this; }
    inline const StyleTextProp9Atom& operator*() const { return *this; }
    inline const StyleTextProp9Atom* data() const { return this; }
};
class FontCollection10Container {
public:
    const char* _data;
    quint32 _size;
    FontCollection10Container() :_data(0), _size(0) {}
    explicit FontCollection10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<FontCollectionEntry> rgFontCollectionEntry;
    inline operator const void * () const { return _data; }
    inline const FontCollection10Container* operator->() const { return this; }
    inline const FontCollection10Container& operator*() const { return *this; }
    inline const FontCollection10Container* data() const { return this; }
};
class GridSpacing10Atom {
public:
    const char* _data;
    static const quint32 _size;
    GridSpacing10Atom() :_data(0) {}
    GridSpacing10Atom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 x;
    quint32 y;
    inline operator const void * () const { return _data; }
    inline const GridSpacing10Atom* operator->() const { return this; }
    inline const GridSpacing10Atom& operator*() const { return *this; }
    inline const GridSpacing10Atom* data() const { return this; }
};
class AuthorNameAtom {
public:
    const char* _data;
    quint32 _size;
    AuthorNameAtom() :_data(0), _size(0) {}
    explicit AuthorNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> authorName;
    inline operator const void * () const { return _data; }
    inline const AuthorNameAtom* operator->() const { return this; }
    inline const AuthorNameAtom& operator*() const { return *this; }
    inline const AuthorNameAtom* data() const { return this; }
};
class CommentIndex10Atom {
public:
    const char* _data;
    static const quint32 _size;
    CommentIndex10Atom() :_data(0) {}
    CommentIndex10Atom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    qint32 colorIndex;
    qint32 commentIndexSeed;
    inline operator const void * () const { return _data; }
    inline const CommentIndex10Atom* operator->() const { return this; }
    inline const CommentIndex10Atom& operator*() const { return *this; }
    inline const CommentIndex10Atom* data() const { return this; }
};
class FontEmbedFlags10Atom {
public:
    const char* _data;
    static const quint32 _size;
    FontEmbedFlags10Atom() :_data(0) {}
    FontEmbedFlags10Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    bool fSubset;
    bool fSubsetOptionConfirmed;
    quint16 unuseda;
    quint16 unusedb;
    inline operator const void * () const { return _data; }
    inline const FontEmbedFlags10Atom* operator->() const { return this; }
    inline const FontEmbedFlags10Atom& operator*() const { return *this; }
    inline const FontEmbedFlags10Atom* data() const { return this; }
};
class CopyrightAtom {
public:
    const char* _data;
    quint32 _size;
    CopyrightAtom() :_data(0), _size(0) {}
    explicit CopyrightAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> copyright;
    inline operator const void * () const { return _data; }
    inline const CopyrightAtom* operator->() const { return this; }
    inline const CopyrightAtom& operator*() const { return *this; }
    inline const CopyrightAtom* data() const { return this; }
};
class KeywordsAtom {
public:
    const char* _data;
    quint32 _size;
    KeywordsAtom() :_data(0), _size(0) {}
    explicit KeywordsAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> keywords;
    inline operator const void * () const { return _data; }
    inline const KeywordsAtom* operator->() const { return this; }
    inline const KeywordsAtom& operator*() const { return *this; }
    inline const KeywordsAtom* data() const { return this; }
};
class FilterPrivacyFlags10Atom {
public:
    const char* _data;
    static const quint32 _size;
    FilterPrivacyFlags10Atom() :_data(0) {}
    FilterPrivacyFlags10Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    bool fRemovePII;
    quint8 reserved2a;
    quint8 reserved2b;
    quint16 reserved2c;
    inline operator const void * () const { return _data; }
    inline const FilterPrivacyFlags10Atom* operator->() const { return this; }
    inline const FilterPrivacyFlags10Atom& operator*() const { return *this; }
    inline const FilterPrivacyFlags10Atom* data() const { return this; }
};
class OutlineTextProps10Container {
public:
    const char* _data;
    quint32 _size;
    OutlineTextProps10Container() :_data(0), _size(0) {}
    explicit OutlineTextProps10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<OutlineTextProps10Entry> rgOutlineTextProps10Entry;
    inline operator const void * () const { return _data; }
    inline const OutlineTextProps10Container* operator->() const { return this; }
    inline const OutlineTextProps10Container& operator*() const { return *this; }
    inline const OutlineTextProps10Container* data() const { return this; }
};
class StyleTextProp10Atom {
public:
    const char* _data;
    quint32 _size;
    StyleTextProp10Atom() :_data(0), _size(0) {}
    explicit StyleTextProp10Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<TextCFException10> rgStyleTextProp10;
    inline operator const void * () const { return _data; }
    inline const StyleTextProp10Atom* operator->() const { return this; }
    inline const StyleTextProp10Atom& operator*() const { return *this; }
    inline const StyleTextProp10Atom* data() const { return this; }
};
class DocToolbarStates10Atom {
public:
    const char* _data;
    static const quint32 _size;
    DocToolbarStates10Atom() :_data(0) {}
    DocToolbarStates10Atom(const char* data, quint32/*ignored*/ = 0);// 9 bytes
    RecordHeader rh;
    bool fShowReviewingToolbar;
    bool fShowReviewingGallery;
    quint8 reserved;
    inline operator const void * () const { return _data; }
    inline const DocToolbarStates10Atom* operator->() const { return this; }
    inline const DocToolbarStates10Atom& operator*() const { return *this; }
    inline const DocToolbarStates10Atom* data() const { return this; }
};
class SlideListTable10Container {
public:
    const char* _data;
    quint32 _size;
    SlideListTable10Container() :_data(0), _size(0) {}
    explicit SlideListTable10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const SlideListTable10Container* operator->() const { return this; }
    inline const SlideListTable10Container& operator*() const { return *this; }
    inline const SlideListTable10Container* data() const { return this; }
};
class DiffTree10Container {
public:
    const char* _data;
    quint32 _size;
    DiffTree10Container() :_data(0), _size(0) {}
    explicit DiffTree10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const DiffTree10Container* operator->() const { return this; }
    inline const DiffTree10Container& operator*() const { return *this; }
    inline const DiffTree10Container* data() const { return this; }
};
class ModifyPasswordAtom {
public:
    const char* _data;
    quint32 _size;
    ModifyPasswordAtom() :_data(0), _size(0) {}
    explicit ModifyPasswordAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> modifyPassword;
    inline operator const void * () const { return _data; }
    inline const ModifyPasswordAtom* operator->() const { return this; }
    inline const ModifyPasswordAtom& operator*() const { return *this; }
    inline const ModifyPasswordAtom* data() const { return this; }
};
class PhotoAlbumInfo10Atom {
public:
    const char* _data;
    static const quint32 _size;
    PhotoAlbumInfo10Atom() :_data(0) {}
    PhotoAlbumInfo10Atom(const char* data, quint32/*ignored*/ = 0);// 14 bytes
    RecordHeader rh;
    quint8 fUseBlackWhite;
    quint8 fHasCaption;
    quint8 layout;
    quint8 unused;
    quint16 frameShape;
    inline operator const void * () const { return _data; }
    inline const PhotoAlbumInfo10Atom* operator->() const { return this; }
    inline const PhotoAlbumInfo10Atom& operator*() const { return *this; }
    inline const PhotoAlbumInfo10Atom* data() const { return this; }
};
class SmartTagStore11Container {
public:
    const char* _data;
    quint32 _size;
    SmartTagStore11Container() :_data(0), _size(0) {}
    explicit SmartTagStore11Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const SmartTagStore11Container* operator->() const { return this; }
    inline const SmartTagStore11Container& operator*() const { return *this; }
    inline const SmartTagStore11Container* data() const { return this; }
};
class OutlineTextProps11Container {
public:
    const char* _data;
    quint32 _size;
    OutlineTextProps11Container() :_data(0), _size(0) {}
    explicit OutlineTextProps11Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const OutlineTextProps11Container* operator->() const { return this; }
    inline const OutlineTextProps11Container& operator*() const { return *this; }
    inline const OutlineTextProps11Container* data() const { return this; }
};
class BinaryTagDataBlob {
public:
    const char* _data;
    quint32 _size;
    BinaryTagDataBlob() :_data(0), _size(0) {}
    explicit BinaryTagDataBlob(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const BinaryTagDataBlob* operator->() const { return this; }
    inline const BinaryTagDataBlob& operator*() const { return *this; }
};
class PP12DocBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP12DocBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP12DocBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> tagName;
    RecordHeader rhData;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const PP12DocBinaryTagExtension* operator->() const { return this; }
    inline const PP12DocBinaryTagExtension& operator*() const { return *this; }
    inline const PP12DocBinaryTagExtension* data() const { return this; }
};
class SorterViewInfoContainer {
public:
    const char* _data;
    quint32 _size;
    SorterViewInfoContainer() :_data(0), _size(0) {}
    explicit SorterViewInfoContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const SorterViewInfoContainer* operator->() const { return this; }
    inline const SorterViewInfoContainer& operator*() const { return *this; }
    inline const SorterViewInfoContainer* data() const { return this; }
};
class VBAInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    VBAInfoAtom() :_data(0) {}
    VBAInfoAtom(const char* data, quint32/*ignored*/ = 0);// 20 bytes
    RecordHeader rh;
    quint32 persistIdRef;
    quint32 fHasMacros;
    quint32 version;
    inline operator const void * () const { return _data; }
    inline const VBAInfoAtom* operator->() const { return this; }
    inline const VBAInfoAtom& operator*() const { return *this; }
    inline const VBAInfoAtom* data() const { return this; }
};
class MasterListWithTextContainer {
public:
    const char* _data;
    quint32 _size;
    MasterListWithTextContainer() :_data(0), _size(0) {}
    explicit MasterListWithTextContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<MasterPersistAtom> rgMasterPersistAtom;
    inline operator const void * () const { return _data; }
    inline const MasterListWithTextContainer* operator->() const { return this; }
    inline const MasterListWithTextContainer& operator*() const { return *this; }
    inline const MasterListWithTextContainer* data() const { return this; }
};
class MasterPersistAtom {
public:
    const char* _data;
    static const quint32 _size;
    MasterPersistAtom() :_data(0) {}
    MasterPersistAtom(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    RecordHeader rh;
    quint32 persistIdRef;
    quint8 reserved1;
    bool fNonOutLineData;
    quint8 reserved2;
    quint8 reserved3;
    quint16 reserved4;
    quint32 reserved5;
    quint32 masterId;
    quint32 reserved6;
    inline operator const void * () const { return _data; }
    inline const MasterPersistAtom* operator->() const { return this; }
    inline const MasterPersistAtom& operator*() const { return *this; }
    inline const MasterPersistAtom* data() const { return this; }
};
class SlideListWithTextContainer {
public:
    const char* _data;
    quint32 _size;
    SlideListWithTextContainer() :_data(0), _size(0) {}
    explicit SlideListWithTextContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<SlideListWithTextSubContainerOrAtom> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const SlideListWithTextContainer* operator->() const { return this; }
    inline const SlideListWithTextContainer& operator*() const { return *this; }
    inline const SlideListWithTextContainer* data() const { return this; }
};
class NotesListWithTextContainer {
public:
    const char* _data;
    quint32 _size;
    NotesListWithTextContainer() :_data(0), _size(0) {}
    explicit NotesListWithTextContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<NotesPersistAtom> rgNotesPersistAtom;
    inline operator const void * () const { return _data; }
    inline const NotesListWithTextContainer* operator->() const { return this; }
    inline const NotesListWithTextContainer& operator*() const { return *this; }
    inline const NotesListWithTextContainer* data() const { return this; }
};
class NotesPersistAtom {
public:
    const char* _data;
    static const quint32 _size;
    NotesPersistAtom() :_data(0) {}
    NotesPersistAtom(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    RecordHeader rh;
    quint32 persistIdRef;
    quint8 reserved1;
    bool fNonOutlineData;
    quint8 reserved2a;
    quint8 reserved2b;
    quint16 reserved2c;
    quint32 reserved3;
    quint32 notesId;
    quint32 reserved4;
    inline operator const void * () const { return _data; }
    inline const NotesPersistAtom* operator->() const { return this; }
    inline const NotesPersistAtom& operator*() const { return *this; }
    inline const NotesPersistAtom* data() const { return this; }
};
class TextHeaderAtom {
public:
    const char* _data;
    static const quint32 _size;
    TextHeaderAtom() :_data(0) {}
    TextHeaderAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint32 textType;
    inline operator const void * () const { return _data; }
    inline const TextHeaderAtom* operator->() const { return this; }
    inline const TextHeaderAtom& operator*() const { return *this; }
    inline const TextHeaderAtom* data() const { return this; }
};
class TextCharsAtom {
public:
    const char* _data;
    quint32 _size;
    TextCharsAtom() :_data(0), _size(0) {}
    explicit TextCharsAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> textChars;
    inline operator const void * () const { return _data; }
    inline const TextCharsAtom* operator->() const { return this; }
    inline const TextCharsAtom& operator*() const { return *this; }
    inline const TextCharsAtom* data() const { return this; }
};
class TextBytesAtom {
public:
    const char* _data;
    quint32 _size;
    TextBytesAtom() :_data(0), _size(0) {}
    explicit TextBytesAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> textChars;
    inline operator const void * () const { return _data; }
    inline const TextBytesAtom* operator->() const { return this; }
    inline const TextBytesAtom& operator*() const { return *this; }
    inline const TextBytesAtom* data() const { return this; }
};
class MasterTextPropAtom {
public:
    const char* _data;
    quint32 _size;
    MasterTextPropAtom() :_data(0), _size(0) {}
    explicit MasterTextPropAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<MasterTextPropRun> rgMasterTextPropRun;
    inline operator const void * () const { return _data; }
    inline const MasterTextPropAtom* operator->() const { return this; }
    inline const MasterTextPropAtom& operator*() const { return *this; }
    inline const MasterTextPropAtom* data() const { return this; }
};
class MasterTextPropRun {
public:
    const char* _data;
    static const quint32 _size;
    MasterTextPropRun() :_data(0) {}
    MasterTextPropRun(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    quint32 count;
    quint16 indentLevel;
    inline operator const void * () const { return _data; }
    inline const MasterTextPropRun* operator->() const { return this; }
    inline const MasterTextPropRun& operator*() const { return *this; }
    inline const MasterTextPropRun* data() const { return this; }
};
class StyleTextPropAtom {
public:
    const char* _data;
    quint32 _size;
    StyleTextPropAtom() :_data(0), _size(0) {}
    explicit StyleTextPropAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const StyleTextPropAtom* operator->() const { return this; }
    inline const StyleTextPropAtom& operator*() const { return *this; }
    inline const StyleTextPropAtom* data() const { return this; }
};
class SlideNumberMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlideNumberMCAtom() :_data(0) {}
    SlideNumberMCAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint32 position;
    inline operator const void * () const { return _data; }
    inline const SlideNumberMCAtom* operator->() const { return this; }
    inline const SlideNumberMCAtom& operator*() const { return *this; }
    inline const SlideNumberMCAtom* data() const { return this; }
};
class DateTimeMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    DateTimeMCAtom() :_data(0) {}
    DateTimeMCAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    qint32 position;
    quint8 index;
    MSOCastArray<char> unused;
    inline operator const void * () const { return _data; }
    inline const DateTimeMCAtom* operator->() const { return this; }
    inline const DateTimeMCAtom& operator*() const { return *this; }
    inline const DateTimeMCAtom* data() const { return this; }
};
class GenericDateMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    GenericDateMCAtom() :_data(0) {}
    GenericDateMCAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint32 position;
    inline operator const void * () const { return _data; }
    inline const GenericDateMCAtom* operator->() const { return this; }
    inline const GenericDateMCAtom& operator*() const { return *this; }
    inline const GenericDateMCAtom* data() const { return this; }
};
class HeaderMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    HeaderMCAtom() :_data(0) {}
    HeaderMCAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint32 position;
    inline operator const void * () const { return _data; }
    inline const HeaderMCAtom* operator->() const { return this; }
    inline const HeaderMCAtom& operator*() const { return *this; }
    inline const HeaderMCAtom* data() const { return this; }
};
class FooterMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    FooterMCAtom() :_data(0) {}
    FooterMCAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint32 position;
    inline operator const void * () const { return _data; }
    inline const FooterMCAtom* operator->() const { return this; }
    inline const FooterMCAtom& operator*() const { return *this; }
    inline const FooterMCAtom* data() const { return this; }
};
class RTFDateTimeMCAtom {
public:
    const char* _data;
    static const quint32 _size;
    RTFDateTimeMCAtom() :_data(0) {}
    RTFDateTimeMCAtom(const char* data, quint32/*ignored*/ = 0);// 140 bytes
    RecordHeader rh;
    qint32 position;
    MSOCastArray<char> format;
    inline operator const void * () const { return _data; }
    inline const RTFDateTimeMCAtom* operator->() const { return this; }
    inline const RTFDateTimeMCAtom& operator*() const { return *this; }
    inline const RTFDateTimeMCAtom* data() const { return this; }
};
class TextBookmarkAtom {
public:
    const char* _data;
    static const quint32 _size;
    TextBookmarkAtom() :_data(0) {}
    TextBookmarkAtom(const char* data, quint32/*ignored*/ = 0);// 20 bytes
    RecordHeader rh;
    qint32 begin;
    qint32 end;
    qint32 bookmarkID;
    inline operator const void * () const { return _data; }
    inline const TextBookmarkAtom* operator->() const { return this; }
    inline const TextBookmarkAtom& operator*() const { return *this; }
    inline const TextBookmarkAtom* data() const { return this; }
};
class TextRange {
public:
    const char* _data;
    static const quint32 _size;
    TextRange() :_data(0) {}
    TextRange(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    qint32 begin;
    qint32 end;
    inline operator const void * () const { return _data; }
    inline const TextRange* operator->() const { return this; }
    inline const TextRange& operator*() const { return *this; }
    inline const TextRange* data() const { return this; }
};
class MouseClickTextInteractiveInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    MouseClickTextInteractiveInfoAtom() :_data(0) {}
    MouseClickTextInteractiveInfoAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    TextRange range;
    inline operator const void * () const { return _data; }
    inline const MouseClickTextInteractiveInfoAtom* operator->() const { return this; }
    inline const MouseClickTextInteractiveInfoAtom& operator*() const { return *this; }
    inline const MouseClickTextInteractiveInfoAtom* data() const { return this; }
};
class MouseOverTextInteractiveInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    MouseOverTextInteractiveInfoAtom() :_data(0) {}
    MouseOverTextInteractiveInfoAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    TextRange range;
    inline operator const void * () const { return _data; }
    inline const MouseOverTextInteractiveInfoAtom* operator->() const { return this; }
    inline const MouseOverTextInteractiveInfoAtom& operator*() const { return *this; }
    inline const MouseOverTextInteractiveInfoAtom* data() const { return this; }
};
class SlideId {
public:
    const char* _data;
    static const quint32 _size;
    SlideId() :_data(0) {}
    SlideId(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint32 slideId;
    inline operator const void * () const { return _data; }
    inline const SlideId* operator->() const { return this; }
    inline const SlideId& operator*() const { return *this; }
    inline const SlideId* data() const { return this; }
};
class TabStops {
public:
    const char* _data;
    quint32 _size;
    TabStops() :_data(0), _size(0) {}
    explicit TabStops(const char* data, const quint32 maxsize);
    quint16 count;
    MSOArray<TabStop> rgTabStop;
    inline operator const void * () const { return _data; }
    inline const TabStops* operator->() const { return this; }
    inline const TabStops& operator*() const { return *this; }
    inline const TabStops* data() const { return this; }
};
class TabStop {
public:
    const char* _data;
    static const quint32 _size;
    TabStop() :_data(0) {}
    TabStop(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    qint16 position;
    quint16 type;
    inline operator const void * () const { return _data; }
    inline const TabStop* operator->() const { return this; }
    inline const TabStop& operator*() const { return *this; }
    inline const TabStop* data() const { return this; }
};
class PFWrapFlags {
public:
    const char* _data;
    static const quint32 _size;
    PFWrapFlags() :_data(0) {}
    PFWrapFlags(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool charWrap;
    bool wordWrap;
    bool overflow;
    quint8 reserved1;
    quint8 reserved2;
    inline operator const void * () const { return _data; }
    inline const PFWrapFlags* operator->() const { return this; }
    inline const PFWrapFlags& operator*() const { return *this; }
    inline const PFWrapFlags* data() const { return this; }
};
class ColorIndexStruct {
public:
    const char* _data;
    static const quint32 _size;
    ColorIndexStruct() :_data(0) {}
    ColorIndexStruct(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 index;
    inline operator const void * () const { return _data; }
    inline const ColorIndexStruct* operator->() const { return this; }
    inline const ColorIndexStruct& operator*() const { return *this; }
    inline const ColorIndexStruct* data() const { return this; }
};
class BulletFlags {
public:
    const char* _data;
    static const quint32 _size;
    BulletFlags() :_data(0) {}
    BulletFlags(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool fHasBullet;
    bool fBulletHasFont;
    bool fBulletHasColor;
    bool fBulletHasSize;
    quint16 reserved;
    inline operator const void * () const { return _data; }
    inline const BulletFlags* operator->() const { return this; }
    inline const BulletFlags& operator*() const { return *this; }
    inline const BulletFlags* data() const { return this; }
};
class PFMasks {
public:
    const char* _data;
    static const quint32 _size;
    PFMasks() :_data(0) {}
    PFMasks(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    bool hasBullet;
    bool bulletHasFont;
    bool bulletHasColor;
    bool bulletHasSize;
    bool bulletFont;
    bool bulletColor;
    bool bulletSize;
    bool bulletChar;
    bool leftMargin;
    bool unused;
    bool indent;
    bool align;
    bool lineSpacing;
    bool spaceBefore;
    bool spaceAfter;
    bool defaultTabSize;
    bool fontAlign;
    bool charWrap;
    bool wordWrap;
    bool overflow;
    bool tabStops;
    bool textDirection;
    bool reserved;
    bool bulletBlip;
    bool bulletScheme;
    bool bulletHasScheme;
    quint8 reserved2;
    inline operator const void * () const { return _data; }
    inline const PFMasks* operator->() const { return this; }
    inline const PFMasks& operator*() const { return *this; }
    inline const PFMasks* data() const { return this; }
};
class CFMasks {
public:
    const char* _data;
    static const quint32 _size;
    CFMasks() :_data(0) {}
    CFMasks(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    bool bold;
    bool italic;
    bool underline;
    bool unused1;
    bool shadow;
    bool fehint;
    bool unused2;
    bool kumi;
    bool unused3;
    bool emboss;
    quint8 fHasStyle;
    quint8 unused4;
    bool typeface;
    bool size;
    bool color;
    bool position;
    bool pp10ext;
    bool oldEATypeface;
    bool ansiTypeface;
    bool symbolTypeface;
    bool newEATypeface;
    bool csTypeface;
    bool pp11ext;
    quint8 reserved;
    inline operator const void * () const { return _data; }
    inline const CFMasks* operator->() const { return this; }
    inline const CFMasks& operator*() const { return *this; }
    inline const CFMasks* data() const { return this; }
};
class CFStyle {
public:
    const char* _data;
    static const quint32 _size;
    CFStyle() :_data(0) {}
    CFStyle(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool bold;
    bool italic;
    bool underline;
    bool unused1;
    bool shadow;
    bool fehint;
    bool unused2;
    bool kumi;
    bool unused3;
    bool emboss;
    quint8 pp9rt;
    quint8 unused4;
    inline operator const void * () const { return _data; }
    inline const CFStyle* operator->() const { return this; }
    inline const CFStyle& operator*() const { return *this; }
    inline const CFStyle* data() const { return this; }
};
class FontCollectionContainer {
public:
    const char* _data;
    quint32 _size;
    FontCollectionContainer() :_data(0), _size(0) {}
    explicit FontCollectionContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<FontCollectionEntry> rgFontCollectionEntry;
    inline operator const void * () const { return _data; }
    inline const FontCollectionContainer* operator->() const { return this; }
    inline const FontCollectionContainer& operator*() const { return *this; }
    inline const FontCollectionContainer* data() const { return this; }
};
class FontEntityAtom {
public:
    const char* _data;
    static const quint32 _size;
    FontEntityAtom() :_data(0) {}
    FontEntityAtom(const char* data, quint32/*ignored*/ = 0);// 76 bytes
    RecordHeader rh;
    MSOCastArray<quint16> lfFaceName;
    quint8 lfCharSet;
    bool fEmbedSubsetted;
    quint8 unused;
    bool rasterFontType;
    bool deviceFontType;
    bool truetypeFontType;
    bool fNoFontSubstitution;
    quint8 reserved;
    quint8 lfPitchAndFamily;
    inline operator const void * () const { return _data; }
    inline const FontEntityAtom* operator->() const { return this; }
    inline const FontEntityAtom& operator*() const { return *this; }
    inline const FontEntityAtom* data() const { return this; }
};
class FontEmbedDataBlob {
public:
    const char* _data;
    quint32 _size;
    FontEmbedDataBlob() :_data(0), _size(0) {}
    explicit FontEmbedDataBlob(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const FontEmbedDataBlob* operator->() const { return this; }
    inline const FontEmbedDataBlob& operator*() const { return *this; }
};
class KinsokuAtom {
public:
    const char* _data;
    static const quint32 _size;
    KinsokuAtom() :_data(0) {}
    KinsokuAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint32 level;
    inline operator const void * () const { return _data; }
    inline const KinsokuAtom* operator->() const { return this; }
    inline const KinsokuAtom& operator*() const { return *this; }
    inline const KinsokuAtom* data() const { return this; }
};
class KinsokuLeadingAtom {
public:
    const char* _data;
    quint32 _size;
    KinsokuLeadingAtom() :_data(0), _size(0) {}
    explicit KinsokuLeadingAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> kinsokuLeading;
    inline operator const void * () const { return _data; }
    inline const KinsokuLeadingAtom* operator->() const { return this; }
    inline const KinsokuLeadingAtom& operator*() const { return *this; }
    inline const KinsokuLeadingAtom* data() const { return this; }
};
class KinsokuFollowingAtom {
public:
    const char* _data;
    quint32 _size;
    KinsokuFollowingAtom() :_data(0), _size(0) {}
    explicit KinsokuFollowingAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> kinsokuFollowing;
    inline operator const void * () const { return _data; }
    inline const KinsokuFollowingAtom* operator->() const { return this; }
    inline const KinsokuFollowingAtom& operator*() const { return *this; }
    inline const KinsokuFollowingAtom* data() const { return this; }
};
class TextSpecialInfoAtom {
public:
    const char* _data;
    quint32 _size;
    TextSpecialInfoAtom() :_data(0), _size(0) {}
    explicit TextSpecialInfoAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<TextSIRun> rgSIRun;
    inline operator const void * () const { return _data; }
    inline const TextSpecialInfoAtom* operator->() const { return this; }
    inline const TextSpecialInfoAtom& operator*() const { return *this; }
    inline const TextSpecialInfoAtom* data() const { return this; }
};
class SmartTags {
public:
    const char* _data;
    quint32 _size;
    SmartTags() :_data(0), _size(0) {}
    explicit SmartTags(const char* data, const quint32 maxsize);
    quint32 count;
    MSOCastArray<quint32> rgSmartTagIndex;
    inline operator const void * () const { return _data; }
    inline const SmartTags* operator->() const { return this; }
    inline const SmartTags& operator*() const { return *this; }
    inline const SmartTags* data() const { return this; }
};
class ExOleEmbedAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExOleEmbedAtom() :_data(0) {}
    ExOleEmbedAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 exColorFollow;
    quint8 fCantLockServer;
    quint8 fNoSizeToServer;
    quint8 fIsTable;
    quint8 unused;
    inline operator const void * () const { return _data; }
    inline const ExOleEmbedAtom* operator->() const { return this; }
    inline const ExOleEmbedAtom& operator*() const { return *this; }
    inline const ExOleEmbedAtom* data() const { return this; }
};
class PointStruct {
public:
    const char* _data;
    static const quint32 _size;
    PointStruct() :_data(0) {}
    PointStruct(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    qint32 x;
    qint32 y;
    inline operator const void * () const { return _data; }
    inline const PointStruct* operator->() const { return this; }
    inline const PointStruct& operator*() const { return *this; }
    inline const PointStruct* data() const { return this; }
};
class RatioStruct {
public:
    const char* _data;
    static const quint32 _size;
    RatioStruct() :_data(0) {}
    RatioStruct(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    qint32 numer;
    qint32 denom;
    inline operator const void * () const { return _data; }
    inline const RatioStruct* operator->() const { return this; }
    inline const RatioStruct& operator*() const { return *this; }
    inline const RatioStruct* data() const { return this; }
};
class PersistDirectoryAtom {
public:
    const char* _data;
    quint32 _size;
    PersistDirectoryAtom() :_data(0), _size(0) {}
    explicit PersistDirectoryAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<PersistDirectoryEntry> rgPersistDirEntry;
    inline operator const void * () const { return _data; }
    inline const PersistDirectoryAtom* operator->() const { return this; }
    inline const PersistDirectoryAtom& operator*() const { return *this; }
    inline const PersistDirectoryAtom* data() const { return this; }
};
class UnknownDocumentContainerChild {
public:
    const char* _data;
    quint32 _size;
    UnknownDocumentContainerChild() :_data(0), _size(0) {}
    explicit UnknownDocumentContainerChild(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> unknown;
    inline operator const void * () const { return _data; }
    inline const UnknownDocumentContainerChild* operator->() const { return this; }
    inline const UnknownDocumentContainerChild& operator*() const { return *this; }
    inline const UnknownDocumentContainerChild* data() const { return this; }
};
class UnknownOfficeArtClientDataChild {
public:
    const char* _data;
    quint32 _size;
    UnknownOfficeArtClientDataChild() :_data(0), _size(0) {}
    explicit UnknownOfficeArtClientDataChild(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> unknown;
    inline operator const void * () const { return _data; }
    inline const UnknownOfficeArtClientDataChild* operator->() const { return this; }
    inline const UnknownOfficeArtClientDataChild& operator*() const { return *this; }
    inline const UnknownOfficeArtClientDataChild* data() const { return this; }
};
class UnknownSlideContainerChild {
public:
    const char* _data;
    quint32 _size;
    UnknownSlideContainerChild() :_data(0), _size(0) {}
    explicit UnknownSlideContainerChild(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> unknown;
    inline operator const void * () const { return _data; }
    inline const UnknownSlideContainerChild* operator->() const { return this; }
    inline const UnknownSlideContainerChild& operator*() const { return *this; }
    inline const UnknownSlideContainerChild* data() const { return this; }
};
class UnknownTextContainerChild {
public:
    const char* _data;
    quint32 _size;
    UnknownTextContainerChild() :_data(0), _size(0) {}
    explicit UnknownTextContainerChild(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> unknown;
    inline operator const void * () const { return _data; }
    inline const UnknownTextContainerChild* operator->() const { return this; }
    inline const UnknownTextContainerChild& operator*() const { return *this; }
    inline const UnknownTextContainerChild* data() const { return this; }
};
class PersistDirectoryEntry {
public:
    const char* _data;
    quint32 _size;
    PersistDirectoryEntry() :_data(0), _size(0) {}
    explicit PersistDirectoryEntry(const char* data, const quint32 maxsize);
    quint32 persistId;
    quint16 cPersist;
    MSOCastArray<quint32> rgPersistOffset;
    inline operator const void * () const { return _data; }
    inline const PersistDirectoryEntry* operator->() const { return this; }
    inline const PersistDirectoryEntry& operator*() const { return *this; }
    inline const PersistDirectoryEntry* data() const { return this; }
};
class PersistIdRef {
public:
    const char* _data;
    static const quint32 _size;
    PersistIdRef() :_data(0) {}
    PersistIdRef(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint32 anon;
    inline operator const void * () const { return _data; }
    inline const PersistIdRef* operator->() const { return this; }
    inline const PersistIdRef& operator*() const { return *this; }
    inline const PersistIdRef* data() const { return this; }
};
class SchemeListElementColorSchemeAtom {
public:
    const char* _data;
    quint32 _size;
    SchemeListElementColorSchemeAtom() :_data(0), _size(0) {}
    explicit SchemeListElementColorSchemeAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<ColorStruct> rgSchemeColor;
    inline operator const void * () const { return _data; }
    inline const SchemeListElementColorSchemeAtom* operator->() const { return this; }
    inline const SchemeListElementColorSchemeAtom& operator*() const { return *this; }
    inline const SchemeListElementColorSchemeAtom* data() const { return this; }
};
class RoundTripOArtTextStyles12Atom {
public:
    const char* _data;
    quint32 _size;
    RoundTripOArtTextStyles12Atom() :_data(0), _size(0) {}
    explicit RoundTripOArtTextStyles12Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RoundTripOArtTextStyles12Atom* operator->() const { return this; }
    inline const RoundTripOArtTextStyles12Atom& operator*() const { return *this; }
    inline const RoundTripOArtTextStyles12Atom* data() const { return this; }
};
class SlideNameAtom {
public:
    const char* _data;
    quint32 _size;
    SlideNameAtom() :_data(0), _size(0) {}
    explicit SlideNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> slideName;
    inline operator const void * () const { return _data; }
    inline const SlideNameAtom* operator->() const { return this; }
    inline const SlideNameAtom& operator*() const { return *this; }
    inline const SlideNameAtom* data() const { return this; }
};
class SlideProgTagsContainer {
public:
    const char* _data;
    quint32 _size;
    SlideProgTagsContainer() :_data(0), _size(0) {}
    explicit SlideProgTagsContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<SlideProgTagsSubContainerOrAtom> rgTypeRec;
    inline operator const void * () const { return _data; }
    inline const SlideProgTagsContainer* operator->() const { return this; }
    inline const SlideProgTagsContainer& operator*() const { return *this; }
    inline const SlideProgTagsContainer* data() const { return this; }
};
class PP9SlideBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP9SlideBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP9SlideBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    MSOArray<TextMasterStyle9Atom> rgTextMasterStyleAtom;
    inline operator const void * () const { return _data; }
    inline const PP9SlideBinaryTagExtension* operator->() const { return this; }
    inline const PP9SlideBinaryTagExtension& operator*() const { return *this; }
    inline const PP9SlideBinaryTagExtension* data() const { return this; }
};
class Comment10Container {
public:
    const char* _data;
    quint32 _size;
    Comment10Container() :_data(0), _size(0) {}
    explicit Comment10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const Comment10Container* operator->() const { return this; }
    inline const Comment10Container& operator*() const { return *this; }
    inline const Comment10Container* data() const { return this; }
};
class Comment10Atom {
public:
    const char* _data;
    quint32 _size;
    Comment10Atom() :_data(0), _size(0) {}
    explicit Comment10Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const Comment10Atom* operator->() const { return this; }
    inline const Comment10Atom& operator*() const { return *this; }
    inline const Comment10Atom* data() const { return this; }
};
class LinkedSlide10Atom {
public:
    const char* _data;
    static const quint32 _size;
    LinkedSlide10Atom() :_data(0) {}
    LinkedSlide10Atom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 linkedSlideIdRef;
    qint32 clinkedShapes;
    inline operator const void * () const { return _data; }
    inline const LinkedSlide10Atom* operator->() const { return this; }
    inline const LinkedSlide10Atom& operator*() const { return *this; }
    inline const LinkedSlide10Atom* data() const { return this; }
};
class LinkedShape10Atom {
public:
    const char* _data;
    static const quint32 _size;
    LinkedShape10Atom() :_data(0) {}
    LinkedShape10Atom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 shapeIdRef;
    quint32 linkedShapeIdRef;
    inline operator const void * () const { return _data; }
    inline const LinkedShape10Atom* operator->() const { return this; }
    inline const LinkedShape10Atom& operator*() const { return *this; }
    inline const LinkedShape10Atom* data() const { return this; }
};
class SlideFlags10Atom {
public:
    const char* _data;
    static const quint32 _size;
    SlideFlags10Atom() :_data(0) {}
    SlideFlags10Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    bool fPreserveMaster;
    bool fOverrideMasterAnimatino;
    quint16 unuseda;
    quint16 unusedb;
    inline operator const void * () const { return _data; }
    inline const SlideFlags10Atom* operator->() const { return this; }
    inline const SlideFlags10Atom& operator*() const { return *this; }
    inline const SlideFlags10Atom* data() const { return this; }
};
class HashCode10Atom {
public:
    const char* _data;
    static const quint32 _size;
    HashCode10Atom() :_data(0) {}
    HashCode10Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint32 hash;
    inline operator const void * () const { return _data; }
    inline const HashCode10Atom* operator->() const { return this; }
    inline const HashCode10Atom& operator*() const { return *this; }
    inline const HashCode10Atom* data() const { return this; }
};
class ExtTimeNodeContainer {
public:
    const char* _data;
    quint32 _size;
    ExtTimeNodeContainer() :_data(0), _size(0) {}
    explicit ExtTimeNodeContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExtTimeNodeContainer* operator->() const { return this; }
    inline const ExtTimeNodeContainer& operator*() const { return *this; }
    inline const ExtTimeNodeContainer* data() const { return this; }
};
class BuildListContainer {
public:
    const char* _data;
    quint32 _size;
    BuildListContainer() :_data(0), _size(0) {}
    explicit BuildListContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const BuildListContainer* operator->() const { return this; }
    inline const BuildListContainer& operator*() const { return *this; }
    inline const BuildListContainer* data() const { return this; }
};
class RoundTripHeaderFooterDefaults12Atom {
public:
    const char* _data;
    static const quint32 _size;
    RoundTripHeaderFooterDefaults12Atom() :_data(0) {}
    RoundTripHeaderFooterDefaults12Atom(const char* data, quint32/*ignored*/ = 0);// 9 bytes
    RecordHeader rh;
    bool fIncludeDate;
    bool fIncludeFooter;
    bool fIncludeHeader;
    bool fIncludeSlideNumber;
    quint8 reserved;
    inline operator const void * () const { return _data; }
    inline const RoundTripHeaderFooterDefaults12Atom* operator->() const { return this; }
    inline const RoundTripHeaderFooterDefaults12Atom& operator*() const { return *this; }
    inline const RoundTripHeaderFooterDefaults12Atom* data() const { return this; }
};
class TagNameAtom {
public:
    const char* _data;
    quint32 _size;
    TagNameAtom() :_data(0), _size(0) {}
    explicit TagNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> tagName;
    inline operator const void * () const { return _data; }
    inline const TagNameAtom* operator->() const { return this; }
    inline const TagNameAtom& operator*() const { return *this; }
    inline const TagNameAtom* data() const { return this; }
};
class TagValueAtom {
public:
    const char* _data;
    quint32 _size;
    TagValueAtom() :_data(0), _size(0) {}
    explicit TagValueAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> tagValue;
    inline operator const void * () const { return _data; }
    inline const TagValueAtom* operator->() const { return this; }
    inline const TagValueAtom& operator*() const { return *this; }
    inline const TagValueAtom* data() const { return this; }
};
class RoundTripMainMasterRecord {
public:
    const char* _data;
    quint32 _size;
    RoundTripMainMasterRecord() :_data(0), _size(0) {}
    explicit RoundTripMainMasterRecord(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RoundTripMainMasterRecord* operator->() const { return this; }
    inline const RoundTripMainMasterRecord& operator*() const { return *this; }
    inline const RoundTripMainMasterRecord* data() const { return this; }
};
class TemplateNameAtom {
public:
    const char* _data;
    quint32 _size;
    TemplateNameAtom() :_data(0), _size(0) {}
    explicit TemplateNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> templateName;
    inline operator const void * () const { return _data; }
    inline const TemplateNameAtom* operator->() const { return this; }
    inline const TemplateNameAtom& operator*() const { return *this; }
    inline const TemplateNameAtom* data() const { return this; }
};
class RoundTripSlideSyncInfo12Container {
public:
    const char* _data;
    quint32 _size;
    RoundTripSlideSyncInfo12Container() :_data(0), _size(0) {}
    explicit RoundTripSlideSyncInfo12Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RoundTripSlideSyncInfo12Container* operator->() const { return this; }
    inline const RoundTripSlideSyncInfo12Container& operator*() const { return *this; }
    inline const RoundTripSlideSyncInfo12Container* data() const { return this; }
};
class SlideFlags {
public:
    const char* _data;
    static const quint32 _size;
    SlideFlags() :_data(0) {}
    SlideFlags(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool fMasterObjects;
    bool fMasterScheme;
    bool fMasterBackground;
    quint8 unused1;
    quint8 unused2;
    inline operator const void * () const { return _data; }
    inline const SlideFlags* operator->() const { return this; }
    inline const SlideFlags& operator*() const { return *this; }
    inline const SlideFlags* data() const { return this; }
};
class NotesRoundTripAtom {
public:
    const char* _data;
    quint32 _size;
    NotesRoundTripAtom() :_data(0), _size(0) {}
    explicit NotesRoundTripAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const NotesRoundTripAtom* operator->() const { return this; }
    inline const NotesRoundTripAtom& operator*() const { return *this; }
    inline const NotesRoundTripAtom* data() const { return this; }
};
class HandoutContainer {
public:
    const char* _data;
    quint32 _size;
    HandoutContainer() :_data(0), _size(0) {}
    explicit HandoutContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const HandoutContainer* operator->() const { return this; }
    inline const HandoutContainer& operator*() const { return *this; }
    inline const HandoutContainer* data() const { return this; }
};
class ExControlStg {
public:
    const char* _data;
    quint32 _size;
    ExControlStg() :_data(0), _size(0) {}
    explicit ExControlStg(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExControlStg* operator->() const { return this; }
    inline const ExControlStg& operator*() const { return *this; }
    inline const ExControlStg* data() const { return this; }
};
class ExOleObjStg {
public:
    const char* _data;
    quint32 _size;
    ExOleObjStg() :_data(0), _size(0) {}
    explicit ExOleObjStg(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExOleObjStg* operator->() const { return this; }
    inline const ExOleObjStg& operator*() const { return *this; }
    inline const ExOleObjStg* data() const { return this; }
};
class UserEditAtom {
public:
    const char* _data;
    quint32 _size;
    UserEditAtom() :_data(0), _size(0) {}
    explicit UserEditAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint32 lastSlideIdRef;
    quint16 version;
    quint8 minorVersion;
    quint8 majorVersion;
    quint32 offsetLastEdit;
    quint32 offsetPersistDirectory;
    quint32 docPersistIdRef;
    quint32 persistIdSeed;
    quint16 lastView;
    quint16 unused;
    quint32 encryptSessionPersistIdRef;
    MSOArray<ZeroByte> zeroPadding;
    bool _has_encryptSessionPersistIdRef;
    inline operator const void * () const { return _data; }
    inline const UserEditAtom* operator->() const { return this; }
    inline const UserEditAtom& operator*() const { return *this; }
    inline const UserEditAtom* data() const { return this; }
};
class VbaProjectStg {
public:
    const char* _data;
    quint32 _size;
    VbaProjectStg() :_data(0), _size(0) {}
    explicit VbaProjectStg(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const VbaProjectStg* operator->() const { return this; }
    inline const VbaProjectStg& operator*() const { return *this; }
    inline const VbaProjectStg* data() const { return this; }
};
class SlideAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlideAtom() :_data(0) {}
    SlideAtom(const char* data, quint32/*ignored*/ = 0);// 32 bytes
    RecordHeader rh;
    quint32 geom;
    MSOCastArray<char> rgPlaceholderTypes;
    quint32 masterIdRef;
    quint32 notesIdRef;
    SlideFlags slideFlags;
    quint16 unused;
    inline operator const void * () const { return _data; }
    inline const SlideAtom* operator->() const { return this; }
    inline const SlideAtom& operator*() const { return *this; }
    inline const SlideAtom* data() const { return this; }
};
class SlideShowSlideInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlideShowSlideInfoAtom() :_data(0) {}
    SlideShowSlideInfoAtom(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    RecordHeader rh;
    quint32 slidetime;
    quint32 slideIdRef;
    quint8 effectDirection;
    quint8 effectType;
    bool fManualAdvance;
    bool reserved;
    bool fHidden;
    bool reserved2;
    bool fSound;
    bool reserved3;
    bool fLoopSound;
    bool reserved4;
    bool fStopSound;
    bool freserved5;
    bool fAutoAdvance;
    bool reserved6;
    bool fCursorVisible;
    quint8 reserved7;
    quint8 speed;
    MSOCastArray<char> unused;
    inline operator const void * () const { return _data; }
    inline const SlideShowSlideInfoAtom* operator->() const { return this; }
    inline const SlideShowSlideInfoAtom& operator*() const { return *this; }
    inline const SlideShowSlideInfoAtom* data() const { return this; }
};
class SlideShowDocInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlideShowDocInfoAtom() :_data(0) {}
    SlideShowDocInfoAtom(const char* data, quint32/*ignored*/ = 0);// 88 bytes
    RecordHeader rh;
    ColorIndexStruct penColor;
    qint32 restartTime;
    qint16 startSlide;
    qint16 endSlide;
    MSOCastArray<char> namedShow;
    bool fAutoAdvance;
    bool fWillSkipBuilds;
    bool fUseSlideRange;
    bool fDocUseNamedShow;
    bool fShowBrowseMode;
    bool fKioskMode;
    bool fWillSkipNarration;
    bool fLoopContinuously;
    bool fHideScrollBar;
    quint8 reserved;
    quint16 unused;
    inline operator const void * () const { return _data; }
    inline const SlideShowDocInfoAtom* operator->() const { return this; }
    inline const SlideShowDocInfoAtom& operator*() const { return *this; }
    inline const SlideShowDocInfoAtom* data() const { return this; }
};
class SlideSchemeColorSchemeAtom {
public:
    const char* _data;
    quint32 _size;
    SlideSchemeColorSchemeAtom() :_data(0), _size(0) {}
    explicit SlideSchemeColorSchemeAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOArray<ColorStruct> rgSchemeColor;
    inline operator const void * () const { return _data; }
    inline const SlideSchemeColorSchemeAtom* operator->() const { return this; }
    inline const SlideSchemeColorSchemeAtom& operator*() const { return *this; }
    inline const SlideSchemeColorSchemeAtom* data() const { return this; }
};
class RoundTripSlideRecord {
public:
    const char* _data;
    quint32 _size;
    RoundTripSlideRecord() :_data(0), _size(0) {}
    explicit RoundTripSlideRecord(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RoundTripSlideRecord* operator->() const { return this; }
    inline const RoundTripSlideRecord& operator*() const { return *this; }
    inline const RoundTripSlideRecord* data() const { return this; }
};
class NamedShowsContainer {
public:
    const char* _data;
    quint32 _size;
    NamedShowsContainer() :_data(0), _size(0) {}
    explicit NamedShowsContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const NamedShowsContainer* operator->() const { return this; }
    inline const NamedShowsContainer& operator*() const { return *this; }
    inline const NamedShowsContainer* data() const { return this; }
};
class SummaryContainer {
public:
    const char* _data;
    quint32 _size;
    SummaryContainer() :_data(0), _size(0) {}
    explicit SummaryContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const SummaryContainer* operator->() const { return this; }
    inline const SummaryContainer& operator*() const { return *this; }
    inline const SummaryContainer* data() const { return this; }
};
class DocRoutingSlipAtom {
public:
    const char* _data;
    quint32 _size;
    DocRoutingSlipAtom() :_data(0), _size(0) {}
    explicit DocRoutingSlipAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const DocRoutingSlipAtom* operator->() const { return this; }
    inline const DocRoutingSlipAtom& operator*() const { return *this; }
    inline const DocRoutingSlipAtom* data() const { return this; }
};
class PrintOptionsAtom {
public:
    const char* _data;
    quint32 _size;
    PrintOptionsAtom() :_data(0), _size(0) {}
    explicit PrintOptionsAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const PrintOptionsAtom* operator->() const { return this; }
    inline const PrintOptionsAtom& operator*() const { return *this; }
    inline const PrintOptionsAtom* data() const { return this; }
};
class RoundTripCustomTableStyles12Atom {
public:
    const char* _data;
    quint32 _size;
    RoundTripCustomTableStyles12Atom() :_data(0), _size(0) {}
    explicit RoundTripCustomTableStyles12Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RoundTripCustomTableStyles12Atom* operator->() const { return this; }
    inline const RoundTripCustomTableStyles12Atom& operator*() const { return *this; }
    inline const RoundTripCustomTableStyles12Atom* data() const { return this; }
};
class RoundTripCompositeMasterId12Atom {
public:
    const char* _data;
    static const quint32 _size;
    RoundTripCompositeMasterId12Atom() :_data(0) {}
    RoundTripCompositeMasterId12Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    quint32 compositeMasterId;
    inline operator const void * () const { return _data; }
    inline const RoundTripCompositeMasterId12Atom* operator->() const { return this; }
    inline const RoundTripCompositeMasterId12Atom& operator*() const { return *this; }
    inline const RoundTripCompositeMasterId12Atom* data() const { return this; }
};
class ColorStruct {
public:
    const char* _data;
    static const quint32 _size;
    ColorStruct() :_data(0) {}
    ColorStruct(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 unused;
    inline operator const void * () const { return _data; }
    inline const ColorStruct* operator->() const { return this; }
    inline const ColorStruct& operator*() const { return *this; }
    inline const ColorStruct* data() const { return this; }
};
class ExObjListAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExObjListAtom() :_data(0) {}
    ExObjListAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    RecordHeader rh;
    qint32 exObjIdSeed;
    inline operator const void * () const { return _data; }
    inline const ExObjListAtom* operator->() const { return this; }
    inline const ExObjListAtom& operator*() const { return *this; }
    inline const ExObjListAtom* data() const { return this; }
};
class ExAviMovieContainer {
public:
    const char* _data;
    quint32 _size;
    ExAviMovieContainer() :_data(0), _size(0) {}
    explicit ExAviMovieContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExAviMovieContainer* operator->() const { return this; }
    inline const ExAviMovieContainer& operator*() const { return *this; }
    inline const ExAviMovieContainer* data() const { return this; }
};
class ExCDAudioContainer {
public:
    const char* _data;
    quint32 _size;
    ExCDAudioContainer() :_data(0), _size(0) {}
    explicit ExCDAudioContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExCDAudioContainer* operator->() const { return this; }
    inline const ExCDAudioContainer& operator*() const { return *this; }
    inline const ExCDAudioContainer* data() const { return this; }
};
class ExControlAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExControlAtom() :_data(0) {}
    ExControlAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 slideIdRef;
    inline operator const void * () const { return _data; }
    inline const ExControlAtom* operator->() const { return this; }
    inline const ExControlAtom& operator*() const { return *this; }
    inline const ExControlAtom* data() const { return this; }
};
class ExHyperlinkAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExHyperlinkAtom() :_data(0) {}
    ExHyperlinkAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 exHyperLinkId;
    inline operator const void * () const { return _data; }
    inline const ExHyperlinkAtom* operator->() const { return this; }
    inline const ExHyperlinkAtom& operator*() const { return *this; }
    inline const ExHyperlinkAtom* data() const { return this; }
};
class FriendlyNameAtom {
public:
    const char* _data;
    quint32 _size;
    FriendlyNameAtom() :_data(0), _size(0) {}
    explicit FriendlyNameAtom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> friendlyName;
    inline operator const void * () const { return _data; }
    inline const FriendlyNameAtom* operator->() const { return this; }
    inline const FriendlyNameAtom& operator*() const { return *this; }
    inline const FriendlyNameAtom* data() const { return this; }
};
class TargetAtom {
public:
    const char* _data;
    quint32 _size;
    TargetAtom() :_data(0), _size(0) {}
    explicit TargetAtom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> target;
    inline operator const void * () const { return _data; }
    inline const TargetAtom* operator->() const { return this; }
    inline const TargetAtom& operator*() const { return *this; }
    inline const TargetAtom* data() const { return this; }
};
class LocationAtom {
public:
    const char* _data;
    quint32 _size;
    LocationAtom() :_data(0), _size(0) {}
    explicit LocationAtom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> location;
    inline operator const void * () const { return _data; }
    inline const LocationAtom* operator->() const { return this; }
    inline const LocationAtom& operator*() const { return *this; }
    inline const LocationAtom* data() const { return this; }
};
class ExMCIMovieContainer {
public:
    const char* _data;
    quint32 _size;
    ExMCIMovieContainer() :_data(0), _size(0) {}
    explicit ExMCIMovieContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExMCIMovieContainer* operator->() const { return this; }
    inline const ExMCIMovieContainer& operator*() const { return *this; }
    inline const ExMCIMovieContainer* data() const { return this; }
};
class ExMIDIAudioContainer {
public:
    const char* _data;
    quint32 _size;
    ExMIDIAudioContainer() :_data(0), _size(0) {}
    explicit ExMIDIAudioContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExMIDIAudioContainer* operator->() const { return this; }
    inline const ExMIDIAudioContainer& operator*() const { return *this; }
    inline const ExMIDIAudioContainer* data() const { return this; }
};
class ExWAVAudioEmbeddedContainer {
public:
    const char* _data;
    quint32 _size;
    ExWAVAudioEmbeddedContainer() :_data(0), _size(0) {}
    explicit ExWAVAudioEmbeddedContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExWAVAudioEmbeddedContainer* operator->() const { return this; }
    inline const ExWAVAudioEmbeddedContainer& operator*() const { return *this; }
    inline const ExWAVAudioEmbeddedContainer* data() const { return this; }
};
class ExWAVAudioLinkContainer {
public:
    const char* _data;
    quint32 _size;
    ExWAVAudioLinkContainer() :_data(0), _size(0) {}
    explicit ExWAVAudioLinkContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ExWAVAudioLinkContainer* operator->() const { return this; }
    inline const ExWAVAudioLinkContainer& operator*() const { return *this; }
    inline const ExWAVAudioLinkContainer* data() const { return this; }
};
class UnknownExObjListSubContainerChild {
public:
    const char* _data;
    quint32 _size;
    UnknownExObjListSubContainerChild() :_data(0), _size(0) {}
    explicit UnknownExObjListSubContainerChild(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const UnknownExObjListSubContainerChild* operator->() const { return this; }
    inline const UnknownExObjListSubContainerChild& operator*() const { return *this; }
    inline const UnknownExObjListSubContainerChild* data() const { return this; }
};
class ExOleLinkAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExOleLinkAtom() :_data(0) {}
    ExOleLinkAtom(const char* data, quint32/*ignored*/ = 0);// 20 bytes
    RecordHeader rh;
    quint32 slideIdRef;
    quint32 oleUpdateMode;
    quint32 unused;
    inline operator const void * () const { return _data; }
    inline const ExOleLinkAtom* operator->() const { return this; }
    inline const ExOleLinkAtom& operator*() const { return *this; }
    inline const ExOleLinkAtom* data() const { return this; }
};
class ExOleObjAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExOleObjAtom() :_data(0) {}
    ExOleObjAtom(const char* data, quint32/*ignored*/ = 0);// 32 bytes
    RecordHeader rh;
    quint32 drawAspect;
    quint32 type;
    quint32 exObjId;
    quint32 subType;
    quint32 persistIdRef;
    quint32 unused;
    inline operator const void * () const { return _data; }
    inline const ExOleObjAtom* operator->() const { return this; }
    inline const ExOleObjAtom& operator*() const { return *this; }
    inline const ExOleObjAtom* data() const { return this; }
};
class MenuNameAtom {
public:
    const char* _data;
    quint32 _size;
    MenuNameAtom() :_data(0), _size(0) {}
    explicit MenuNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> menuName;
    inline operator const void * () const { return _data; }
    inline const MenuNameAtom* operator->() const { return this; }
    inline const MenuNameAtom& operator*() const { return *this; }
    inline const MenuNameAtom* data() const { return this; }
};
class ProgIDAtom {
public:
    const char* _data;
    quint32 _size;
    ProgIDAtom() :_data(0), _size(0) {}
    explicit ProgIDAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> progId;
    inline operator const void * () const { return _data; }
    inline const ProgIDAtom* operator->() const { return this; }
    inline const ProgIDAtom& operator*() const { return *this; }
    inline const ProgIDAtom* data() const { return this; }
};
class ClipboardNameAtom {
public:
    const char* _data;
    quint32 _size;
    ClipboardNameAtom() :_data(0), _size(0) {}
    explicit ClipboardNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> clipboardName;
    inline operator const void * () const { return _data; }
    inline const ClipboardNameAtom* operator->() const { return this; }
    inline const ClipboardNameAtom& operator*() const { return *this; }
    inline const ClipboardNameAtom* data() const { return this; }
};
class MetafileBlob {
public:
    const char* _data;
    quint32 _size;
    MetafileBlob() :_data(0), _size(0) {}
    explicit MetafileBlob(const char* data, const quint32 maxsize);
    RecordHeader rh;
    qint16 mm;
    qint16 xExt;
    qint16 yExt;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const MetafileBlob* operator->() const { return this; }
    inline const MetafileBlob& operator*() const { return *this; }
};
class OfficeArtFDGG {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFDGG() :_data(0) {}
    OfficeArtFDGG(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    quint32 spidMax;
    quint32 cidcl;
    quint32 cspSaved;
    quint32 cdgSaved;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFDGG* operator->() const { return this; }
    inline const OfficeArtFDGG& operator*() const { return *this; }
    inline const OfficeArtFDGG* data() const { return this; }
};
class OfficeArtFDG {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFDG() :_data(0) {}
    OfficeArtFDG(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    OfficeArtRecordHeader rh;
    quint32 csp;
    quint32 spidCur;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFDG* operator->() const { return this; }
    inline const OfficeArtFDG& operator*() const { return *this; }
    inline const OfficeArtFDG* data() const { return this; }
};
class OfficeArtFRITContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtFRITContainer() :_data(0), _size(0) {}
    explicit OfficeArtFRITContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtFRIT> rgfrit;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFRITContainer* operator->() const { return this; }
    inline const OfficeArtFRITContainer& operator*() const { return *this; }
    inline const OfficeArtFRITContainer* data() const { return this; }
};
class OfficeArtFRIT {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFRIT() :_data(0) {}
    OfficeArtFRIT(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint16 fridNew;
    quint16 fridOld;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFRIT* operator->() const { return this; }
    inline const OfficeArtFRIT& operator*() const { return *this; }
    inline const OfficeArtFRIT* data() const { return this; }
};
class OfficeArtBStoreContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBStoreContainer() :_data(0), _size(0) {}
    explicit OfficeArtBStoreContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtBStoreContainerFileBlock> rgfb;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBStoreContainer* operator->() const { return this; }
    inline const OfficeArtBStoreContainer& operator*() const { return *this; }
    inline const OfficeArtBStoreContainer* data() const { return this; }
};
class OfficeArtSpgrContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSpgrContainer() :_data(0), _size(0) {}
    explicit OfficeArtSpgrContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtSpgrContainerFileBlock> rgfb;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSpgrContainer* operator->() const { return this; }
    inline const OfficeArtSpgrContainer& operator*() const { return *this; }
    inline const OfficeArtSpgrContainer* data() const { return this; }
};
class OfficeArtSolverContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSolverContainer() :_data(0), _size(0) {}
    explicit OfficeArtSolverContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtSolverContainerFileBlock> rgfb;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSolverContainer* operator->() const { return this; }
    inline const OfficeArtSolverContainer& operator*() const { return *this; }
    inline const OfficeArtSolverContainer* data() const { return this; }
};
class OfficeArtFConnectorRule {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFConnectorRule() :_data(0) {}
    OfficeArtFConnectorRule(const char* data, quint32/*ignored*/ = 0);// 32 bytes
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spidA;
    quint32 spidB;
    quint32 spidC;
    quint32 cptiA;
    quint32 cptiB;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFConnectorRule* operator->() const { return this; }
    inline const OfficeArtFConnectorRule& operator*() const { return *this; }
    inline const OfficeArtFConnectorRule* data() const { return this; }
};
class OfficeArtFArcRule {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFArcRule() :_data(0) {}
    OfficeArtFArcRule(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spid;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFArcRule* operator->() const { return this; }
    inline const OfficeArtFArcRule& operator*() const { return *this; }
    inline const OfficeArtFArcRule* data() const { return this; }
};
class OfficeArtFCalloutRule {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFCalloutRule() :_data(0) {}
    OfficeArtFCalloutRule(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    OfficeArtRecordHeader rh;
    quint32 ruid;
    quint32 spid;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFCalloutRule* operator->() const { return this; }
    inline const OfficeArtFCalloutRule& operator*() const { return *this; }
    inline const OfficeArtFCalloutRule* data() const { return this; }
};
class OfficeArtFSPGR {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFSPGR() :_data(0) {}
    OfficeArtFSPGR(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    OfficeArtRecordHeader rh;
    qint32 xLeft;
    qint32 yTop;
    qint32 xRight;
    qint32 yBottom;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFSPGR* operator->() const { return this; }
    inline const OfficeArtFSPGR& operator*() const { return *this; }
    inline const OfficeArtFSPGR* data() const { return this; }
};
class OfficeArtFSP {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFSP() :_data(0) {}
    OfficeArtFSP(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    OfficeArtRecordHeader rh;
    quint32 spid;
    bool fGroup;
    bool fChild;
    bool fPatriarch;
    bool fDeleted;
    bool fOleShape;
    bool fHaveMaster;
    bool fFlipH;
    bool fFlipV;
    bool fConnector;
    bool fHaveAnchor;
    bool fBackground;
    bool fHaveSpt;
    quint32 unused1;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFSP* operator->() const { return this; }
    inline const OfficeArtFSP& operator*() const { return *this; }
    inline const OfficeArtFSP* data() const { return this; }
};
class OfficeArtFOPT {
public:
    const char* _data;
    quint32 _size;
    OfficeArtFOPT() :_data(0), _size(0) {}
    explicit OfficeArtFOPT(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtFOPTEChoice> fopt;
    MSOCastArray<char> complexData;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFOPT* operator->() const { return this; }
    inline const OfficeArtFOPT& operator*() const { return *this; }
    inline const OfficeArtFOPT* data() const { return this; }
};
class OfficeArtSecondaryFOPT {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSecondaryFOPT() :_data(0), _size(0) {}
    explicit OfficeArtSecondaryFOPT(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtFOPTEChoice> fopt;
    MSOCastArray<char> complexData;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSecondaryFOPT* operator->() const { return this; }
    inline const OfficeArtSecondaryFOPT& operator*() const { return *this; }
    inline const OfficeArtSecondaryFOPT* data() const { return this; }
};
class OfficeArtTertiaryFOPT {
public:
    const char* _data;
    quint32 _size;
    OfficeArtTertiaryFOPT() :_data(0), _size(0) {}
    explicit OfficeArtTertiaryFOPT(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<OfficeArtFOPTEChoice> fopt;
    MSOCastArray<char> complexData;
    inline operator const void * () const { return _data; }
    inline const OfficeArtTertiaryFOPT* operator->() const { return this; }
    inline const OfficeArtTertiaryFOPT& operator*() const { return *this; }
    inline const OfficeArtTertiaryFOPT* data() const { return this; }
};
class MSOPATHINFO {
public:
    const char* _data;
    static const quint32 _size;
    MSOPATHINFO() :_data(0) {}
    MSOPATHINFO(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    quint8 type;
    quint16 segments;
    inline operator const void * () const { return _data; }
    inline const MSOPATHINFO* operator->() const { return this; }
    inline const MSOPATHINFO& operator*() const { return *this; }
    inline const MSOPATHINFO* data() const { return this; }
};
class FixedPoint {
public:
    const char* _data;
    static const quint32 _size;
    FixedPoint() :_data(0) {}
    FixedPoint(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint16 fractional;
    qint16 integral;
    inline operator const void * () const { return _data; }
    inline const FixedPoint* operator->() const { return this; }
    inline const FixedPoint& operator*() const { return *this; }
    inline const FixedPoint* data() const { return this; }
};
class PVertices_complex {
public:
    const char* _data;
    quint32 _size;
    PVertices_complex() :_data(0), _size(0) {}
    explicit PVertices_complex(const char* data, const quint32 maxsize);
    quint16 nElems;
    quint16 nElemsAlloc;
    quint16 cbElem;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const PVertices_complex* operator->() const { return this; }
    inline const PVertices_complex& operator*() const { return *this; }
};
class PSegmentInfo_complex {
public:
    const char* _data;
    quint32 _size;
    PSegmentInfo_complex() :_data(0), _size(0) {}
    explicit PSegmentInfo_complex(const char* data, const quint32 maxsize);
    quint16 nElems;
    quint16 nElemsAlloc;
    quint16 cbElem;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const PSegmentInfo_complex* operator->() const { return this; }
    inline const PSegmentInfo_complex& operator*() const { return *this; }
};
class FillShadeColors_complex {
public:
    const char* _data;
    quint32 _size;
    FillShadeColors_complex() :_data(0), _size(0) {}
    explicit FillShadeColors_complex(const char* data, const quint32 maxsize);
    quint16 nElems;
    quint16 nElemsAlloc;
    quint16 cbElem;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const FillShadeColors_complex* operator->() const { return this; }
    inline const FillShadeColors_complex& operator*() const { return *this; }
};
class PWrapPolygonVertices_complex {
public:
    const char* _data;
    quint32 _size;
    PWrapPolygonVertices_complex() :_data(0), _size(0) {}
    explicit PWrapPolygonVertices_complex(const char* data, const quint32 maxsize);
    quint16 nElems;
    quint16 nElemsAlloc;
    quint16 cbElem;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const PWrapPolygonVertices_complex* operator->() const { return this; }
    inline const PWrapPolygonVertices_complex& operator*() const { return *this; }
};
class OfficeArtCOLORREF {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtCOLORREF() :_data(0) {}
    OfficeArtCOLORREF(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint8 red;
    quint8 green;
    quint8 blue;
    bool fPaletteIndex;
    bool fPaletteRGB;
    bool fSystemRGB;
    bool fSchemeIndex;
    bool fSysIndex;
    bool unused1;
    bool unused2;
    bool unused3;
    inline operator const void * () const { return _data; }
    inline const OfficeArtCOLORREF* operator->() const { return this; }
    inline const OfficeArtCOLORREF& operator*() const { return *this; }
    inline const OfficeArtCOLORREF* data() const { return this; }
};
class OfficeArtChildAnchor {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtChildAnchor() :_data(0) {}
    OfficeArtChildAnchor(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    OfficeArtRecordHeader rh;
    qint32 xLeft;
    qint32 yTop;
    qint32 xRight;
    qint32 yBottom;
    inline operator const void * () const { return _data; }
    inline const OfficeArtChildAnchor* operator->() const { return this; }
    inline const OfficeArtChildAnchor& operator*() const { return *this; }
    inline const OfficeArtChildAnchor* data() const { return this; }
};
class DocOfficeArtClientAnchor {
public:
    const char* _data;
    static const quint32 _size;
    DocOfficeArtClientAnchor() :_data(0) {}
    DocOfficeArtClientAnchor(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    qint32 clientAnchor;
    inline operator const void * () const { return _data; }
    inline const DocOfficeArtClientAnchor* operator->() const { return this; }
    inline const DocOfficeArtClientAnchor& operator*() const { return *this; }
    inline const DocOfficeArtClientAnchor* data() const { return this; }
};
class XlsOfficeArtClientAnchor {
public:
    const char* _data;
    quint32 _size;
    XlsOfficeArtClientAnchor() :_data(0), _size(0) {}
    explicit XlsOfficeArtClientAnchor(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    bool fMove;
    bool fSize;
    quint16 unused;
    qint32 width;
    qint32 height;
    quint16 colL;
    qint16 dxL;
    quint16 rwT;
    qint16 dyT;
    quint16 colR;
    qint16 dxR;
    quint16 rwB;
    qint16 dyB;
    bool _has_width;
    bool _has_height;
    bool _has_colL;
    bool _has_dxL;
    bool _has_rwT;
    bool _has_dyT;
    bool _has_colR;
    bool _has_dxR;
    bool _has_rwB;
    bool _has_dyB;
    inline operator const void * () const { return _data; }
    inline const XlsOfficeArtClientAnchor* operator->() const { return this; }
    inline const XlsOfficeArtClientAnchor& operator*() const { return *this; }
    inline const XlsOfficeArtClientAnchor* data() const { return this; }
};
class OfficeArtFPSPL {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFPSPL() :_data(0) {}
    OfficeArtFPSPL(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 spid;
    bool reserved1;
    bool fLast;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFPSPL* operator->() const { return this; }
    inline const OfficeArtFPSPL& operator*() const { return *this; }
    inline const OfficeArtFPSPL* data() const { return this; }
};
class RectStruct {
public:
    const char* _data;
    static const quint32 _size;
    RectStruct() :_data(0) {}
    RectStruct(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    qint32 top;
    qint32 left;
    qint32 right;
    qint32 bottom;
    inline operator const void * () const { return _data; }
    inline const RectStruct* operator->() const { return this; }
    inline const RectStruct& operator*() const { return *this; }
    inline const RectStruct* data() const { return this; }
};
class SmallRectStruct {
public:
    const char* _data;
    static const quint32 _size;
    SmallRectStruct() :_data(0) {}
    SmallRectStruct(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    qint16 top;
    qint16 left;
    qint16 right;
    qint16 bottom;
    inline operator const void * () const { return _data; }
    inline const SmallRectStruct* operator->() const { return this; }
    inline const SmallRectStruct& operator*() const { return *this; }
    inline const SmallRectStruct* data() const { return this; }
};
class DocOfficeArtClientData {
public:
    const char* _data;
    static const quint32 _size;
    DocOfficeArtClientData() :_data(0) {}
    DocOfficeArtClientData(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 clientData;
    inline operator const void * () const { return _data; }
    inline const DocOfficeArtClientData* operator->() const { return this; }
    inline const DocOfficeArtClientData& operator*() const { return *this; }
    inline const DocOfficeArtClientData* data() const { return this; }
};
class XlsOfficeArtClientData {
public:
    const char* _data;
    static const quint32 _size;
    XlsOfficeArtClientData() :_data(0) {}
    XlsOfficeArtClientData(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    OfficeArtRecordHeader rh;
    inline operator const void * () const { return _data; }
    inline const XlsOfficeArtClientData* operator->() const { return this; }
    inline const XlsOfficeArtClientData& operator*() const { return *this; }
    inline const XlsOfficeArtClientData* data() const { return this; }
};
class ShapeFlagsAtom {
public:
    const char* _data;
    quint32 _size;
    ShapeFlagsAtom() :_data(0), _size(0) {}
    explicit ShapeFlagsAtom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ShapeFlagsAtom* operator->() const { return this; }
    inline const ShapeFlagsAtom& operator*() const { return *this; }
    inline const ShapeFlagsAtom* data() const { return this; }
};
class ShapeFlags10Atom {
public:
    const char* _data;
    quint32 _size;
    ShapeFlags10Atom() :_data(0), _size(0) {}
    explicit ShapeFlags10Atom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const ShapeFlags10Atom* operator->() const { return this; }
    inline const ShapeFlags10Atom& operator*() const { return *this; }
    inline const ShapeFlags10Atom* data() const { return this; }
};
class ExObjRefAtom {
public:
    const char* _data;
    static const quint32 _size;
    ExObjRefAtom() :_data(0) {}
    ExObjRefAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 exObjIdRef;
    inline operator const void * () const { return _data; }
    inline const ExObjRefAtom* operator->() const { return this; }
    inline const ExObjRefAtom& operator*() const { return *this; }
    inline const ExObjRefAtom* data() const { return this; }
};
class AnimationInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    AnimationInfoAtom() :_data(0) {}
    AnimationInfoAtom(const char* data, quint32/*ignored*/ = 0);// 36 bytes
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const AnimationInfoAtom* operator->() const { return this; }
    inline const AnimationInfoAtom& operator*() const { return *this; }
    inline const AnimationInfoAtom* data() const { return this; }
};
class SoundContainer {
public:
    const char* _data;
    quint32 _size;
    SoundContainer() :_data(0), _size(0) {}
    explicit SoundContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const SoundContainer* operator->() const { return this; }
    inline const SoundContainer& operator*() const { return *this; }
    inline const SoundContainer* data() const { return this; }
};
class InteractiveInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    InteractiveInfoAtom() :_data(0) {}
    InteractiveInfoAtom(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    RecordHeader rh;
    quint32 soundIdRef;
    quint32 exHyperlinkIdRef;
    quint8 action;
    quint8 oleVerb;
    quint8 jump;
    bool fAnimated;
    bool fStopSound;
    bool fCustomSoundReturn;
    bool fVisited;
    quint8 reserved;
    quint8 hyperlinkType;
    MSOCastArray<char> unused;
    inline operator const void * () const { return _data; }
    inline const InteractiveInfoAtom* operator->() const { return this; }
    inline const InteractiveInfoAtom& operator*() const { return *this; }
    inline const InteractiveInfoAtom* data() const { return this; }
};
class MacroNameAtom {
public:
    const char* _data;
    quint32 _size;
    MacroNameAtom() :_data(0), _size(0) {}
    explicit MacroNameAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> macroName;
    inline operator const void * () const { return _data; }
    inline const MacroNameAtom* operator->() const { return this; }
    inline const MacroNameAtom& operator*() const { return *this; }
    inline const MacroNameAtom* data() const { return this; }
};
class PlaceholderAtom {
public:
    const char* _data;
    static const quint32 _size;
    PlaceholderAtom() :_data(0) {}
    PlaceholderAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    OfficeArtRecordHeader rh;
    qint32 position;
    quint8 placementId;
    quint8 size;
    quint16 unused;
    inline operator const void * () const { return _data; }
    inline const PlaceholderAtom* operator->() const { return this; }
    inline const PlaceholderAtom& operator*() const { return *this; }
    inline const PlaceholderAtom* data() const { return this; }
};
class RecolorInfoAtom {
public:
    const char* _data;
    quint32 _size;
    RecolorInfoAtom() :_data(0), _size(0) {}
    explicit RecolorInfoAtom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const RecolorInfoAtom* operator->() const { return this; }
    inline const RecolorInfoAtom& operator*() const { return *this; }
    inline const RecolorInfoAtom* data() const { return this; }
};
class OutlineTextRefAtom {
public:
    const char* _data;
    static const quint32 _size;
    OutlineTextRefAtom() :_data(0) {}
    OutlineTextRefAtom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    qint32 index;
    inline operator const void * () const { return _data; }
    inline const OutlineTextRefAtom* operator->() const { return this; }
    inline const OutlineTextRefAtom& operator*() const { return *this; }
    inline const OutlineTextRefAtom* data() const { return this; }
};
class ShapeProgsTagContainer {
public:
    const char* _data;
    quint32 _size;
    ShapeProgsTagContainer() :_data(0), _size(0) {}
    explicit ShapeProgsTagContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<ShapeProgTagsSubContainerOrAtom> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const ShapeProgsTagContainer* operator->() const { return this; }
    inline const ShapeProgsTagContainer& operator*() const { return *this; }
    inline const ShapeProgsTagContainer* data() const { return this; }
};
class PP9ShapeBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP9ShapeBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP9ShapeBinaryTagExtension(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    StyleTextProp9Atom styleTextProp9Atom;
    inline operator const void * () const { return _data; }
    inline const PP9ShapeBinaryTagExtension* operator->() const { return this; }
    inline const PP9ShapeBinaryTagExtension& operator*() const { return *this; }
    inline const PP9ShapeBinaryTagExtension* data() const { return this; }
};
class PP10ShapeBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP10ShapeBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP10ShapeBinaryTagExtension(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const PP10ShapeBinaryTagExtension* operator->() const { return this; }
    inline const PP10ShapeBinaryTagExtension& operator*() const { return *this; }
    inline const PP10ShapeBinaryTagExtension* data() const { return this; }
};
class PP11ShapeBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP11ShapeBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP11ShapeBinaryTagExtension(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const PP11ShapeBinaryTagExtension* operator->() const { return this; }
    inline const PP11ShapeBinaryTagExtension& operator*() const { return *this; }
    inline const PP11ShapeBinaryTagExtension* data() const { return this; }
};
class RoundTripNewPlaceHolderId12Atom {
public:
    const char* _data;
    static const quint32 _size;
    RoundTripNewPlaceHolderId12Atom() :_data(0) {}
    RoundTripNewPlaceHolderId12Atom(const char* data, quint32/*ignored*/ = 0);// 9 bytes
    OfficeArtRecordHeader rh;
    quint8 newPlaceHolderId;
    inline operator const void * () const { return _data; }
    inline const RoundTripNewPlaceHolderId12Atom* operator->() const { return this; }
    inline const RoundTripNewPlaceHolderId12Atom& operator*() const { return *this; }
    inline const RoundTripNewPlaceHolderId12Atom* data() const { return this; }
};
class RoundTripShapeId12Atom {
public:
    const char* _data;
    static const quint32 _size;
    RoundTripShapeId12Atom() :_data(0) {}
    RoundTripShapeId12Atom(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 shapeId;
    inline operator const void * () const { return _data; }
    inline const RoundTripShapeId12Atom* operator->() const { return this; }
    inline const RoundTripShapeId12Atom& operator*() const { return *this; }
    inline const RoundTripShapeId12Atom* data() const { return this; }
};
class RoundTripHFPlaceholder12Atom {
public:
    const char* _data;
    static const quint32 _size;
    RoundTripHFPlaceholder12Atom() :_data(0) {}
    RoundTripHFPlaceholder12Atom(const char* data, quint32/*ignored*/ = 0);// 9 bytes
    OfficeArtRecordHeader rh;
    quint8 placeHolderId;
    inline operator const void * () const { return _data; }
    inline const RoundTripHFPlaceholder12Atom* operator->() const { return this; }
    inline const RoundTripHFPlaceholder12Atom& operator*() const { return *this; }
    inline const RoundTripHFPlaceholder12Atom* data() const { return this; }
};
class RoundTripShapeCheckSumForCustomLayouts12Atom {
public:
    const char* _data;
    quint32 _size;
    RoundTripShapeCheckSumForCustomLayouts12Atom() :_data(0), _size(0) {}
    explicit RoundTripShapeCheckSumForCustomLayouts12Atom(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    quint32 shapeCheckSum;
    quint32 textCheckSum;
    MSOCastArray<char> unknown;
    inline operator const void * () const { return _data; }
    inline const RoundTripShapeCheckSumForCustomLayouts12Atom* operator->() const { return this; }
    inline const RoundTripShapeCheckSumForCustomLayouts12Atom& operator*() const { return *this; }
    inline const RoundTripShapeCheckSumForCustomLayouts12Atom* data() const { return this; }
};
class XlsOfficeArtClientTextBox {
public:
    const char* _data;
    static const quint32 _size;
    XlsOfficeArtClientTextBox() :_data(0) {}
    XlsOfficeArtClientTextBox(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    OfficeArtRecordHeader rh;
    inline operator const void * () const { return _data; }
    inline const XlsOfficeArtClientTextBox* operator->() const { return this; }
    inline const XlsOfficeArtClientTextBox& operator*() const { return *this; }
    inline const XlsOfficeArtClientTextBox* data() const { return this; }
};
class DocOfficeArtClientTextBox {
public:
    const char* _data;
    static const quint32 _size;
    DocOfficeArtClientTextBox() :_data(0) {}
    DocOfficeArtClientTextBox(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    OfficeArtRecordHeader rh;
    quint32 clientTextBox;
    inline operator const void * () const { return _data; }
    inline const DocOfficeArtClientTextBox* operator->() const { return this; }
    inline const DocOfficeArtClientTextBox& operator*() const { return *this; }
    inline const DocOfficeArtClientTextBox* data() const { return this; }
};
class PptOfficeArtClientTextBox {
public:
    const char* _data;
    quint32 _size;
    PptOfficeArtClientTextBox() :_data(0), _size(0) {}
    explicit PptOfficeArtClientTextBox(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<TextClientDataSubContainerOrAtom> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const PptOfficeArtClientTextBox* operator->() const { return this; }
    inline const PptOfficeArtClientTextBox& operator*() const { return *this; }
    inline const PptOfficeArtClientTextBox* data() const { return this; }
};
class OfficeArtIDCL {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtIDCL() :_data(0) {}
    OfficeArtIDCL(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    quint32 dgid;
    quint32 cspidCur;
    inline operator const void * () const { return _data; }
    inline const OfficeArtIDCL* operator->() const { return this; }
    inline const OfficeArtIDCL& operator*() const { return *this; }
    inline const OfficeArtIDCL* data() const { return this; }
};
class OfficeArtFOPTEOPID {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFOPTEOPID() :_data(0) {}
    OfficeArtFOPTEOPID(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    quint16 opid;
    bool fBid;
    bool fComplex;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFOPTEOPID* operator->() const { return this; }
    inline const OfficeArtFOPTEOPID& operator*() const { return *this; }
    inline const OfficeArtFOPTEOPID* data() const { return this; }
};
class OfficeArtColorMRUContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtColorMRUContainer() :_data(0), _size(0) {}
    explicit OfficeArtColorMRUContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOArray<MSOCR> rgmsocr;
    inline operator const void * () const { return _data; }
    inline const OfficeArtColorMRUContainer* operator->() const { return this; }
    inline const OfficeArtColorMRUContainer& operator*() const { return *this; }
    inline const OfficeArtColorMRUContainer* data() const { return this; }
};
class MSOCR {
public:
    const char* _data;
    static const quint32 _size;
    MSOCR() :_data(0) {}
    MSOCR(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint8 red;
    quint8 green;
    quint8 blue;
    quint8 unused1;
    bool fSchemeIndex;
    quint8 unused2;
    inline operator const void * () const { return _data; }
    inline const MSOCR* operator->() const { return this; }
    inline const MSOCR& operator*() const { return *this; }
    inline const MSOCR* data() const { return this; }
};
class OfficeArtSplitMenuColorContainer {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtSplitMenuColorContainer() :_data(0) {}
    OfficeArtSplitMenuColorContainer(const char* data, quint32/*ignored*/ = 0);// 24 bytes
    OfficeArtRecordHeader rh;
    MSOArray<MSOCR> smca;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSplitMenuColorContainer* operator->() const { return this; }
    inline const OfficeArtSplitMenuColorContainer& operator*() const { return *this; }
    inline const OfficeArtSplitMenuColorContainer* data() const { return this; }
};
class todo {
public:
    const char* _data;
    quint32 _size;
    todo() :_data(0), _size(0) {}
    explicit todo(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> anon;
    inline operator const void * () const { return _data; }
    inline const todo* operator->() const { return this; }
    inline const todo& operator*() const { return *this; }
    inline const todo* data() const { return this; }
};
class FibBase {
public:
    const char* _data;
    static const quint32 _size;
    FibBase() :_data(0) {}
    FibBase(const char* data, quint32/*ignored*/ = 0);// 32 bytes
    quint16 wIdent;
    quint16 nFib;
    quint16 unused;
    quint16 lid;
    quint16 pnNext;
    bool fDot;
    bool fGlsy;
    bool fComplex;
    bool fHasPic;
    quint8 cQuickSaves;
    bool fEncrypted;
    bool fWhichTblStm;
    bool fReadOnlyRecommended;
    bool fWriteReservation;
    bool fExtChar;
    bool fLoadOverride;
    bool fFarEast;
    bool fObfuscated;
    quint16 nFibBack;
    quint32 IKey;
    quint8 envr;
    bool fMac;
    bool fEmptySpecial;
    bool fLoadOverridePage;
    bool reserved1;
    bool reserved2;
    quint8 fSpare0;
    quint16 reserved3;
    quint16 reserved4;
    quint32 reserved5;
    quint32 reserved6;
    inline operator const void * () const { return _data; }
    inline const FibBase* operator->() const { return this; }
    inline const FibBase& operator*() const { return *this; }
    inline const FibBase* data() const { return this; }
};
class FibRgW97 {
public:
    const char* _data;
    static const quint32 _size;
    FibRgW97() :_data(0) {}
    FibRgW97(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    quint16 reserved1;
    quint16 reserved2;
    quint16 reserved3;
    quint16 reserved4;
    quint16 reserved5;
    quint16 reserved6;
    quint16 reserved7;
    quint16 reserved8;
    quint16 reserved9;
    quint16 reserved10;
    quint16 reserved11;
    quint16 reserved12;
    quint16 reserved13;
    quint16 lidFE;
    inline operator const void * () const { return _data; }
    inline const FibRgW97* operator->() const { return this; }
    inline const FibRgW97& operator*() const { return *this; }
    inline const FibRgW97* data() const { return this; }
};
class FibRgLw97 {
public:
    const char* _data;
    static const quint32 _size;
    FibRgLw97() :_data(0) {}
    FibRgLw97(const char* data, quint32/*ignored*/ = 0);// 88 bytes
    quint32 cbMac;
    quint32 reserved1;
    quint32 reserved2;
    qint32 ccpText;
    qint32 ccpFtn;
    qint32 ccpHdd;
    quint32 reserved3;
    qint32 ccpAtn;
    qint32 ccpEdn;
    qint32 ccpTxbx;
    qint32 ccpHdrTxbx;
    quint32 reserved4;
    quint32 reserved5;
    quint32 reserved6;
    quint32 reserved7;
    quint32 reserved8;
    quint32 reserved9;
    quint32 reserved10;
    quint32 reserved11;
    quint32 reserved12;
    quint32 reserved13;
    quint32 reserved14;
    inline operator const void * () const { return _data; }
    inline const FibRgLw97* operator->() const { return this; }
    inline const FibRgLw97& operator*() const { return *this; }
    inline const FibRgLw97* data() const { return this; }
};
class FibRgFcLcb97 {
public:
    const char* _data;
    static const quint32 _size;
    FibRgFcLcb97() :_data(0) {}
    FibRgFcLcb97(const char* data, quint32/*ignored*/ = 0);// 744 bytes
    quint32 fcStshfOrig;
    quint32 lcbStshfOrig;
    quint32 fcStshf;
    quint32 lcbStshf;
    quint32 fcPlcffndRef;
    quint32 lcbPlcffndRef;
    quint32 fcPlcffndTxt;
    quint32 lcbPlcffndTxt;
    quint32 fcPlcfandRef;
    quint32 lcbPlcfandRef;
    quint32 fcPlcfandTxt;
    quint32 lcbPlcfandTxt;
    quint32 fcPlcfSed;
    quint32 lcbPlcfSed;
    quint32 fcPlcPad;
    quint32 lcbPlcPad;
    quint32 fcPlcfPhe;
    quint32 lcbPlcfPhe;
    quint32 fcSttbfGlsy;
    quint32 lcbSttbfGlsy;
    quint32 fcPlcfGlsy;
    quint32 lcbPlcfGlsy;
    quint32 fcPlcfHdd;
    quint32 lcbPlcfHdd;
    quint32 fcPlcfBteChpx;
    quint32 lcbPlcfBteChpx;
    quint32 fcPlcfBtePapx;
    quint32 lcbPlcfBtePapx;
    quint32 fcPlcfSea;
    quint32 lcbPlcfSea;
    quint32 fcSttbfFfn;
    quint32 lcbSttbfFfn;
    quint32 fcPlcfFldMom;
    quint32 lcbPlcfFldMom;
    quint32 fcPlcfFldHdr;
    quint32 lcbPlcfFldHdr;
    quint32 fcPlcfFldFtn;
    quint32 lcbPlcfFldFtn;
    quint32 fcPlcfFldAtn;
    quint32 lcbPlcfFldAtn;
    quint32 fcPlcfFldMcr;
    quint32 lcbPlcfFldMcr;
    quint32 fcSttbfBkmk;
    quint32 lcbSttbfBkmk;
    quint32 fcPlcfBkf;
    quint32 lcbPlcfBkf;
    quint32 fcPlcfBkl;
    quint32 lcbPlcfBkl;
    quint32 fcCmds;
    quint32 lcbCmds;
    quint32 fcUnused1;
    quint32 lcbUnused1;
    quint32 fcSttbfMcr;
    quint32 lcbSttbfMcr;
    quint32 fcPrDrvr;
    quint32 lcbPrDrvr;
    quint32 fcPrEnvPort;
    quint32 lcbPrEnvPort;
    quint32 fcPrEnvLand;
    quint32 lcbPrEnvLand;
    quint32 fcWss;
    quint32 lcbWss;
    quint32 fcDop;
    quint32 lcbDop;
    quint32 fcSttbfAssoc;
    quint32 lcbSttbfAssoc;
    quint32 fcClx;
    quint32 lcbClx;
    quint32 fcPlcfPgdFtn;
    quint32 lcbPlcfPgdFtn;
    quint32 fcAutosaveSource;
    quint32 lcbAutosaveSource;
    quint32 fcGrpXstAtnOwners;
    quint32 lcbGrpXstAtnOwners;
    quint32 fcSttbfAtnBkmk;
    quint32 lcbSttbfAtnBkmk;
    quint32 fcUnused2;
    quint32 lcbUnused2;
    quint32 fcUnused3;
    quint32 lcbUnused3;
    quint32 fcPlcSpaMom;
    quint32 lcbPlcSpaMom;
    quint32 fcPlcSpaHdr;
    quint32 lcbPlcSpaHdr;
    quint32 fcPlcfAtnBkf;
    quint32 lcbPlcfAtnBkf;
    quint32 fcPlcfAtnBkl;
    quint32 lcbPlcfAtnBkl;
    quint32 fcPms;
    quint32 lcbPms;
    quint32 fcFormFldSttbs;
    quint32 lcbFormFldSttbs;
    quint32 fcPlcfendRef;
    quint32 lcbPlcfendRef;
    quint32 fcPlcfendTxt;
    quint32 lcbPlcfendTxt;
    quint32 fcPlcfFldEdn;
    quint32 lcbPlcfFldEdn;
    quint32 fcUnused4;
    quint32 lcbUnused4;
    quint32 fcDggInfo;
    quint32 lcbDggInfo;
    quint32 fcSttbfRMark;
    quint32 lcbSttbfRMark;
    quint32 fcSttbfCaption;
    quint32 lcbSttbfCaption;
    quint32 fcSttbfAutoCaption;
    quint32 lcbSttbfAutoCaption;
    quint32 fcPlcfWkb;
    quint32 lcbPlcfWkb;
    quint32 fcPlcfSpl;
    quint32 lcbPlcfSpl;
    quint32 fcPlcftxbxTxt;
    quint32 lcbPlcftxbxTxt;
    quint32 fcPlcfFldTxbx;
    quint32 lcbPlcfFldTxbx;
    quint32 fcPlcfHdrtxbxTxt;
    quint32 lcbPlcfHdrtxbxTxt;
    quint32 fcPlcffldHdrTxbx;
    quint32 lcbPlcffldHdrTxbx;
    quint32 fcStwUser;
    quint32 lcbStwUser;
    quint32 fcSttbTtmbd;
    quint32 lcbSttbTtmbd;
    quint32 fcCookieData;
    quint32 lcbCookieData;
    quint32 fcPgdMotherOldOld;
    quint32 lcbPgdMotherOldOld;
    quint32 fcBkdMotherOldOld;
    quint32 lcbBkdMotherOldOld;
    quint32 fcPgdFtnOldOld;
    quint32 lcbPgdFtnOldOld;
    quint32 fcBkdFtnOldOld;
    quint32 lcbBkdFtnOldOld;
    quint32 fcPgdEdnOldOld;
    quint32 lcbPgdEdnOldOld;
    quint32 fcBkdEdnOldOld;
    quint32 lcbBkdEdnOldOld;
    quint32 fcSttbfIntlFld;
    quint32 lcbSttbfIntlFld;
    quint32 fcRouteSlip;
    quint32 lcbRouteSlip;
    quint32 fcSttbSavedBy;
    quint32 lcbSttbSavedBy;
    quint32 fcSttbFnm;
    quint32 lcbSttbFnm;
    quint32 fcPlfLst;
    quint32 lcbPlfLst;
    quint32 fcPlfLfo;
    quint32 lcbPlfLfo;
    quint32 fcPlcfTxbxBkd;
    quint32 lcbPlcfTxbxBkd;
    quint32 fcPlcfTxbxHdrBkd;
    quint32 lcbPlcfTxbxHdrBkd;
    quint32 fcDocUndoWord9;
    quint32 lcbDocUndoWord9;
    quint32 fcRgbUse;
    quint32 lcbRgbUse;
    quint32 fcUsp;
    quint32 lcbUsp;
    quint32 fcUskf;
    quint32 lcbUskf;
    quint32 fcPlcupcRgbUse;
    quint32 lcbPlcupcRgbUse;
    quint32 fcPlcupcUsp;
    quint32 lcbPlcupcUsp;
    quint32 fcSttbGlsyStyle;
    quint32 lcbSttbGlsyStyle;
    quint32 fcPlgosl;
    quint32 lcbPlgosl;
    quint32 fcPlcocx;
    quint32 lcbPlcocx;
    quint32 fcPlcfBteLvc;
    quint32 lcbPlcfBteLvc;
    quint32 dwLowDateTime;
    quint32 dwHighDateTime;
    quint32 fcPlcfLvcPre10;
    quint32 lcbPlcfLvcPre10;
    quint32 fcPlcfAsumy;
    quint32 lcbPlcfAsumy;
    quint32 fcPlcfGram;
    quint32 lcbPlcfGram;
    quint32 fcSttbListNames;
    quint32 lcbSttbListNames;
    quint32 fcSttbfUssr;
    quint32 lcbSttbfUssr;
    inline operator const void * () const { return _data; }
    inline const FibRgFcLcb97* operator->() const { return this; }
    inline const FibRgFcLcb97& operator*() const { return *this; }
    inline const FibRgFcLcb97* data() const { return this; }
};
class FibRgFcLcb2000 {
public:
    const char* _data;
    static const quint32 _size;
    FibRgFcLcb2000() :_data(0) {}
    FibRgFcLcb2000(const char* data, quint32/*ignored*/ = 0);// 120 bytes
    quint32 fcPlcfTch;
    quint32 lcbPlcfTch;
    quint32 fcRmdThreading;
    quint32 lcbRmdThreading;
    quint32 fcMid;
    quint32 lcbMid;
    quint32 fcSttbRgtplc;
    quint32 lcbSttbRgtplc;
    quint32 fcMsoEnvelope;
    quint32 lcbMsoEnvelope;
    quint32 fcPlcfLad;
    quint32 lcbPlcfLad;
    quint32 fcRgDofr;
    quint32 lcbRgDofr;
    quint32 fcPlcosl;
    quint32 lcbPlcosl;
    quint32 fcPlcfCookieOld;
    quint32 lcbPlcfCookieOld;
    quint32 fcPgdMotherOld;
    quint32 lcbPgdMotherOld;
    quint32 fcBkdMotherOld;
    quint32 lcbBkdMotherOld;
    quint32 fcPgdFtnOld;
    quint32 lcbPgdFtnOld;
    quint32 fcBkdFtnOld;
    quint32 lcbBkdFtnOld;
    quint32 fcPgdEdnOld;
    quint32 lcbPgdEdnOld;
    quint32 fcBkdEdnOld;
    quint32 lcbBkdEdnOld;
    inline operator const void * () const { return _data; }
    inline const FibRgFcLcb2000* operator->() const { return this; }
    inline const FibRgFcLcb2000& operator*() const { return *this; }
    inline const FibRgFcLcb2000* data() const { return this; }
};
class FibRgFcLcb2002 {
public:
    const char* _data;
    static const quint32 _size;
    FibRgFcLcb2002() :_data(0) {}
    FibRgFcLcb2002(const char* data, quint32/*ignored*/ = 0);// 200 bytes
    quint32 fcUnused1;
    quint32 lcbUnused1;
    quint32 fcPlcfPgp;
    quint32 lcbPlcfPgp;
    quint32 fcPlcfuim;
    quint32 lcbPlcfuim;
    quint32 fcPlfguidUim;
    quint32 lcbPlfguidUim;
    quint32 fcAtrdExtra;
    quint32 lcbAtrdExtra;
    quint32 fcPlrsid;
    quint32 lcbPlrsid;
    quint32 fcSttbfBkmkFactoid;
    quint32 lcbSttbfBkmkFactoid;
    quint32 fcPlcfBkfFactoid;
    quint32 lcbPlcfBkfFactoid;
    quint32 fcPlcfcookie;
    quint32 lcbPlcfcookie;
    quint32 fcPlcfBklFactoid;
    quint32 lcbPlcfBklFactoid;
    quint32 fcFactoidData;
    quint32 lcbFactoidData;
    quint32 fcDocUndo;
    quint32 lcbDocUndo;
    quint32 fcSttbfBkmkFcc;
    quint32 lcbSttbfBkmkFcc;
    quint32 fcPlcfBkfFcc;
    quint32 lcbPlcfBkfFcc;
    quint32 fcPlcfBklFcc;
    quint32 lcbPlcfBklFcc;
    quint32 fcSttbfbkmkBPRepairs;
    quint32 lcbSttbfbkmkBPRepairs;
    quint32 fcPlcfbkfBPRepairs;
    quint32 lcbPlcfbkfBPRepairs;
    quint32 fcPlcfbklBPRepairs;
    quint32 lcbPlcfbklBPRepairs;
    quint32 fcPmsNew;
    quint32 lcbPmsNew;
    quint32 fcODSO;
    quint32 lcbODSO;
    quint32 fcPlcfpmiOldXP;
    quint32 lcbPlcfpmiOldXP;
    quint32 fcPlcfpmiNewXP;
    quint32 lcbPlcfpmiNewXP;
    quint32 fcPlcfpmiMixedXP;
    quint32 lcbPlcfpmiMixedXP;
    quint32 fcUnused2;
    quint32 lcbUnused2;
    quint32 fcPlcffactoid;
    quint32 lcbPlcffactoid;
    inline operator const void * () const { return _data; }
    inline const FibRgFcLcb2002* operator->() const { return this; }
    inline const FibRgFcLcb2002& operator*() const { return *this; }
    inline const FibRgFcLcb2002* data() const { return this; }
};
class LPStshi {
public:
    const char* _data;
    quint32 _size;
    LPStshi() :_data(0), _size(0) {}
    explicit LPStshi(const char* data, const quint32 maxsize);
    quint16 cbSthi;
    MSOCastArray<char> stshi;
    inline operator const void * () const { return _data; }
    inline const LPStshi* operator->() const { return this; }
    inline const LPStshi& operator*() const { return *this; }
    inline const LPStshi* data() const { return this; }
};
class LPStd {
public:
    const char* _data;
    quint32 _size;
    LPStd() :_data(0), _size(0) {}
    explicit LPStd(const char* data, const quint32 maxsize);
    quint16 cbStd;
    MSOCastArray<char> std;
    quint8 padding;
    bool _has_padding;
    inline operator const void * () const { return _data; }
    inline const LPStd* operator->() const { return this; }
    inline const LPStd& operator*() const { return *this; }
    inline const LPStd* data() const { return this; }
};
class PlcfSed {
public:
    const char* _data;
    quint32 _size;
    PlcfSed() :_data(0), _size(0) {}
    explicit PlcfSed(const char* data, const quint32 maxsize);
    MSOCastArray<quint32> aCP;
    MSOArray<Sed> aSed;
    inline operator const void * () const { return _data; }
    inline const PlcfSed* operator->() const { return this; }
    inline const PlcfSed& operator*() const { return *this; }
    inline const PlcfSed* data() const { return this; }
};
class Sed {
public:
    const char* _data;
    static const quint32 _size;
    Sed() :_data(0) {}
    Sed(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    quint16 fn;
    qint32 fcSepx;
    quint16 fnMpr;
    quint32 fcMpr;
    inline operator const void * () const { return _data; }
    inline const Sed* operator->() const { return this; }
    inline const Sed& operator*() const { return *this; }
    inline const Sed* data() const { return this; }
};
class Plcfhdd {
public:
    const char* _data;
    static const quint32 _size;
    Plcfhdd() :_data(0) {}
    Plcfhdd(const char* data, quint32/*ignored*/ = 0);// 52 bytes
    MSOCastArray<quint32> aCP;
    inline operator const void * () const { return _data; }
    inline const Plcfhdd* operator->() const { return this; }
    inline const Plcfhdd& operator*() const { return *this; }
    inline const Plcfhdd* data() const { return this; }
};
class PlcBteChpx {
public:
    const char* _data;
    static const quint32 _size;
    PlcBteChpx() :_data(0) {}
    PlcBteChpx(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    MSOCastArray<quint32> aCP;
    MSOCastArray<quint32> aPnBteChpx;
    inline operator const void * () const { return _data; }
    inline const PlcBteChpx* operator->() const { return this; }
    inline const PlcBteChpx& operator*() const { return *this; }
    inline const PlcBteChpx* data() const { return this; }
};
class PlcfBtePapx {
public:
    const char* _data;
    static const quint32 _size;
    PlcfBtePapx() :_data(0) {}
    PlcfBtePapx(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    MSOCastArray<quint32> aCP;
    MSOCastArray<quint32> aPnBteChpx;
    inline operator const void * () const { return _data; }
    inline const PlcfBtePapx* operator->() const { return this; }
    inline const PlcfBtePapx& operator*() const { return *this; }
    inline const PlcfBtePapx* data() const { return this; }
};
class Tcg {
public:
    const char* _data;
    static const quint32 _size;
    Tcg() :_data(0) {}
    Tcg(const char* data, quint32/*ignored*/ = 0);// 12 bytes
    quint8 nTcgVer;
    MSOCastArray<char> todo;
    inline operator const void * () const { return _data; }
    inline const Tcg* operator->() const { return this; }
    inline const Tcg& operator*() const { return *this; }
    inline const Tcg* data() const { return this; }
};
class PrcData {
public:
    const char* _data;
    quint32 _size;
    PrcData() :_data(0), _size(0) {}
    explicit PrcData(const char* data, const quint32 maxsize);
    qint16 cbGrpprl;
    MSOArray<Sprm> GrpPrl;
    inline operator const void * () const { return _data; }
    inline const PrcData* operator->() const { return this; }
    inline const PrcData& operator*() const { return *this; }
    inline const PrcData* data() const { return this; }
};
class Sprm {
public:
    const char* _data;
    static const quint32 _size;
    Sprm() :_data(0) {}
    Sprm(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    quint16 ispmd;
    bool fSpec;
    quint8 sgc;
    quint8 spra;
    inline operator const void * () const { return _data; }
    inline const Sprm* operator->() const { return this; }
    inline const Sprm& operator*() const { return *this; }
    inline const Sprm* data() const { return this; }
};
class Pcdt {
public:
    const char* _data;
    quint32 _size;
    Pcdt() :_data(0), _size(0) {}
    explicit Pcdt(const char* data, const quint32 maxsize);
    quint8 clxt;
    quint32 lcb;
    MSOArray<Pcd> PlcPcd;
    inline operator const void * () const { return _data; }
    inline const Pcdt* operator->() const { return this; }
    inline const Pcdt& operator*() const { return *this; }
    inline const Pcdt* data() const { return this; }
};
class FCompressed {
public:
    const char* _data;
    static const quint32 _size;
    FCompressed() :_data(0) {}
    FCompressed(const char* data, quint32/*ignored*/ = 0);// 4 bytes
    quint32 fc;
    bool fCompressed;
    bool r1;
    inline operator const void * () const { return _data; }
    inline const FCompressed* operator->() const { return this; }
    inline const FCompressed& operator*() const { return *this; }
    inline const FCompressed* data() const { return this; }
};
class Prm0 {
public:
    const char* _data;
    static const quint32 _size;
    Prm0() :_data(0) {}
    Prm0(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool fComplex;
    quint8 isprm;
    quint8 val;
    inline operator const void * () const { return _data; }
    inline const Prm0* operator->() const { return this; }
    inline const Prm0& operator*() const { return *this; }
    inline const Prm0* data() const { return this; }
};
class Prm1 {
public:
    const char* _data;
    static const quint32 _size;
    Prm1() :_data(0) {}
    Prm1(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    bool fComplex;
    quint16 igrpprl;
    inline operator const void * () const { return _data; }
    inline const Prm1* operator->() const { return this; }
    inline const Prm1& operator*() const { return *this; }
    inline const Prm1* data() const { return this; }
};
class SttbfFfn {
public:
    const char* _data;
    quint32 _size;
    SttbfFfn() :_data(0), _size(0) {}
    explicit SttbfFfn(const char* data, const quint32 maxsize);
    quint16 cData;
    quint16 cbExtra;
    MSOArray<SttbfFfnEntry> data;
    inline operator const void * () const { return _data; }
    inline const SttbfFfn* operator->() const { return this; }
    inline const SttbfFfn& operator*() const { return *this; }
};
class SttbfFfnEntry {
public:
    const char* _data;
    quint32 _size;
    SttbfFfnEntry() :_data(0), _size(0) {}
    explicit SttbfFfnEntry(const char* data, const quint32 maxsize);
    quint8 cchData;
    MSOCastArray<char> Data;
    inline operator const void * () const { return _data; }
    inline const SttbfFfnEntry* operator->() const { return this; }
    inline const SttbfFfnEntry& operator*() const { return *this; }
    inline const SttbfFfnEntry* data() const { return this; }
};
class CodePageString {
public:
    const char* _data;
    quint32 _size;
    CodePageString() :_data(0), _size(0) {}
    explicit CodePageString(const char* data, const quint32 maxsize);
    quint32 size;
    MSOCastArray<char> characters;
    inline operator const void * () const { return _data; }
    inline const CodePageString* operator->() const { return this; }
    inline const CodePageString& operator*() const { return *this; }
    inline const CodePageString* data() const { return this; }
};
class FILETIME {
public:
    const char* _data;
    static const quint32 _size;
    FILETIME() :_data(0) {}
    FILETIME(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    quint32 dwLowDateTime;
    quint32 dwHighDateTime;
    inline operator const void * () const { return _data; }
    inline const FILETIME* operator->() const { return this; }
    inline const FILETIME& operator*() const { return *this; }
    inline const FILETIME* data() const { return this; }
};
class ClipboardData {
public:
    const char* _data;
    quint32 _size;
    ClipboardData() :_data(0), _size(0) {}
    explicit ClipboardData(const char* data, const quint32 maxsize);
    quint32 size;
    quint32 format;
    MSOCastArray<char> data;
    inline operator const void * () const { return _data; }
    inline const ClipboardData* operator->() const { return this; }
    inline const ClipboardData& operator*() const { return *this; }
};
class PropertyIdentifierAndOffset {
public:
    const char* _data;
    static const quint32 _size;
    PropertyIdentifierAndOffset() :_data(0) {}
    PropertyIdentifierAndOffset(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    quint32 propertyIdentifier;
    quint32 offset;
    inline operator const void * () const { return _data; }
    inline const PropertyIdentifierAndOffset* operator->() const { return this; }
    inline const PropertyIdentifierAndOffset& operator*() const { return *this; }
    inline const PropertyIdentifierAndOffset* data() const { return this; }
};
class TypedPropertyValue {
public:
    const char* _data;
    quint32 _size;
    TypedPropertyValue() :_data(0), _size(0) {}
    explicit TypedPropertyValue(const char* data, const quint32 maxsize);
    quint16 type;
    quint16 padding;
    quint16 vt_I2;
    quint16 paddingI2;
    quint32 vg_ERROR;
    CodePageString vt_lpstr;
    FILETIME vg_FILETIME;
    ClipboardData vg_CF;
    bool _has_vt_I2;
    bool _has_paddingI2;
    bool _has_vg_ERROR;
    inline operator const void * () const { return _data; }
    inline const TypedPropertyValue* operator->() const { return this; }
    inline const TypedPropertyValue& operator*() const { return *this; }
    inline const TypedPropertyValue* data() const { return this; }
};
class PropertySet {
public:
    const char* _data;
    quint32 _size;
    PropertySet() :_data(0), _size(0) {}
    explicit PropertySet(const char* data, const quint32 maxsize);
    quint32 size;
    quint32 numProperties;
    MSOArray<PropertyIdentifierAndOffset> propertyIdentifierAndOffset;
    MSOArray<TypedPropertyValue> property;
    inline operator const void * () const { return _data; }
    inline const PropertySet* operator->() const { return this; }
    inline const PropertySet& operator*() const { return *this; }
    inline const PropertySet* data() const { return this; }
};
class PropertySetStream {
public:
    const char* _data;
    quint32 _size;
    PropertySetStream() :_data(0), _size(0) {}
    explicit PropertySetStream(const char* data, const quint32 maxsize);
    quint16 byteOrder;
    quint16 version;
    quint32 systemIdentifier;
    MSOCastArray<char> clsID;
    quint32 numPropertySets;
    MSOCastArray<char> fmtID0;
    quint32 offset0;
    MSOCastArray<char> fmtID1;
    quint32 offset1;
    PropertySet propertySet1;
    PropertySet propertySet2;
    MSOArray<Byte> padding;
    bool _has_fmtID1;
    bool _has_offset1;
    inline operator const void * () const { return _data; }
    inline const PropertySetStream* operator->() const { return this; }
    inline const PropertySetStream& operator*() const { return *this; }
    inline const PropertySetStream* data() const { return this; }
};
class SummaryInformationPropertySetStream {
public:
    const char* _data;
    quint32 _size;
    SummaryInformationPropertySetStream() :_data(0), _size(0) {}
    explicit SummaryInformationPropertySetStream(const char* data, const quint32 maxsize);
    PropertySetStream propertySet;
    inline operator const void * () const { return _data; }
    inline const SummaryInformationPropertySetStream* operator->() const { return this; }
    inline const SummaryInformationPropertySetStream& operator*() const { return *this; }
    inline const SummaryInformationPropertySetStream* data() const { return this; }
};
class DocumentSummaryInformationPropertySetStream {
public:
    const char* _data;
    quint32 _size;
    DocumentSummaryInformationPropertySetStream() :_data(0), _size(0) {}
    explicit DocumentSummaryInformationPropertySetStream(const char* data, const quint32 maxsize);
    PropertySetStream propertySet;
    inline operator const void * () const { return _data; }
    inline const DocumentSummaryInformationPropertySetStream* operator->() const { return this; }
    inline const DocumentSummaryInformationPropertySetStream& operator*() const { return *this; }
    inline const DocumentSummaryInformationPropertySetStream* data() const { return this; }
};
class PicturesStream {
public:
    const char* _data;
    quint32 _size;
    PicturesStream() :_data(0), _size(0) {}
    explicit PicturesStream(const char* data, const quint32 maxsize);
    OfficeArtBStoreDelay anon1;
    MSOArray<Byte> trailing;
    inline operator const void * () const { return _data; }
    inline const PicturesStream* operator->() const { return this; }
    inline const PicturesStream& operator*() const { return *this; }
    inline const PicturesStream* data() const { return this; }
};
class OfficeArtMetafileHeader {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtMetafileHeader() :_data(0) {}
    OfficeArtMetafileHeader(const char* data, quint32/*ignored*/ = 0);// 34 bytes
    quint32 cbSize;
    RECT rcBounds;
    POINT ptSize;
    quint32 cbsave;
    quint8 compression;
    quint8 filter;
    inline operator const void * () const { return _data; }
    inline const OfficeArtMetafileHeader* operator->() const { return this; }
    inline const OfficeArtMetafileHeader& operator*() const { return *this; }
    inline const OfficeArtMetafileHeader* data() const { return this; }
};
class SoundCollectionContainer {
public:
    const char* _data;
    quint32 _size;
    SoundCollectionContainer() :_data(0), _size(0) {}
    explicit SoundCollectionContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    SoundCollectionAtom soundCollectionAtom;
    MSOArray<SoundContainer> rgSoundContainer;
    inline operator const void * () const { return _data; }
    inline const SoundCollectionContainer* operator->() const { return this; }
    inline const SoundCollectionContainer& operator*() const { return *this; }
    inline const SoundCollectionContainer* data() const { return this; }
};
class SlideHeadersFootersContainer {
public:
    const char* _data;
    quint32 _size;
    SlideHeadersFootersContainer() :_data(0), _size(0) {}
    explicit SlideHeadersFootersContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    UserDateAtom userDateAtom;
    FooterAtom footerAtom;
    inline operator const void * () const { return _data; }
    inline const SlideHeadersFootersContainer* operator->() const { return this; }
    inline const SlideHeadersFootersContainer& operator*() const { return *this; }
    inline const SlideHeadersFootersContainer* data() const { return this; }
};
class NotesHeadersFootersContainer {
public:
    const char* _data;
    quint32 _size;
    NotesHeadersFootersContainer() :_data(0), _size(0) {}
    explicit NotesHeadersFootersContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    HeadersFootersAtom hfAtom;
    UserDateAtom userDateAtom;
    HeaderAtom headerAtom;
    FooterAtom footerAtom;
    inline operator const void * () const { return _data; }
    inline const NotesHeadersFootersContainer* operator->() const { return this; }
    inline const NotesHeadersFootersContainer& operator*() const { return *this; }
    inline const NotesHeadersFootersContainer* data() const { return this; }
};
class ScalingStruct {
public:
    const char* _data;
    static const quint32 _size;
    ScalingStruct() :_data(0) {}
    ScalingStruct(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RatioStruct x;
    RatioStruct y;
    inline operator const void * () const { return _data; }
    inline const ScalingStruct* operator->() const { return this; }
    inline const ScalingStruct& operator*() const { return *this; }
    inline const ScalingStruct* data() const { return this; }
};
class TextPFException9 {
public:
    const char* _data;
    quint32 _size;
    TextPFException9() :_data(0), _size(0) {}
    explicit TextPFException9(const char* data, const quint32 maxsize);
    PFMasks masks;
    quint16 bulletBlipRef;
    quint16 fBulletHasAutoNumber;
    TextAutoNumberScheme bulletAutoNumberScheme;
    bool _has_bulletBlipRef;
    bool _has_fBulletHasAutoNumber;
    inline operator const void * () const { return _data; }
    inline const TextPFException9* operator->() const { return this; }
    inline const TextPFException9& operator*() const { return *this; }
    inline const TextPFException9* data() const { return this; }
};
class TextCFException9 {
public:
    const char* _data;
    quint32 _size;
    TextCFException9() :_data(0), _size(0) {}
    explicit TextCFException9(const char* data, const quint32 maxsize);
    CFMasks masks;
    quint8 pp10runid;
    quint32 unuseda;
    quint8 unusedb;
    bool _has_pp10runid;
    bool _has_unuseda;
    bool _has_unusedb;
    inline operator const void * () const { return _data; }
    inline const TextCFException9* operator->() const { return this; }
    inline const TextCFException9& operator*() const { return *this; }
    inline const TextCFException9* data() const { return this; }
};
class TextDefaults9Atom {
public:
    const char* _data;
    quint32 _size;
    TextDefaults9Atom() :_data(0), _size(0) {}
    explicit TextDefaults9Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextCFException9 cf9;
    TextPFException9 pf9;
    inline operator const void * () const { return _data; }
    inline const TextDefaults9Atom* operator->() const { return this; }
    inline const TextDefaults9Atom& operator*() const { return *this; }
    inline const TextDefaults9Atom* data() const { return this; }
};
class Kinsoku9Container {
public:
    const char* _data;
    quint32 _size;
    Kinsoku9Container() :_data(0), _size(0) {}
    explicit Kinsoku9Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    Kinsoku9Atom kinsoku9Atom;
    KinsokuLeadingAtom kinsokuLeadingAtom;
    KinsokuFollowingAtom kinsokuFollowingAtom;
    inline operator const void * () const { return _data; }
    inline const Kinsoku9Container* operator->() const { return this; }
    inline const Kinsoku9Container& operator*() const { return *this; }
    inline const Kinsoku9Container* data() const { return this; }
};
class OutlineTextProps9Entry {
public:
    const char* _data;
    quint32 _size;
    OutlineTextProps9Entry() :_data(0), _size(0) {}
    explicit OutlineTextProps9Entry(const char* data, const quint32 maxsize);
    OutlineTextPropsHeaderExAtom outlineTextHeaderAtom;
    StyleTextProp9Atom styleTextProp9Atom;
    inline operator const void * () const { return _data; }
    inline const OutlineTextProps9Entry* operator->() const { return this; }
    inline const OutlineTextProps9Entry& operator*() const { return *this; }
    inline const OutlineTextProps9Entry* data() const { return this; }
};
class TextCFException10 {
public:
    const char* _data;
    quint32 _size;
    TextCFException10() :_data(0), _size(0) {}
    explicit TextCFException10(const char* data, const quint32 maxsize);
    CFMasks masks;
    quint16 newEAFontRef;
    quint16 csFontRef;
    quint32 pp11ext;
    bool _has_newEAFontRef;
    bool _has_csFontRef;
    bool _has_pp11ext;
    inline operator const void * () const { return _data; }
    inline const TextCFException10* operator->() const { return this; }
    inline const TextCFException10& operator*() const { return *this; }
    inline const TextCFException10* data() const { return this; }
};
class TextDefaults10Atom {
public:
    const char* _data;
    quint32 _size;
    TextDefaults10Atom() :_data(0), _size(0) {}
    explicit TextDefaults10Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextCFException10 cf10;
    inline operator const void * () const { return _data; }
    inline const TextDefaults10Atom* operator->() const { return this; }
    inline const TextDefaults10Atom& operator*() const { return *this; }
    inline const TextDefaults10Atom* data() const { return this; }
};
class CommentIndex10Container {
public:
    const char* _data;
    quint32 _size;
    CommentIndex10Container() :_data(0), _size(0) {}
    explicit CommentIndex10Container(const char* data, const quint32 maxsize);
    RecordHeader rh;
    AuthorNameAtom authorNameAtom;
    CommentIndex10Atom authorIndexAtom;
    inline operator const void * () const { return _data; }
    inline const CommentIndex10Container* operator->() const { return this; }
    inline const CommentIndex10Container& operator*() const { return *this; }
    inline const CommentIndex10Container* data() const { return this; }
};
class OutlineTextProps10Entry {
public:
    const char* _data;
    quint32 _size;
    OutlineTextProps10Entry() :_data(0), _size(0) {}
    explicit OutlineTextProps10Entry(const char* data, const quint32 maxsize);
    OutlineTextPropsHeaderExAtom outlineTextHeaderAtom;
    StyleTextProp10Atom styleTextProp10Atom;
    inline operator const void * () const { return _data; }
    inline const OutlineTextProps10Entry* operator->() const { return this; }
    inline const OutlineTextProps10Entry& operator*() const { return *this; }
    inline const OutlineTextProps10Entry* data() const { return this; }
};
class PP11DocBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP11DocBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP11DocBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> tagName;
    RecordHeader rhData;
    SmartTagStore11Container smartTagStore11;
    OutlineTextProps11Container outlineTextProps;
    inline operator const void * () const { return _data; }
    inline const PP11DocBinaryTagExtension* operator->() const { return this; }
    inline const PP11DocBinaryTagExtension& operator*() const { return *this; }
    inline const PP11DocBinaryTagExtension* data() const { return this; }
};
class UnknownBinaryTag {
public:
    const char* _data;
    quint32 _size;
    UnknownBinaryTag() :_data(0), _size(0) {}
    explicit UnknownBinaryTag(const char* data, const quint32 maxsize);
    TagNameAtom tagNameAtom;
    BinaryTagDataBlob tagData;
    inline operator const void * () const { return _data; }
    inline const UnknownBinaryTag* operator->() const { return this; }
    inline const UnknownBinaryTag& operator*() const { return *this; }
    inline const UnknownBinaryTag* data() const { return this; }
};
class NoZoomViewInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    NoZoomViewInfoAtom() :_data(0) {}
    NoZoomViewInfoAtom(const char* data, quint32/*ignored*/ = 0);// 60 bytes
    RecordHeader rh;
    ScalingStruct curScale;
    MSOCastArray<char> unused1;
    PointStruct origin;
    quint8 unused2;
    quint8 fDraftMode;
    quint16 unused3;
    inline operator const void * () const { return _data; }
    inline const NoZoomViewInfoAtom* operator->() const { return this; }
    inline const NoZoomViewInfoAtom& operator*() const { return *this; }
    inline const NoZoomViewInfoAtom* data() const { return this; }
};
class VBAInfoContainer {
public:
    const char* _data;
    static const quint32 _size;
    VBAInfoContainer() :_data(0) {}
    VBAInfoContainer(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    RecordHeader rh;
    VBAInfoAtom vbaInfoAtom;
    inline operator const void * () const { return _data; }
    inline const VBAInfoContainer* operator->() const { return this; }
    inline const VBAInfoContainer& operator*() const { return *this; }
    inline const VBAInfoContainer* data() const { return this; }
};
class NormalViewSetInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    NormalViewSetInfoAtom() :_data(0) {}
    NormalViewSetInfoAtom(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    RecordHeader rh;
    RatioStruct leftPortion;
    RatioStruct topPortion;
    quint8 vertBarState;
    quint8 horizBarState;
    quint8 fPreferSingleSet;
    bool fHideThumbnails;
    bool fBarSnapped;
    quint8 reserved;
    inline operator const void * () const { return _data; }
    inline const NormalViewSetInfoAtom* operator->() const { return this; }
    inline const NormalViewSetInfoAtom& operator*() const { return *this; }
    inline const NormalViewSetInfoAtom* data() const { return this; }
};
class TextContainer {
public:
    const char* _data;
    quint32 _size;
    TextContainer() :_data(0), _size(0) {}
    explicit TextContainer(const char* data, const quint32 maxsize);
    TextHeaderAtom textHeaderAtom;
    class C_text {
    friend class TextContainer;
    private:
        TextCharsAtom _TextCharsAtom;
        TextBytesAtom _TextBytesAtom;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_text text;
    StyleTextPropAtom style;
    MSOArray<TextContainerMeta> meta;
    MasterTextPropAtom master;
    MSOArray<TextBookmarkAtom> bookmark;
    UnknownTextContainerChild unknown;
    TextSpecialInfoAtom specialinfo;
    MSOArray<TextContainerInteractiveInfo> interactive;
    TextSpecialInfoAtom specialinfo2;
    inline operator const void * () const { return _data; }
    inline const TextContainer* operator->() const { return this; }
    inline const TextContainer& operator*() const { return *this; }
    inline const TextContainer* data() const { return this; }
};
class TextContainerMeta {
public:
    const char* _data;
    quint32 _size;
    TextContainerMeta() :_data(0), _size(0) {}
    explicit TextContainerMeta(const char* data, const quint32 maxsize);
    class C_meta {
    friend class TextContainerMeta;
    private:
        SlideNumberMCAtom _SlideNumberMCAtom;
        DateTimeMCAtom _DateTimeMCAtom;
        GenericDateMCAtom _GenericDateMCAtom;
        HeaderMCAtom _HeaderMCAtom;
        FooterMCAtom _FooterMCAtom;
        RTFDateTimeMCAtom _RTFDateTimeMCAtom;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_meta meta;
    inline operator const void * () const { return _data; }
    inline const TextContainerMeta* operator->() const { return this; }
    inline const TextContainerMeta& operator*() const { return *this; }
    inline const TextContainerMeta* data() const { return this; }
};
class SlidePersistAtom {
public:
    const char* _data;
    static const quint32 _size;
    SlidePersistAtom() :_data(0) {}
    SlidePersistAtom(const char* data, quint32/*ignored*/ = 0);// 28 bytes
    RecordHeader rh;
    quint32 persistIdRef;
    bool reserved1;
    bool fShouldCollapse;
    bool fNonOutlineData;
    quint8 reserved2;
    quint8 reserved3;
    quint16 reserved4;
    qint32 cTexts;
    SlideId slideId;
    quint32 reserved5;
    inline operator const void * () const { return _data; }
    inline const SlidePersistAtom* operator->() const { return this; }
    inline const SlidePersistAtom& operator*() const { return *this; }
    inline const SlidePersistAtom* data() const { return this; }
};
class TextRuler {
public:
    const char* _data;
    quint32 _size;
    TextRuler() :_data(0), _size(0) {}
    explicit TextRuler(const char* data, const quint32 maxsize);
    bool fDefaultTabSize;
    bool fCLevels;
    bool fTabStops;
    bool fLeftMargin1;
    bool fLeftMargin2;
    bool fLeftMargin3;
    bool fLeftMargin4;
    bool fLeftMargin5;
    bool fIndent1;
    bool fIndent2;
    bool fIndent3;
    bool fIndent4;
    bool fIndent5;
    quint8 reserved1;
    quint16 reserved2;
    qint16 cLevels;
    quint16 defaultTabSize;
    TabStops tabs;
    quint16 leftMargin1;
    quint16 indent1;
    quint16 leftMargin2;
    quint16 indent2;
    quint16 leftMargin3;
    quint16 indent3;
    quint16 leftMargin4;
    quint16 indent4;
    quint16 leftMargin5;
    quint16 indent5;
    bool _has_cLevels;
    bool _has_defaultTabSize;
    bool _has_leftMargin1;
    bool _has_indent1;
    bool _has_leftMargin2;
    bool _has_indent2;
    bool _has_leftMargin3;
    bool _has_indent3;
    bool _has_leftMargin4;
    bool _has_indent4;
    bool _has_leftMargin5;
    bool _has_indent5;
    inline operator const void * () const { return _data; }
    inline const TextRuler* operator->() const { return this; }
    inline const TextRuler& operator*() const { return *this; }
    inline const TextRuler* data() const { return this; }
};
class TextPFException {
public:
    const char* _data;
    quint32 _size;
    TextPFException() :_data(0), _size(0) {}
    explicit TextPFException(const char* data, const quint32 maxsize);
    PFMasks masks;
    BulletFlags bulletFlags;
    qint16 bulletChar;
    quint16 bulletFontRef;
    qint16 bulletSize;
    ColorIndexStruct bulletColor;
    quint16 textAlignment;
    qint16 lineSpacing;
    qint16 spaceBefore;
    qint16 spaceAfter;
    quint16 leftMargin;
    quint16 indent;
    quint16 defaultTabSize;
    TabStops tabStops;
    quint16 fontAlign;
    PFWrapFlags wrapFlags;
    quint16 textDirection;
    bool _has_bulletChar;
    bool _has_bulletFontRef;
    bool _has_bulletSize;
    bool _has_textAlignment;
    bool _has_lineSpacing;
    bool _has_spaceBefore;
    bool _has_spaceAfter;
    bool _has_leftMargin;
    bool _has_indent;
    bool _has_defaultTabSize;
    bool _has_fontAlign;
    bool _has_textDirection;
    inline operator const void * () const { return _data; }
    inline const TextPFException* operator->() const { return this; }
    inline const TextPFException& operator*() const { return *this; }
    inline const TextPFException* data() const { return this; }
};
class TextCFException {
public:
    const char* _data;
    quint32 _size;
    TextCFException() :_data(0), _size(0) {}
    explicit TextCFException(const char* data, const quint32 maxsize);
    CFMasks masks;
    CFStyle fontStyle;
    quint16 fontRef;
    quint16 oldEAFontRef;
    quint16 ansiFontRef;
    quint16 symbolFontRef;
    quint16 fontSize;
    ColorIndexStruct color;
    qint16 position;
    bool _has_fontRef;
    bool _has_oldEAFontRef;
    bool _has_ansiFontRef;
    bool _has_symbolFontRef;
    bool _has_fontSize;
    bool _has_position;
    inline operator const void * () const { return _data; }
    inline const TextCFException* operator->() const { return this; }
    inline const TextCFException& operator*() const { return *this; }
    inline const TextCFException* data() const { return this; }
};
class FontCollectionEntry {
public:
    const char* _data;
    quint32 _size;
    FontCollectionEntry() :_data(0), _size(0) {}
    explicit FontCollectionEntry(const char* data, const quint32 maxsize);
    FontEntityAtom fontEntityAtom;
    FontEmbedDataBlob fontEmbedData1;
    FontEmbedDataBlob fontEmbedData2;
    FontEmbedDataBlob fontEmbedData3;
    FontEmbedDataBlob fontEmbedData4;
    inline operator const void * () const { return _data; }
    inline const FontCollectionEntry* operator->() const { return this; }
    inline const FontCollectionEntry& operator*() const { return *this; }
    inline const FontCollectionEntry* data() const { return this; }
};
class KinsokuContainer {
public:
    const char* _data;
    quint32 _size;
    KinsokuContainer() :_data(0), _size(0) {}
    explicit KinsokuContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    KinsokuAtom kinsokuAtom;
    KinsokuLeadingAtom kinsokuLeadingAtom;
    KinsokuFollowingAtom kinsokuFollowingAtom;
    inline operator const void * () const { return _data; }
    inline const KinsokuContainer* operator->() const { return this; }
    inline const KinsokuContainer& operator*() const { return *this; }
    inline const KinsokuContainer* data() const { return this; }
};
class TextSIException {
public:
    const char* _data;
    quint32 _size;
    TextSIException() :_data(0), _size(0) {}
    explicit TextSIException(const char* data, const quint32 maxsize);
    bool spell;
    bool lang;
    bool altLang;
    bool unused1;
    bool unused2;
    bool fPp10ext;
    bool fBidi;
    bool unused3;
    bool reserved1;
    bool smartTag;
    quint8 reserved2a;
    quint32 reserved2b;
    quint16 spellInfo;
    quint16 lid;
    quint16 altLid;
    qint16 bidi;
    quint8 pp10runid;
    quint8 reserved3a;
    quint16 reserved3b;
    quint8 reserved3bc;
    bool grammarError;
    SmartTags smartTags;
    bool _has_spellInfo;
    bool _has_lid;
    bool _has_altLid;
    bool _has_bidi;
    bool _has_pp10runid;
    bool _has_reserved3a;
    bool _has_reserved3b;
    bool _has_reserved3bc;
    bool _has_grammarError;
    inline operator const void * () const { return _data; }
    inline const TextSIException* operator->() const { return this; }
    inline const TextSIException& operator*() const { return *this; }
    inline const TextSIException* data() const { return this; }
};
class TextMasterStyleLevel {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyleLevel() :_data(0), _size(0) {}
    explicit TextMasterStyleLevel(const char* data, const quint32 maxsize);
    TextPFException pf;
    TextCFException cf;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyleLevel* operator->() const { return this; }
    inline const TextMasterStyleLevel& operator*() const { return *this; }
    inline const TextMasterStyleLevel* data() const { return this; }
};
class DocumentAtom {
public:
    const char* _data;
    static const quint32 _size;
    DocumentAtom() :_data(0) {}
    DocumentAtom(const char* data, quint32/*ignored*/ = 0);// 48 bytes
    RecordHeader rh;
    PointStruct slideSize;
    PointStruct notesSize;
    RatioStruct serverZoom;
    quint32 notesMasterPersistIdRef;
    quint32 handoutMasterPersistIdRef;
    quint16 firstSlideNumber;
    quint16 slideSizeType;
    quint8 fSaveWithFonts;
    quint8 fOmitTitlePlace;
    quint8 fRightToLeft;
    quint8 fShowComments;
    inline operator const void * () const { return _data; }
    inline const DocumentAtom* operator->() const { return this; }
    inline const DocumentAtom& operator*() const { return *this; }
    inline const DocumentAtom* data() const { return this; }
};
class SlideTime10Atom {
public:
    const char* _data;
    static const quint32 _size;
    SlideTime10Atom() :_data(0) {}
    SlideTime10Atom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    FILETIME fileTime;
    inline operator const void * () const { return _data; }
    inline const SlideTime10Atom* operator->() const { return this; }
    inline const SlideTime10Atom& operator*() const { return *this; }
    inline const SlideTime10Atom* data() const { return this; }
};
class PP12SlideBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP12SlideBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP12SlideBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    RoundTripHeaderFooterDefaults12Atom roundTripHeaderFooterDefaultsAtom;
    inline operator const void * () const { return _data; }
    inline const PP12SlideBinaryTagExtension* operator->() const { return this; }
    inline const PP12SlideBinaryTagExtension& operator*() const { return *this; }
    inline const PP12SlideBinaryTagExtension* data() const { return this; }
};
class ProgStringTagContainer {
public:
    const char* _data;
    quint32 _size;
    ProgStringTagContainer() :_data(0), _size(0) {}
    explicit ProgStringTagContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TagNameAtom tagNameAtom;
    TagValueAtom tagValueAtom;
    inline operator const void * () const { return _data; }
    inline const ProgStringTagContainer* operator->() const { return this; }
    inline const ProgStringTagContainer& operator*() const { return *this; }
    inline const ProgStringTagContainer* data() const { return this; }
};
class NotesAtom {
public:
    const char* _data;
    static const quint32 _size;
    NotesAtom() :_data(0) {}
    NotesAtom(const char* data, quint32/*ignored*/ = 0);// 16 bytes
    RecordHeader rh;
    quint32 slideIdRef;
    SlideFlags slideFlags;
    quint16 unused;
    inline operator const void * () const { return _data; }
    inline const NotesAtom* operator->() const { return this; }
    inline const NotesAtom& operator*() const { return *this; }
    inline const NotesAtom* data() const { return this; }
};
class ExObjListContainer {
public:
    const char* _data;
    quint32 _size;
    ExObjListContainer() :_data(0), _size(0) {}
    explicit ExObjListContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    ExObjListAtom exObjListAtom;
    MSOArray<ExObjListSubContainer> rgChildRec;
    inline operator const void * () const { return _data; }
    inline const ExObjListContainer* operator->() const { return this; }
    inline const ExObjListContainer& operator*() const { return *this; }
    inline const ExObjListContainer* data() const { return this; }
};
class ExControlContainer {
public:
    const char* _data;
    quint32 _size;
    ExControlContainer() :_data(0), _size(0) {}
    explicit ExControlContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    ExControlAtom exControlAtom;
    ExOleObjAtom exOleObjAtom;
    MenuNameAtom menuNameAtom;
    ProgIDAtom progIdAtom;
    ClipboardNameAtom clipboardNameAtom;
    MetafileBlob metafile;
    inline operator const void * () const { return _data; }
    inline const ExControlContainer* operator->() const { return this; }
    inline const ExControlContainer& operator*() const { return *this; }
    inline const ExControlContainer* data() const { return this; }
};
class ExHyperlinkContainer {
public:
    const char* _data;
    quint32 _size;
    ExHyperlinkContainer() :_data(0), _size(0) {}
    explicit ExHyperlinkContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    ExHyperlinkAtom exHyperlinkAtom;
    FriendlyNameAtom friendlyNameAtom;
    TargetAtom targetAtom;
    LocationAtom locationAtom;
    inline operator const void * () const { return _data; }
    inline const ExHyperlinkContainer* operator->() const { return this; }
    inline const ExHyperlinkContainer& operator*() const { return *this; }
    inline const ExHyperlinkContainer* data() const { return this; }
};
class ExOleLinkContainer {
public:
    const char* _data;
    quint32 _size;
    ExOleLinkContainer() :_data(0), _size(0) {}
    explicit ExOleLinkContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    ExOleLinkAtom exOleLinkAtom;
    ExOleObjAtom exOleObjAtom;
    MenuNameAtom menuNameAtom;
    ProgIDAtom progIdAtom;
    ClipboardNameAtom clipboardNameAtom;
    MetafileBlob metafile;
    inline operator const void * () const { return _data; }
    inline const ExOleLinkContainer* operator->() const { return this; }
    inline const ExOleLinkContainer& operator*() const { return *this; }
    inline const ExOleLinkContainer* data() const { return this; }
};
class ExOleEmbedContainer {
public:
    const char* _data;
    quint32 _size;
    ExOleEmbedContainer() :_data(0), _size(0) {}
    explicit ExOleEmbedContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    ExOleEmbedAtom exOleEmbedAtom;
    ExOleObjAtom exOleObjAtom;
    MenuNameAtom menuNameAtom;
    ProgIDAtom progIdAtom;
    ClipboardNameAtom clipboardNameAtom;
    MetafileBlob metafile;
    inline operator const void * () const { return _data; }
    inline const ExOleEmbedContainer* operator->() const { return this; }
    inline const ExOleEmbedContainer& operator*() const { return *this; }
    inline const ExOleEmbedContainer* data() const { return this; }
};
class OfficeArtFDGGBlock {
public:
    const char* _data;
    quint32 _size;
    OfficeArtFDGGBlock() :_data(0), _size(0) {}
    explicit OfficeArtFDGGBlock(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    OfficeArtFDGG head;
    MSOArray<OfficeArtIDCL> Rgidcl;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFDGGBlock* operator->() const { return this; }
    inline const OfficeArtFDGGBlock& operator*() const { return *this; }
    inline const OfficeArtFDGGBlock* data() const { return this; }
};
class OfficeArtSolverContainerFileBlock {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSolverContainerFileBlock() :_data(0), _size(0) {}
    explicit OfficeArtSolverContainerFileBlock(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtSolverContainerFileBlock;
    private:
        OfficeArtFConnectorRule _OfficeArtFConnectorRule;
        OfficeArtFArcRule _OfficeArtFArcRule;
        OfficeArtFCalloutRule _OfficeArtFCalloutRule;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSolverContainerFileBlock* operator->() const { return this; }
    inline const OfficeArtSolverContainerFileBlock& operator*() const { return *this; }
    inline const OfficeArtSolverContainerFileBlock* data() const { return this; }
};
class Rotation {
public:
    const char* _data;
    static const quint32 _size;
    Rotation() :_data(0) {}
    Rotation(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint rotation;
    inline operator const void * () const { return _data; }
    inline const Rotation* operator->() const { return this; }
    inline const Rotation& operator*() const { return *this; }
    inline const Rotation* data() const { return this; }
};
class ProtectionBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    ProtectionBooleanProperties() :_data(0) {}
    ProtectionBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fLockAgainstGrouping;
    bool fLockAdjustHandles;
    bool fLockText;
    bool fLockVertices;
    bool fLockCropping;
    bool fLockAgainstSelect;
    bool fLockPosition;
    bool fLockAspectRatio;
    bool fLockRotation;
    bool fLockAgainstUngrouping;
    quint8 unused6;
    bool fUsefLockAgainstGrouping;
    bool fUseLockAdjustHandles;
    bool fUseLockText;
    bool fUsefLockVertices;
    bool fUsefLockCropping;
    bool fUsefLockAgainstSelect;
    bool fUsefLockPosition;
    bool fUsefLockAspectRatio;
    bool fUsefLockRotation;
    bool fUsefLockAgainstUngrouping;
    quint8 unused2;
    inline operator const void * () const { return _data; }
    inline const ProtectionBooleanProperties* operator->() const { return this; }
    inline const ProtectionBooleanProperties& operator*() const { return *this; }
    inline const ProtectionBooleanProperties* data() const { return this; }
};
class ITxid {
public:
    const char* _data;
    static const quint32 _size;
    ITxid() :_data(0) {}
    ITxid(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 iTxid;
    inline operator const void * () const { return _data; }
    inline const ITxid* operator->() const { return this; }
    inline const ITxid& operator*() const { return *this; }
    inline const ITxid* data() const { return this; }
};
class DxTextLeft {
public:
    const char* _data;
    static const quint32 _size;
    DxTextLeft() :_data(0) {}
    DxTextLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxTextLeft;
    inline operator const void * () const { return _data; }
    inline const DxTextLeft* operator->() const { return this; }
    inline const DxTextLeft& operator*() const { return *this; }
    inline const DxTextLeft* data() const { return this; }
};
class DyTextTop {
public:
    const char* _data;
    static const quint32 _size;
    DyTextTop() :_data(0) {}
    DyTextTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dyTextTop;
    inline operator const void * () const { return _data; }
    inline const DyTextTop* operator->() const { return this; }
    inline const DyTextTop& operator*() const { return *this; }
    inline const DyTextTop* data() const { return this; }
};
class DxTextRight {
public:
    const char* _data;
    static const quint32 _size;
    DxTextRight() :_data(0) {}
    DxTextRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxTextRight;
    inline operator const void * () const { return _data; }
    inline const DxTextRight* operator->() const { return this; }
    inline const DxTextRight& operator*() const { return *this; }
    inline const DxTextRight* data() const { return this; }
};
class DyTextBottom {
public:
    const char* _data;
    static const quint32 _size;
    DyTextBottom() :_data(0) {}
    DyTextBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dyTextBottom;
    inline operator const void * () const { return _data; }
    inline const DyTextBottom* operator->() const { return this; }
    inline const DyTextBottom& operator*() const { return *this; }
    inline const DyTextBottom* data() const { return this; }
};
class WrapText {
public:
    const char* _data;
    static const quint32 _size;
    WrapText() :_data(0) {}
    WrapText(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 wrapText;
    inline operator const void * () const { return _data; }
    inline const WrapText* operator->() const { return this; }
    inline const WrapText& operator*() const { return *this; }
    inline const WrapText* data() const { return this; }
};
class AnchorText {
public:
    const char* _data;
    static const quint32 _size;
    AnchorText() :_data(0) {}
    AnchorText(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 anchorText;
    inline operator const void * () const { return _data; }
    inline const AnchorText* operator->() const { return this; }
    inline const AnchorText& operator*() const { return *this; }
    inline const AnchorText* data() const { return this; }
};
class TxflTextFlow {
public:
    const char* _data;
    static const quint32 _size;
    TxflTextFlow() :_data(0) {}
    TxflTextFlow(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 txflTextFlow;
    inline operator const void * () const { return _data; }
    inline const TxflTextFlow* operator->() const { return this; }
    inline const TxflTextFlow& operator*() const { return *this; }
    inline const TxflTextFlow* data() const { return this; }
};
class CdirFont {
public:
    const char* _data;
    static const quint32 _size;
    CdirFont() :_data(0) {}
    CdirFont(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 cdirFont;
    inline operator const void * () const { return _data; }
    inline const CdirFont* operator->() const { return this; }
    inline const CdirFont& operator*() const { return *this; }
    inline const CdirFont* data() const { return this; }
};
class HspNext {
public:
    const char* _data;
    static const quint32 _size;
    HspNext() :_data(0) {}
    HspNext(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 hspNext;
    inline operator const void * () const { return _data; }
    inline const HspNext* operator->() const { return this; }
    inline const HspNext& operator*() const { return *this; }
    inline const HspNext* data() const { return this; }
};
class Txdir {
public:
    const char* _data;
    static const quint32 _size;
    Txdir() :_data(0) {}
    Txdir(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 txdir;
    inline operator const void * () const { return _data; }
    inline const Txdir* operator->() const { return this; }
    inline const Txdir& operator*() const { return *this; }
    inline const Txdir* data() const { return this; }
};
class TextBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    TextBooleanProperties() :_data(0) {}
    TextBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool unused1;
    bool fFitShapeToText;
    bool unused2;
    bool fAutoTextMargin;
    bool fSelectText;
    quint8 unused3a;
    quint8 unused3b;
    bool unused4;
    bool fUsefFitShapeToText;
    bool unused5;
    bool fUsefAutoTextMargin;
    bool fUsefSelectText;
    quint8 unused6a;
    quint8 unused6b;
    inline operator const void * () const { return _data; }
    inline const TextBooleanProperties* operator->() const { return this; }
    inline const TextBooleanProperties& operator*() const { return *this; }
    inline const TextBooleanProperties* data() const { return this; }
};
class CropFromTop {
public:
    const char* _data;
    static const quint32 _size;
    CropFromTop() :_data(0) {}
    CropFromTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint cropFromTop;
    inline operator const void * () const { return _data; }
    inline const CropFromTop* operator->() const { return this; }
    inline const CropFromTop& operator*() const { return *this; }
    inline const CropFromTop* data() const { return this; }
};
class CropFromBottom {
public:
    const char* _data;
    static const quint32 _size;
    CropFromBottom() :_data(0) {}
    CropFromBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint cropFromBottom;
    inline operator const void * () const { return _data; }
    inline const CropFromBottom* operator->() const { return this; }
    inline const CropFromBottom& operator*() const { return *this; }
    inline const CropFromBottom* data() const { return this; }
};
class CropFromLeft {
public:
    const char* _data;
    static const quint32 _size;
    CropFromLeft() :_data(0) {}
    CropFromLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint cropFromLeft;
    inline operator const void * () const { return _data; }
    inline const CropFromLeft* operator->() const { return this; }
    inline const CropFromLeft& operator*() const { return *this; }
    inline const CropFromLeft* data() const { return this; }
};
class CropFromRight {
public:
    const char* _data;
    static const quint32 _size;
    CropFromRight() :_data(0) {}
    CropFromRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint cropFromRight;
    inline operator const void * () const { return _data; }
    inline const CropFromRight* operator->() const { return this; }
    inline const CropFromRight& operator*() const { return *this; }
    inline const CropFromRight* data() const { return this; }
};
class Pib {
public:
    const char* _data;
    static const quint32 _size;
    Pib() :_data(0) {}
    Pib(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pib;
    inline operator const void * () const { return _data; }
    inline const Pib* operator->() const { return this; }
    inline const Pib& operator*() const { return *this; }
    inline const Pib* data() const { return this; }
};
class PibName {
public:
    const char* _data;
    static const quint32 _size;
    PibName() :_data(0) {}
    PibName(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pibName;
    inline operator const void * () const { return _data; }
    inline const PibName* operator->() const { return this; }
    inline const PibName& operator*() const { return *this; }
    inline const PibName* data() const { return this; }
};
class PibFlags {
public:
    const char* _data;
    static const quint32 _size;
    PibFlags() :_data(0) {}
    PibFlags(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pibFlags;
    inline operator const void * () const { return _data; }
    inline const PibFlags* operator->() const { return this; }
    inline const PibFlags& operator*() const { return *this; }
    inline const PibFlags* data() const { return this; }
};
class PictureTransparent {
public:
    const char* _data;
    static const quint32 _size;
    PictureTransparent() :_data(0) {}
    PictureTransparent(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF pictureTransparent;
    inline operator const void * () const { return _data; }
    inline const PictureTransparent* operator->() const { return this; }
    inline const PictureTransparent& operator*() const { return *this; }
    inline const PictureTransparent* data() const { return this; }
};
class PictureContrast {
public:
    const char* _data;
    static const quint32 _size;
    PictureContrast() :_data(0) {}
    PictureContrast(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 pictureContrast;
    inline operator const void * () const { return _data; }
    inline const PictureContrast* operator->() const { return this; }
    inline const PictureContrast& operator*() const { return *this; }
    inline const PictureContrast* data() const { return this; }
};
class PictureBrightness {
public:
    const char* _data;
    static const quint32 _size;
    PictureBrightness() :_data(0) {}
    PictureBrightness(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 pictureBrightness;
    inline operator const void * () const { return _data; }
    inline const PictureBrightness* operator->() const { return this; }
    inline const PictureBrightness& operator*() const { return *this; }
    inline const PictureBrightness* data() const { return this; }
};
class BlipBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    BlipBooleanProperties() :_data(0) {}
    BlipBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fPictureActive;
    bool fPictureBiLevel;
    bool fPictureGray;
    bool fNoHitTestPicture;
    bool fLooping;
    bool fRewind;
    bool fPicturePreserveGrays;
    bool unused1a;
    quint8 unused1b;
    bool fUsefPictureActive;
    bool fUsefPictureBiLevel;
    bool fUsefPictureGray;
    bool fUsefNoHitTestPicture;
    bool fUsefLooping;
    bool fUsefRewind;
    bool fUsefPicturePreserveGrays;
    bool unused2a;
    quint8 unused2b;
    inline operator const void * () const { return _data; }
    inline const BlipBooleanProperties* operator->() const { return this; }
    inline const BlipBooleanProperties& operator*() const { return *this; }
    inline const BlipBooleanProperties* data() const { return this; }
};
class GeoLeft {
public:
    const char* _data;
    static const quint32 _size;
    GeoLeft() :_data(0) {}
    GeoLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 geoLeft;
    inline operator const void * () const { return _data; }
    inline const GeoLeft* operator->() const { return this; }
    inline const GeoLeft& operator*() const { return *this; }
    inline const GeoLeft* data() const { return this; }
};
class GeoTop {
public:
    const char* _data;
    static const quint32 _size;
    GeoTop() :_data(0) {}
    GeoTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 geoTop;
    inline operator const void * () const { return _data; }
    inline const GeoTop* operator->() const { return this; }
    inline const GeoTop& operator*() const { return *this; }
    inline const GeoTop* data() const { return this; }
};
class GeoRight {
public:
    const char* _data;
    static const quint32 _size;
    GeoRight() :_data(0) {}
    GeoRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 geoRight;
    inline operator const void * () const { return _data; }
    inline const GeoRight* operator->() const { return this; }
    inline const GeoRight& operator*() const { return *this; }
    inline const GeoRight* data() const { return this; }
};
class GeoBottom {
public:
    const char* _data;
    static const quint32 _size;
    GeoBottom() :_data(0) {}
    GeoBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 geoBottom;
    inline operator const void * () const { return _data; }
    inline const GeoBottom* operator->() const { return this; }
    inline const GeoBottom& operator*() const { return *this; }
    inline const GeoBottom* data() const { return this; }
};
class ShapePath {
public:
    const char* _data;
    static const quint32 _size;
    ShapePath() :_data(0) {}
    ShapePath(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 shapePath;
    inline operator const void * () const { return _data; }
    inline const ShapePath* operator->() const { return this; }
    inline const ShapePath& operator*() const { return *this; }
    inline const ShapePath* data() const { return this; }
};
class PVertices {
public:
    const char* _data;
    static const quint32 _size;
    PVertices() :_data(0) {}
    PVertices(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pVertices;
    inline operator const void * () const { return _data; }
    inline const PVertices* operator->() const { return this; }
    inline const PVertices& operator*() const { return *this; }
    inline const PVertices* data() const { return this; }
};
class PSegmentInfo {
public:
    const char* _data;
    static const quint32 _size;
    PSegmentInfo() :_data(0) {}
    PSegmentInfo(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pSegmentInfo;
    inline operator const void * () const { return _data; }
    inline const PSegmentInfo* operator->() const { return this; }
    inline const PSegmentInfo& operator*() const { return *this; }
    inline const PSegmentInfo* data() const { return this; }
};
class AdjustValue {
public:
    const char* _data;
    static const quint32 _size;
    AdjustValue() :_data(0) {}
    AdjustValue(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjustvalue;
    inline operator const void * () const { return _data; }
    inline const AdjustValue* operator->() const { return this; }
    inline const AdjustValue& operator*() const { return *this; }
    inline const AdjustValue* data() const { return this; }
};
class Adjust2Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust2Value() :_data(0) {}
    Adjust2Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust2value;
    inline operator const void * () const { return _data; }
    inline const Adjust2Value* operator->() const { return this; }
    inline const Adjust2Value& operator*() const { return *this; }
    inline const Adjust2Value* data() const { return this; }
};
class Adjust3Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust3Value() :_data(0) {}
    Adjust3Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust3value;
    inline operator const void * () const { return _data; }
    inline const Adjust3Value* operator->() const { return this; }
    inline const Adjust3Value& operator*() const { return *this; }
    inline const Adjust3Value* data() const { return this; }
};
class Adjust4Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust4Value() :_data(0) {}
    Adjust4Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust4value;
    inline operator const void * () const { return _data; }
    inline const Adjust4Value* operator->() const { return this; }
    inline const Adjust4Value& operator*() const { return *this; }
    inline const Adjust4Value* data() const { return this; }
};
class Adjust5Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust5Value() :_data(0) {}
    Adjust5Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust5value;
    inline operator const void * () const { return _data; }
    inline const Adjust5Value* operator->() const { return this; }
    inline const Adjust5Value& operator*() const { return *this; }
    inline const Adjust5Value* data() const { return this; }
};
class Adjust6Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust6Value() :_data(0) {}
    Adjust6Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust6value;
    inline operator const void * () const { return _data; }
    inline const Adjust6Value* operator->() const { return this; }
    inline const Adjust6Value& operator*() const { return *this; }
    inline const Adjust6Value* data() const { return this; }
};
class Adjust7Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust7Value() :_data(0) {}
    Adjust7Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust7value;
    inline operator const void * () const { return _data; }
    inline const Adjust7Value* operator->() const { return this; }
    inline const Adjust7Value& operator*() const { return *this; }
    inline const Adjust7Value* data() const { return this; }
};
class Adjust8Value {
public:
    const char* _data;
    static const quint32 _size;
    Adjust8Value() :_data(0) {}
    Adjust8Value(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 adjust8value;
    inline operator const void * () const { return _data; }
    inline const Adjust8Value* operator->() const { return this; }
    inline const Adjust8Value& operator*() const { return *this; }
    inline const Adjust8Value* data() const { return this; }
};
class GeometryBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    GeometryBooleanProperties() :_data(0) {}
    GeometryBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fFillOk;
    bool fFillShadeShapeOK;
    bool fGtextOK;
    bool fLineOK;
    bool f3DOK;
    bool fShadowOK;
    bool unuseda;
    bool unusedb;
    quint8 unused2;
    bool fUsefFillOK;
    bool fUsefFillShadeShapeOK;
    bool fUsefGtextOK;
    bool fUsefLineOK;
    bool fUsef3DOK;
    bool fUsefShadowOK;
    bool unused3a;
    bool unused3b;
    quint8 unused4;
    inline operator const void * () const { return _data; }
    inline const GeometryBooleanProperties* operator->() const { return this; }
    inline const GeometryBooleanProperties& operator*() const { return *this; }
    inline const GeometryBooleanProperties* data() const { return this; }
};
class FillType {
public:
    const char* _data;
    static const quint32 _size;
    FillType() :_data(0) {}
    FillType(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 fillType;
    inline operator const void * () const { return _data; }
    inline const FillType* operator->() const { return this; }
    inline const FillType& operator*() const { return *this; }
    inline const FillType* data() const { return this; }
};
class FillColor {
public:
    const char* _data;
    static const quint32 _size;
    FillColor() :_data(0) {}
    FillColor(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillColor;
    inline operator const void * () const { return _data; }
    inline const FillColor* operator->() const { return this; }
    inline const FillColor& operator*() const { return *this; }
    inline const FillColor* data() const { return this; }
};
class FillOpacity {
public:
    const char* _data;
    static const quint32 _size;
    FillOpacity() :_data(0) {}
    FillOpacity(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillOpacity;
    inline operator const void * () const { return _data; }
    inline const FillOpacity* operator->() const { return this; }
    inline const FillOpacity& operator*() const { return *this; }
    inline const FillOpacity* data() const { return this; }
};
class FillBackColor {
public:
    const char* _data;
    static const quint32 _size;
    FillBackColor() :_data(0) {}
    FillBackColor(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillBackColor;
    inline operator const void * () const { return _data; }
    inline const FillBackColor* operator->() const { return this; }
    inline const FillBackColor& operator*() const { return *this; }
    inline const FillBackColor* data() const { return this; }
};
class FillBackOpacity {
public:
    const char* _data;
    static const quint32 _size;
    FillBackOpacity() :_data(0) {}
    FillBackOpacity(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillBackOpacity;
    inline operator const void * () const { return _data; }
    inline const FillBackOpacity* operator->() const { return this; }
    inline const FillBackOpacity& operator*() const { return *this; }
    inline const FillBackOpacity* data() const { return this; }
};
class FillCrMod {
public:
    const char* _data;
    static const quint32 _size;
    FillCrMod() :_data(0) {}
    FillCrMod(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillCrMod;
    inline operator const void * () const { return _data; }
    inline const FillCrMod* operator->() const { return this; }
    inline const FillCrMod& operator*() const { return *this; }
    inline const FillCrMod* data() const { return this; }
};
class FillBlip {
public:
    const char* _data;
    static const quint32 _size;
    FillBlip() :_data(0) {}
    FillBlip(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 fillBlip;
    inline operator const void * () const { return _data; }
    inline const FillBlip* operator->() const { return this; }
    inline const FillBlip& operator*() const { return *this; }
    inline const FillBlip* data() const { return this; }
};
class FillBlipName {
public:
    const char* _data;
    static const quint32 _size;
    FillBlipName() :_data(0) {}
    FillBlipName(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 fillBlipName;
    inline operator const void * () const { return _data; }
    inline const FillBlipName* operator->() const { return this; }
    inline const FillBlipName& operator*() const { return *this; }
    inline const FillBlipName* data() const { return this; }
};
class FillBlipFlags {
public:
    const char* _data;
    static const quint32 _size;
    FillBlipFlags() :_data(0) {}
    FillBlipFlags(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 fillBlipFlags;
    inline operator const void * () const { return _data; }
    inline const FillBlipFlags* operator->() const { return this; }
    inline const FillBlipFlags& operator*() const { return *this; }
    inline const FillBlipFlags* data() const { return this; }
};
class FillWidth {
public:
    const char* _data;
    static const quint32 _size;
    FillWidth() :_data(0) {}
    FillWidth(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillWidth;
    inline operator const void * () const { return _data; }
    inline const FillWidth* operator->() const { return this; }
    inline const FillWidth& operator*() const { return *this; }
    inline const FillWidth* data() const { return this; }
};
class FillHeight {
public:
    const char* _data;
    static const quint32 _size;
    FillHeight() :_data(0) {}
    FillHeight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillHeight;
    inline operator const void * () const { return _data; }
    inline const FillHeight* operator->() const { return this; }
    inline const FillHeight& operator*() const { return *this; }
    inline const FillHeight* data() const { return this; }
};
class FillAngle {
public:
    const char* _data;
    static const quint32 _size;
    FillAngle() :_data(0) {}
    FillAngle(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillAngle;
    inline operator const void * () const { return _data; }
    inline const FillAngle* operator->() const { return this; }
    inline const FillAngle& operator*() const { return *this; }
    inline const FillAngle* data() const { return this; }
};
class FillFocus {
public:
    const char* _data;
    static const quint32 _size;
    FillFocus() :_data(0) {}
    FillFocus(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillFocus;
    inline operator const void * () const { return _data; }
    inline const FillFocus* operator->() const { return this; }
    inline const FillFocus& operator*() const { return *this; }
    inline const FillFocus* data() const { return this; }
};
class FillToLeft {
public:
    const char* _data;
    static const quint32 _size;
    FillToLeft() :_data(0) {}
    FillToLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillToLeft;
    inline operator const void * () const { return _data; }
    inline const FillToLeft* operator->() const { return this; }
    inline const FillToLeft& operator*() const { return *this; }
    inline const FillToLeft* data() const { return this; }
};
class FillToTop {
public:
    const char* _data;
    static const quint32 _size;
    FillToTop() :_data(0) {}
    FillToTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillToTop;
    inline operator const void * () const { return _data; }
    inline const FillToTop* operator->() const { return this; }
    inline const FillToTop& operator*() const { return *this; }
    inline const FillToTop* data() const { return this; }
};
class FillToRight {
public:
    const char* _data;
    static const quint32 _size;
    FillToRight() :_data(0) {}
    FillToRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillToRight;
    inline operator const void * () const { return _data; }
    inline const FillToRight* operator->() const { return this; }
    inline const FillToRight& operator*() const { return *this; }
    inline const FillToRight* data() const { return this; }
};
class FillToBottom {
public:
    const char* _data;
    static const quint32 _size;
    FillToBottom() :_data(0) {}
    FillToBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillToBottom;
    inline operator const void * () const { return _data; }
    inline const FillToBottom* operator->() const { return this; }
    inline const FillToBottom& operator*() const { return *this; }
    inline const FillToBottom* data() const { return this; }
};
class FillRectLeft {
public:
    const char* _data;
    static const quint32 _size;
    FillRectLeft() :_data(0) {}
    FillRectLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillRectLeft;
    inline operator const void * () const { return _data; }
    inline const FillRectLeft* operator->() const { return this; }
    inline const FillRectLeft& operator*() const { return *this; }
    inline const FillRectLeft* data() const { return this; }
};
class FillRectTop {
public:
    const char* _data;
    static const quint32 _size;
    FillRectTop() :_data(0) {}
    FillRectTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillRectTop;
    inline operator const void * () const { return _data; }
    inline const FillRectTop* operator->() const { return this; }
    inline const FillRectTop& operator*() const { return *this; }
    inline const FillRectTop* data() const { return this; }
};
class FillRectRight {
public:
    const char* _data;
    static const quint32 _size;
    FillRectRight() :_data(0) {}
    FillRectRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillRectRight;
    inline operator const void * () const { return _data; }
    inline const FillRectRight* operator->() const { return this; }
    inline const FillRectRight& operator*() const { return *this; }
    inline const FillRectRight* data() const { return this; }
};
class FillRectBottom {
public:
    const char* _data;
    static const quint32 _size;
    FillRectBottom() :_data(0) {}
    FillRectBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillRectBottom;
    inline operator const void * () const { return _data; }
    inline const FillRectBottom* operator->() const { return this; }
    inline const FillRectBottom& operator*() const { return *this; }
    inline const FillRectBottom* data() const { return this; }
};
class FillDztype {
public:
    const char* _data;
    static const quint32 _size;
    FillDztype() :_data(0) {}
    FillDztype(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillDztype;
    inline operator const void * () const { return _data; }
    inline const FillDztype* operator->() const { return this; }
    inline const FillDztype& operator*() const { return *this; }
    inline const FillDztype* data() const { return this; }
};
class FillShadePreset {
public:
    const char* _data;
    static const quint32 _size;
    FillShadePreset() :_data(0) {}
    FillShadePreset(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 fillShadePreset;
    inline operator const void * () const { return _data; }
    inline const FillShadePreset* operator->() const { return this; }
    inline const FillShadePreset& operator*() const { return *this; }
    inline const FillShadePreset* data() const { return this; }
};
class FillShadeColors {
public:
    const char* _data;
    static const quint32 _size;
    FillShadeColors() :_data(0) {}
    FillShadeColors(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 fillShadeColors;
    inline operator const void * () const { return _data; }
    inline const FillShadeColors* operator->() const { return this; }
    inline const FillShadeColors& operator*() const { return *this; }
    inline const FillShadeColors* data() const { return this; }
};
class FillOriginX {
public:
    const char* _data;
    static const quint32 _size;
    FillOriginX() :_data(0) {}
    FillOriginX(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillOriginX;
    inline operator const void * () const { return _data; }
    inline const FillOriginX* operator->() const { return this; }
    inline const FillOriginX& operator*() const { return *this; }
    inline const FillOriginX* data() const { return this; }
};
class FillOriginY {
public:
    const char* _data;
    static const quint32 _size;
    FillOriginY() :_data(0) {}
    FillOriginY(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillOriginY;
    inline operator const void * () const { return _data; }
    inline const FillOriginY* operator->() const { return this; }
    inline const FillOriginY& operator*() const { return *this; }
    inline const FillOriginY* data() const { return this; }
};
class FillShapeOriginX {
public:
    const char* _data;
    static const quint32 _size;
    FillShapeOriginX() :_data(0) {}
    FillShapeOriginX(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillShapeOriginX;
    inline operator const void * () const { return _data; }
    inline const FillShapeOriginX* operator->() const { return this; }
    inline const FillShapeOriginX& operator*() const { return *this; }
    inline const FillShapeOriginX* data() const { return this; }
};
class FillShapeOriginY {
public:
    const char* _data;
    static const quint32 _size;
    FillShapeOriginY() :_data(0) {}
    FillShapeOriginY(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint fillShapeOriginY;
    inline operator const void * () const { return _data; }
    inline const FillShapeOriginY* operator->() const { return this; }
    inline const FillShapeOriginY& operator*() const { return *this; }
    inline const FillShapeOriginY* data() const { return this; }
};
class FillColorExt {
public:
    const char* _data;
    static const quint32 _size;
    FillColorExt() :_data(0) {}
    FillColorExt(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillColorExt;
    inline operator const void * () const { return _data; }
    inline const FillColorExt* operator->() const { return this; }
    inline const FillColorExt& operator*() const { return *this; }
    inline const FillColorExt* data() const { return this; }
};
class FillBackColorExt {
public:
    const char* _data;
    static const quint32 _size;
    FillBackColorExt() :_data(0) {}
    FillBackColorExt(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF fillBackColorExt;
    inline operator const void * () const { return _data; }
    inline const FillBackColorExt* operator->() const { return this; }
    inline const FillBackColorExt& operator*() const { return *this; }
    inline const FillBackColorExt* data() const { return this; }
};
class FillStyleBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    FillStyleBooleanProperties() :_data(0) {}
    FillStyleBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fNoFillHitTest;
    bool fillUseRect;
    bool fillShape;
    bool fHitTestFill;
    bool fFilled;
    bool fUseShapeAnchor;
    bool fRecolorFillAsPicture;
    bool unused1a;
    quint8 unused1b;
    bool fUseNoFillHitTest;
    bool fUseFillUseRect;
    bool fUseFillShape;
    bool fUseHitTestFill;
    bool fUseFilled;
    bool fUseUseShapeAnchor;
    bool fUsefRecolorFillAsPicture;
    bool unused2a;
    quint8 unused2b;
    inline operator const void * () const { return _data; }
    inline const FillStyleBooleanProperties* operator->() const { return this; }
    inline const FillStyleBooleanProperties& operator*() const { return *this; }
    inline const FillStyleBooleanProperties* data() const { return this; }
};
class LineColor {
public:
    const char* _data;
    static const quint32 _size;
    LineColor() :_data(0) {}
    LineColor(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF lineColor;
    inline operator const void * () const { return _data; }
    inline const LineColor* operator->() const { return this; }
    inline const LineColor& operator*() const { return *this; }
    inline const LineColor* data() const { return this; }
};
class LineOpacity {
public:
    const char* _data;
    static const quint32 _size;
    LineOpacity() :_data(0) {}
    LineOpacity(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 lineOpacity;
    inline operator const void * () const { return _data; }
    inline const LineOpacity* operator->() const { return this; }
    inline const LineOpacity& operator*() const { return *this; }
    inline const LineOpacity* data() const { return this; }
};
class LineBackColor {
public:
    const char* _data;
    static const quint32 _size;
    LineBackColor() :_data(0) {}
    LineBackColor(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF lineBackColor;
    inline operator const void * () const { return _data; }
    inline const LineBackColor* operator->() const { return this; }
    inline const LineBackColor& operator*() const { return *this; }
    inline const LineBackColor* data() const { return this; }
};
class LineFillBlip {
public:
    const char* _data;
    static const quint32 _size;
    LineFillBlip() :_data(0) {}
    LineFillBlip(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineFillBlip;
    inline operator const void * () const { return _data; }
    inline const LineFillBlip* operator->() const { return this; }
    inline const LineFillBlip& operator*() const { return *this; }
    inline const LineFillBlip* data() const { return this; }
};
class LineWidth {
public:
    const char* _data;
    static const quint32 _size;
    LineWidth() :_data(0) {}
    LineWidth(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineWidth;
    inline operator const void * () const { return _data; }
    inline const LineWidth* operator->() const { return this; }
    inline const LineWidth& operator*() const { return *this; }
    inline const LineWidth* data() const { return this; }
};
class LineStyle {
public:
    const char* _data;
    static const quint32 _size;
    LineStyle() :_data(0) {}
    LineStyle(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineStyle;
    inline operator const void * () const { return _data; }
    inline const LineStyle* operator->() const { return this; }
    inline const LineStyle& operator*() const { return *this; }
    inline const LineStyle* data() const { return this; }
};
class LineDashing {
public:
    const char* _data;
    static const quint32 _size;
    LineDashing() :_data(0) {}
    LineDashing(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineDashing;
    inline operator const void * () const { return _data; }
    inline const LineDashing* operator->() const { return this; }
    inline const LineDashing& operator*() const { return *this; }
    inline const LineDashing* data() const { return this; }
};
class LineStartArrowhead {
public:
    const char* _data;
    static const quint32 _size;
    LineStartArrowhead() :_data(0) {}
    LineStartArrowhead(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowhead;
    inline operator const void * () const { return _data; }
    inline const LineStartArrowhead* operator->() const { return this; }
    inline const LineStartArrowhead& operator*() const { return *this; }
    inline const LineStartArrowhead* data() const { return this; }
};
class LineEndArrowhead {
public:
    const char* _data;
    static const quint32 _size;
    LineEndArrowhead() :_data(0) {}
    LineEndArrowhead(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowhead;
    inline operator const void * () const { return _data; }
    inline const LineEndArrowhead* operator->() const { return this; }
    inline const LineEndArrowhead& operator*() const { return *this; }
    inline const LineEndArrowhead* data() const { return this; }
};
class LineStartArrowWidth {
public:
    const char* _data;
    static const quint32 _size;
    LineStartArrowWidth() :_data(0) {}
    LineStartArrowWidth(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowWidth;
    inline operator const void * () const { return _data; }
    inline const LineStartArrowWidth* operator->() const { return this; }
    inline const LineStartArrowWidth& operator*() const { return *this; }
    inline const LineStartArrowWidth* data() const { return this; }
};
class LineStartArrowLength {
public:
    const char* _data;
    static const quint32 _size;
    LineStartArrowLength() :_data(0) {}
    LineStartArrowLength(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineStartArrowLength;
    inline operator const void * () const { return _data; }
    inline const LineStartArrowLength* operator->() const { return this; }
    inline const LineStartArrowLength& operator*() const { return *this; }
    inline const LineStartArrowLength* data() const { return this; }
};
class LineEndArrowWidth {
public:
    const char* _data;
    static const quint32 _size;
    LineEndArrowWidth() :_data(0) {}
    LineEndArrowWidth(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowWidth;
    inline operator const void * () const { return _data; }
    inline const LineEndArrowWidth* operator->() const { return this; }
    inline const LineEndArrowWidth& operator*() const { return *this; }
    inline const LineEndArrowWidth* data() const { return this; }
};
class LineEndArrowLength {
public:
    const char* _data;
    static const quint32 _size;
    LineEndArrowLength() :_data(0) {}
    LineEndArrowLength(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineEndArrowLength;
    inline operator const void * () const { return _data; }
    inline const LineEndArrowLength* operator->() const { return this; }
    inline const LineEndArrowLength& operator*() const { return *this; }
    inline const LineEndArrowLength* data() const { return this; }
};
class LineJoinStyle {
public:
    const char* _data;
    static const quint32 _size;
    LineJoinStyle() :_data(0) {}
    LineJoinStyle(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lineJoinStyle;
    inline operator const void * () const { return _data; }
    inline const LineJoinStyle* operator->() const { return this; }
    inline const LineJoinStyle& operator*() const { return *this; }
    inline const LineJoinStyle* data() const { return this; }
};
class LineStyleBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    LineStyleBooleanProperties() :_data(0) {}
    LineStyleBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fNoLineDrawDash;
    bool fLineFillShape;
    bool fHitTestLine;
    bool fLine;
    bool fArrowHeadsOK;
    bool fInsetPenOK;
    bool fInsetPen;
    bool reserved1;
    bool reserved2;
    bool fLineOpaqueBackColor;
    quint8 unused1;
    bool fUseNoLineDrawDash;
    bool fUseLineFillShape;
    bool fUseHitTestLine;
    bool fUsefLine;
    bool fUsefArrowHeadsOK;
    bool fUseInsetPenOK;
    bool fUseInsetPen;
    bool unused2;
    bool unused3;
    bool fUsefLineOpaqueBackColor;
    quint8 unused4;
    inline operator const void * () const { return _data; }
    inline const LineStyleBooleanProperties* operator->() const { return this; }
    inline const LineStyleBooleanProperties& operator*() const { return *this; }
    inline const LineStyleBooleanProperties* data() const { return this; }
};
class ShadowType {
public:
    const char* _data;
    static const quint32 _size;
    ShadowType() :_data(0) {}
    ShadowType(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 shadowType;
    inline operator const void * () const { return _data; }
    inline const ShadowType* operator->() const { return this; }
    inline const ShadowType& operator*() const { return *this; }
    inline const ShadowType* data() const { return this; }
};
class ShadowColor {
public:
    const char* _data;
    static const quint32 _size;
    ShadowColor() :_data(0) {}
    ShadowColor(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    OfficeArtCOLORREF shadowColor;
    inline operator const void * () const { return _data; }
    inline const ShadowColor* operator->() const { return this; }
    inline const ShadowColor& operator*() const { return *this; }
    inline const ShadowColor* data() const { return this; }
};
class ShadowOpacity {
public:
    const char* _data;
    static const quint32 _size;
    ShadowOpacity() :_data(0) {}
    ShadowOpacity(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    FixedPoint shadowOpacity;
    inline operator const void * () const { return _data; }
    inline const ShadowOpacity* operator->() const { return this; }
    inline const ShadowOpacity& operator*() const { return *this; }
    inline const ShadowOpacity* data() const { return this; }
};
class ShadowOffsetX {
public:
    const char* _data;
    static const quint32 _size;
    ShadowOffsetX() :_data(0) {}
    ShadowOffsetX(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 shadowOffsetX;
    inline operator const void * () const { return _data; }
    inline const ShadowOffsetX* operator->() const { return this; }
    inline const ShadowOffsetX& operator*() const { return *this; }
    inline const ShadowOffsetX* data() const { return this; }
};
class ShadowOffsetY {
public:
    const char* _data;
    static const quint32 _size;
    ShadowOffsetY() :_data(0) {}
    ShadowOffsetY(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 shadowOffsetY;
    inline operator const void * () const { return _data; }
    inline const ShadowOffsetY* operator->() const { return this; }
    inline const ShadowOffsetY& operator*() const { return *this; }
    inline const ShadowOffsetY* data() const { return this; }
};
class ShadowStyleBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    ShadowStyleBooleanProperties() :_data(0) {}
    ShadowStyleBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fShadowObscured;
    bool fShadow;
    quint16 unused1;
    bool fUsefShadowObscured;
    bool fUsefShadow;
    quint16 unused2;
    inline operator const void * () const { return _data; }
    inline const ShadowStyleBooleanProperties* operator->() const { return this; }
    inline const ShadowStyleBooleanProperties& operator*() const { return *this; }
    inline const ShadowStyleBooleanProperties* data() const { return this; }
};
class HspMaster {
public:
    const char* _data;
    static const quint32 _size;
    HspMaster() :_data(0) {}
    HspMaster(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 hspMaster;
    inline operator const void * () const { return _data; }
    inline const HspMaster* operator->() const { return this; }
    inline const HspMaster& operator*() const { return *this; }
    inline const HspMaster* data() const { return this; }
};
class Cxstyle {
public:
    const char* _data;
    static const quint32 _size;
    Cxstyle() :_data(0) {}
    Cxstyle(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 cxstyle;
    inline operator const void * () const { return _data; }
    inline const Cxstyle* operator->() const { return this; }
    inline const Cxstyle& operator*() const { return *this; }
    inline const Cxstyle* data() const { return this; }
};
class BWMode {
public:
    const char* _data;
    static const quint32 _size;
    BWMode() :_data(0) {}
    BWMode(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 bWMode;
    inline operator const void * () const { return _data; }
    inline const BWMode* operator->() const { return this; }
    inline const BWMode& operator*() const { return *this; }
    inline const BWMode* data() const { return this; }
};
class ShapeBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    ShapeBooleanProperties() :_data(0) {}
    ShapeBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fBackground;
    bool reserved1;
    bool fInitiator;
    bool fLockShapeType;
    bool fPreferRelativeResize;
    bool fOleIcon;
    bool fFlipVOverride;
    bool fFlipHOverride;
    bool fPolicyBarcode;
    bool fPolicyLabel;
    bool unused1;
    bool unused2;
    quint8 unused3;
    bool fUsefBackground;
    bool unused4;
    bool fUsefInitiator;
    bool fUsefLockShapeType;
    bool fusePreferrelativeResize;
    bool fUsefOleIcon;
    bool fUsefFlipVOverride;
    bool fUsefFlipHOverride;
    bool fUsefPolicyBarcode;
    bool fUsefPolicyLabel;
    bool unused5;
    bool unused6;
    quint8 unused7;
    inline operator const void * () const { return _data; }
    inline const ShapeBooleanProperties* operator->() const { return this; }
    inline const ShapeBooleanProperties& operator*() const { return *this; }
    inline const ShapeBooleanProperties* data() const { return this; }
};
class DxyCalloutGap {
public:
    const char* _data;
    static const quint32 _size;
    DxyCalloutGap() :_data(0) {}
    DxyCalloutGap(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 dxyCalloutGap;
    inline operator const void * () const { return _data; }
    inline const DxyCalloutGap* operator->() const { return this; }
    inline const DxyCalloutGap& operator*() const { return *this; }
    inline const DxyCalloutGap* data() const { return this; }
};
class Spcoa {
public:
    const char* _data;
    static const quint32 _size;
    Spcoa() :_data(0) {}
    Spcoa(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 spcoa;
    inline operator const void * () const { return _data; }
    inline const Spcoa* operator->() const { return this; }
    inline const Spcoa& operator*() const { return *this; }
    inline const Spcoa* data() const { return this; }
};
class Spcod {
public:
    const char* _data;
    static const quint32 _size;
    Spcod() :_data(0) {}
    Spcod(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 spcod;
    inline operator const void * () const { return _data; }
    inline const Spcod* operator->() const { return this; }
    inline const Spcod& operator*() const { return *this; }
    inline const Spcod* data() const { return this; }
};
class DxyCalloutDropSpecified {
public:
    const char* _data;
    static const quint32 _size;
    DxyCalloutDropSpecified() :_data(0) {}
    DxyCalloutDropSpecified(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 dxyCalloutDropSpecified;
    inline operator const void * () const { return _data; }
    inline const DxyCalloutDropSpecified* operator->() const { return this; }
    inline const DxyCalloutDropSpecified& operator*() const { return *this; }
    inline const DxyCalloutDropSpecified* data() const { return this; }
};
class DxyCalloutLengthSpecified {
public:
    const char* _data;
    static const quint32 _size;
    DxyCalloutLengthSpecified() :_data(0) {}
    DxyCalloutLengthSpecified(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 dxyCalloutLengthSpecified;
    inline operator const void * () const { return _data; }
    inline const DxyCalloutLengthSpecified* operator->() const { return this; }
    inline const DxyCalloutLengthSpecified& operator*() const { return *this; }
    inline const DxyCalloutLengthSpecified* data() const { return this; }
};
class CalloutBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    CalloutBooleanProperties() :_data(0) {}
    CalloutBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fCalloutLengthSpecified;
    bool fCalloutDropAuto;
    bool fCalloutMinusY;
    bool fCalloutMinusX;
    bool fCalloutTextBorder;
    bool fCalloutAccentBar;
    bool fCallout;
    bool unused1a;
    quint8 unused1b;
    bool fUsefCalloutLengthSpecified;
    bool fUsefCalloutDropAuto;
    bool fUsefCalloutMinusY;
    bool fUsefCalloutMinusX;
    bool fUsefCalloutTextBorder;
    bool fUsefCalloutAccentBar;
    bool fUsefCallout;
    bool unused2a;
    quint8 unused2b;
    inline operator const void * () const { return _data; }
    inline const CalloutBooleanProperties* operator->() const { return this; }
    inline const CalloutBooleanProperties& operator*() const { return *this; }
    inline const CalloutBooleanProperties* data() const { return this; }
};
class PWrapPolygonVertices {
public:
    const char* _data;
    static const quint32 _size;
    PWrapPolygonVertices() :_data(0) {}
    PWrapPolygonVertices(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pWrapPolygonVertices;
    inline operator const void * () const { return _data; }
    inline const PWrapPolygonVertices* operator->() const { return this; }
    inline const PWrapPolygonVertices& operator*() const { return *this; }
    inline const PWrapPolygonVertices* data() const { return this; }
};
class DxWrapDistLeft {
public:
    const char* _data;
    static const quint32 _size;
    DxWrapDistLeft() :_data(0) {}
    DxWrapDistLeft(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxWrapDistLeft;
    inline operator const void * () const { return _data; }
    inline const DxWrapDistLeft* operator->() const { return this; }
    inline const DxWrapDistLeft& operator*() const { return *this; }
    inline const DxWrapDistLeft* data() const { return this; }
};
class DyWrapDistTop {
public:
    const char* _data;
    static const quint32 _size;
    DyWrapDistTop() :_data(0) {}
    DyWrapDistTop(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dyWrapDistTop;
    inline operator const void * () const { return _data; }
    inline const DyWrapDistTop* operator->() const { return this; }
    inline const DyWrapDistTop& operator*() const { return *this; }
    inline const DyWrapDistTop* data() const { return this; }
};
class DxWrapDistRight {
public:
    const char* _data;
    static const quint32 _size;
    DxWrapDistRight() :_data(0) {}
    DxWrapDistRight(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxWrapDistRight;
    inline operator const void * () const { return _data; }
    inline const DxWrapDistRight* operator->() const { return this; }
    inline const DxWrapDistRight& operator*() const { return *this; }
    inline const DxWrapDistRight* data() const { return this; }
};
class DyWrapDistBottom {
public:
    const char* _data;
    static const quint32 _size;
    DyWrapDistBottom() :_data(0) {}
    DyWrapDistBottom(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dyWrapDistBottom;
    inline operator const void * () const { return _data; }
    inline const DyWrapDistBottom* operator->() const { return this; }
    inline const DyWrapDistBottom& operator*() const { return *this; }
    inline const DyWrapDistBottom* data() const { return this; }
};
class LidRegroup {
public:
    const char* _data;
    static const quint32 _size;
    LidRegroup() :_data(0) {}
    LidRegroup(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 lidRegroup;
    inline operator const void * () const { return _data; }
    inline const LidRegroup* operator->() const { return this; }
    inline const LidRegroup& operator*() const { return *this; }
    inline const LidRegroup* data() const { return this; }
};
class PosH {
public:
    const char* _data;
    static const quint32 _size;
    PosH() :_data(0) {}
    PosH(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 posH;
    inline operator const void * () const { return _data; }
    inline const PosH* operator->() const { return this; }
    inline const PosH& operator*() const { return *this; }
    inline const PosH* data() const { return this; }
};
class PosRelH {
public:
    const char* _data;
    static const quint32 _size;
    PosRelH() :_data(0) {}
    PosRelH(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 posRelH;
    inline operator const void * () const { return _data; }
    inline const PosRelH* operator->() const { return this; }
    inline const PosRelH& operator*() const { return *this; }
    inline const PosRelH* data() const { return this; }
};
class PosV {
public:
    const char* _data;
    static const quint32 _size;
    PosV() :_data(0) {}
    PosV(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 posV;
    inline operator const void * () const { return _data; }
    inline const PosV* operator->() const { return this; }
    inline const PosV& operator*() const { return *this; }
    inline const PosV* data() const { return this; }
};
class PosRelV {
public:
    const char* _data;
    static const quint32 _size;
    PosRelV() :_data(0) {}
    PosRelV(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 posRelV;
    inline operator const void * () const { return _data; }
    inline const PosRelV* operator->() const { return this; }
    inline const PosRelV& operator*() const { return *this; }
    inline const PosRelV* data() const { return this; }
};
class PctHR {
public:
    const char* _data;
    static const quint32 _size;
    PctHR() :_data(0) {}
    PctHR(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 pctHR;
    inline operator const void * () const { return _data; }
    inline const PctHR* operator->() const { return this; }
    inline const PctHR& operator*() const { return *this; }
    inline const PctHR* data() const { return this; }
};
class AlignHR {
public:
    const char* _data;
    static const quint32 _size;
    AlignHR() :_data(0) {}
    AlignHR(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    quint32 alignHR;
    inline operator const void * () const { return _data; }
    inline const AlignHR* operator->() const { return this; }
    inline const AlignHR& operator*() const { return *this; }
    inline const AlignHR* data() const { return this; }
};
class DxHeightHR {
public:
    const char* _data;
    static const quint32 _size;
    DxHeightHR() :_data(0) {}
    DxHeightHR(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxHeightHR;
    inline operator const void * () const { return _data; }
    inline const DxHeightHR* operator->() const { return this; }
    inline const DxHeightHR& operator*() const { return *this; }
    inline const DxHeightHR* data() const { return this; }
};
class DxWidthHR {
public:
    const char* _data;
    static const quint32 _size;
    DxWidthHR() :_data(0) {}
    DxWidthHR(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 dxWidthHR;
    inline operator const void * () const { return _data; }
    inline const DxWidthHR* operator->() const { return this; }
    inline const DxWidthHR& operator*() const { return *this; }
    inline const DxWidthHR* data() const { return this; }
};
class GroupShapeBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    GroupShapeBooleanProperties() :_data(0) {}
    GroupShapeBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fPrint;
    bool fHidden;
    bool fOneD;
    bool fIsButton;
    bool fOnDblClickNotify;
    bool fBehindDocument;
    bool fEditedWrap;
    bool fScriptAnchor;
    bool fReallyHidden;
    bool fAllowOverlap;
    bool fUserDrawn;
    bool fHorizRule;
    bool fNoshadeHR;
    bool fStandardHR;
    bool fIsBullet;
    bool fLayoutInCell;
    bool fUsefPrint;
    bool fUsefHidden;
    bool fUsefOneD;
    bool fUsefIsButton;
    bool fUsefOnDblClickNotify;
    bool fUsefBehindDocument;
    bool fUsefEditedWrap;
    bool fUsefScriptAnchor;
    bool fUsefReallyHidden;
    bool fUsefAllowOverlap;
    bool fUsefUserDrawn;
    bool fUsefHorizRule;
    bool fUsefNoshadeHR;
    bool fUsefStandardHR;
    bool fUsefIsBullet;
    bool fUsefLayoutInCell;
    inline operator const void * () const { return _data; }
    inline const GroupShapeBooleanProperties* operator->() const { return this; }
    inline const GroupShapeBooleanProperties& operator*() const { return *this; }
    inline const GroupShapeBooleanProperties* data() const { return this; }
};
class WzFillId {
public:
    const char* _data;
    static const quint32 _size;
    WzFillId() :_data(0) {}
    WzFillId(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 wzFillId;
    inline operator const void * () const { return _data; }
    inline const WzFillId* operator->() const { return this; }
    inline const WzFillId& operator*() const { return *this; }
    inline const WzFillId* data() const { return this; }
};
class DiagramBooleanProperties {
public:
    const char* _data;
    static const quint32 _size;
    DiagramBooleanProperties() :_data(0) {}
    DiagramBooleanProperties(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    bool fPseudoInline;
    bool fDoLayout;
    bool fReverse;
    bool fDoFormat;
    bool unused1;
    bool unused2;
    quint8 unused3a;
    quint8 unused3b;
    bool fUsefPseudoInline;
    bool fUsefDoLayout;
    bool fUsefReverse;
    bool fUsefDoFormat;
    bool unused4;
    bool unused5;
    quint8 unused6a;
    quint8 unused6b;
    inline operator const void * () const { return _data; }
    inline const DiagramBooleanProperties* operator->() const { return this; }
    inline const DiagramBooleanProperties& operator*() const { return *this; }
    inline const DiagramBooleanProperties* data() const { return this; }
};
class PptOfficeArtClientAnchor {
public:
    const char* _data;
    quint32 _size;
    PptOfficeArtClientAnchor() :_data(0), _size(0) {}
    explicit PptOfficeArtClientAnchor(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    SmallRectStruct rect1;
    RectStruct rect2;
    inline operator const void * () const { return _data; }
    inline const PptOfficeArtClientAnchor* operator->() const { return this; }
    inline const PptOfficeArtClientAnchor& operator*() const { return *this; }
    inline const PptOfficeArtClientAnchor* data() const { return this; }
};
class AnimationInfoContainer {
public:
    const char* _data;
    quint32 _size;
    AnimationInfoContainer() :_data(0), _size(0) {}
    explicit AnimationInfoContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    AnimationInfoAtom animationAtom;
    SoundContainer animationSound;
    inline operator const void * () const { return _data; }
    inline const AnimationInfoContainer* operator->() const { return this; }
    inline const AnimationInfoContainer& operator*() const { return *this; }
    inline const AnimationInfoContainer* data() const { return this; }
};
class MouseClickInteractiveInfoContainer {
public:
    const char* _data;
    quint32 _size;
    MouseClickInteractiveInfoContainer() :_data(0), _size(0) {}
    explicit MouseClickInteractiveInfoContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    InteractiveInfoAtom interactiveInfoAtom;
    MacroNameAtom macroNameAtom;
    inline operator const void * () const { return _data; }
    inline const MouseClickInteractiveInfoContainer* operator->() const { return this; }
    inline const MouseClickInteractiveInfoContainer& operator*() const { return *this; }
    inline const MouseClickInteractiveInfoContainer* data() const { return this; }
};
class MouseOverInteractiveInfoContainer {
public:
    const char* _data;
    quint32 _size;
    MouseOverInteractiveInfoContainer() :_data(0), _size(0) {}
    explicit MouseOverInteractiveInfoContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    InteractiveInfoAtom interactiveInfoAtom;
    MacroNameAtom macroNameAtom;
    inline operator const void * () const { return _data; }
    inline const MouseOverInteractiveInfoContainer* operator->() const { return this; }
    inline const MouseOverInteractiveInfoContainer& operator*() const { return *this; }
    inline const MouseOverInteractiveInfoContainer* data() const { return this; }
};
class ShapeClientRoundtripDataSubcontainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    ShapeClientRoundtripDataSubcontainerOrAtom() :_data(0), _size(0) {}
    explicit ShapeClientRoundtripDataSubcontainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class ShapeClientRoundtripDataSubcontainerOrAtom;
    private:
        ShapeProgsTagContainer _ShapeProgsTagContainer;
        RoundTripNewPlaceHolderId12Atom _RoundTripNewPlaceHolderId12Atom;
        RoundTripShapeId12Atom _RoundTripShapeId12Atom;
        RoundTripHFPlaceholder12Atom _RoundTripHFPlaceholder12Atom;
        RoundTripShapeCheckSumForCustomLayouts12Atom _RoundTripShapeCheckSumForCustomLayouts12Atom;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const ShapeClientRoundtripDataSubcontainerOrAtom* operator->() const { return this; }
    inline const ShapeClientRoundtripDataSubcontainerOrAtom& operator*() const { return *this; }
    inline const ShapeClientRoundtripDataSubcontainerOrAtom* data() const { return this; }
};
class ShapeProgBinaryTagSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    ShapeProgBinaryTagSubContainerOrAtom() :_data(0), _size(0) {}
    explicit ShapeProgBinaryTagSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class ShapeProgBinaryTagSubContainerOrAtom;
    private:
        PP9ShapeBinaryTagExtension _PP9ShapeBinaryTagExtension;
        PP10ShapeBinaryTagExtension _PP10ShapeBinaryTagExtension;
        PP11ShapeBinaryTagExtension _PP11ShapeBinaryTagExtension;
        UnknownBinaryTag _UnknownBinaryTag;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const ShapeProgBinaryTagSubContainerOrAtom* operator->() const { return this; }
    inline const ShapeProgBinaryTagSubContainerOrAtom& operator*() const { return *this; }
    inline const ShapeProgBinaryTagSubContainerOrAtom* data() const { return this; }
};
class OfficeArtClientTextBox {
public:
    const char* _data;
    quint32 _size;
    OfficeArtClientTextBox() :_data(0), _size(0) {}
    explicit OfficeArtClientTextBox(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtClientTextBox;
    private:
        XlsOfficeArtClientTextBox _XlsOfficeArtClientTextBox;
        DocOfficeArtClientTextBox _DocOfficeArtClientTextBox;
        PptOfficeArtClientTextBox _PptOfficeArtClientTextBox;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtClientTextBox* operator->() const { return this; }
    inline const OfficeArtClientTextBox& operator*() const { return *this; }
    inline const OfficeArtClientTextBox* data() const { return this; }
};
class TextRulerAtom {
public:
    const char* _data;
    quint32 _size;
    TextRulerAtom() :_data(0), _size(0) {}
    explicit TextRulerAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextRuler textRuler;
    inline operator const void * () const { return _data; }
    inline const TextRulerAtom* operator->() const { return this; }
    inline const TextRulerAtom& operator*() const { return *this; }
    inline const TextRulerAtom* data() const { return this; }
};
class OfficeArtFOPTE {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFOPTE() :_data(0) {}
    OfficeArtFOPTE(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    OfficeArtFOPTEOPID opid;
    qint32 op;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFOPTE* operator->() const { return this; }
    inline const OfficeArtFOPTE& operator*() const { return *this; }
    inline const OfficeArtFOPTE* data() const { return this; }
};
class Fib {
public:
    const char* _data;
    quint32 _size;
    Fib() :_data(0), _size(0) {}
    explicit Fib(const char* data, const quint32 maxsize);
    FibBase base;
    quint16 csw;
    FibRgW97 fibRgW;
    quint16 cslw;
    FibRgLw97 fibRgLw;
    quint16 cbRgFcLcb;
    FibRgFcLcb97 fibRgFcLcbBlob;
    FibRgFcLcb2000 fibRgFcLcbBlob2;
    FibRgFcLcb2002 fibRgFcLcbBlob3;
    quint16 cswNew;
    MSOCastArray<char> fibRgCswNew;
    MSOCastArray<char> trail;
    inline operator const void * () const { return _data; }
    inline const Fib* operator->() const { return this; }
    inline const Fib& operator*() const { return *this; }
    inline const Fib* data() const { return this; }
};
class STSH {
public:
    const char* _data;
    quint32 _size;
    STSH() :_data(0), _size(0) {}
    explicit STSH(const char* data, const quint32 maxsize);
    LPStshi lpstshi;
    MSOArray<LPStd> rglpstd;
    inline operator const void * () const { return _data; }
    inline const STSH* operator->() const { return this; }
    inline const STSH& operator*() const { return *this; }
    inline const STSH* data() const { return this; }
};
class Clx {
public:
    const char* _data;
    quint32 _size;
    Clx() :_data(0), _size(0) {}
    explicit Clx(const char* data, const quint32 maxsize);
    MSOArray<Pcr> RgPrc;
    Pcdt pcdt;
    inline operator const void * () const { return _data; }
    inline const Clx* operator->() const { return this; }
    inline const Clx& operator*() const { return *this; }
    inline const Clx* data() const { return this; }
};
class Pcr {
public:
    const char* _data;
    quint32 _size;
    Pcr() :_data(0), _size(0) {}
    explicit Pcr(const char* data, const quint32 maxsize);
    quint8 clxt;
    PrcData prcData;
    inline operator const void * () const { return _data; }
    inline const Pcr* operator->() const { return this; }
    inline const Pcr& operator*() const { return *this; }
    inline const Pcr* data() const { return this; }
};
class Prm {
public:
    const char* _data;
    static const quint32 _size;
    Prm() :_data(0) {}
    Prm(const char* data, quint32/*ignored*/ = 0);// 2 bytes
    class C_prm {
    friend class Prm;
    private:
        Prm0 _Prm0;
        Prm1 _Prm1;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_prm prm;
    inline operator const void * () const { return _data; }
    inline const Prm* operator->() const { return this; }
    inline const Prm& operator*() const { return *this; }
    inline const Prm* data() const { return this; }
};
class OfficeArtBlipEMF {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipEMF() :_data(0), _size(0) {}
    explicit OfficeArtBlipEMF(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipEMF* operator->() const { return this; }
    inline const OfficeArtBlipEMF& operator*() const { return *this; }
    inline const OfficeArtBlipEMF* data() const { return this; }
};
class OfficeArtBlipWMF {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipWMF() :_data(0), _size(0) {}
    explicit OfficeArtBlipWMF(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipWMF* operator->() const { return this; }
    inline const OfficeArtBlipWMF& operator*() const { return *this; }
    inline const OfficeArtBlipWMF* data() const { return this; }
};
class OfficeArtBlipPICT {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlipPICT() :_data(0), _size(0) {}
    explicit OfficeArtBlipPICT(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    MSOCastArray<char> rgbUid1;
    MSOCastArray<char> rgbUid2;
    OfficeArtMetafileHeader metafileHeader;
    MSOCastArray<char> BLIPFileData;
    bool _has_rgbUid2;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlipPICT* operator->() const { return this; }
    inline const OfficeArtBlipPICT& operator*() const { return *this; }
    inline const OfficeArtBlipPICT* data() const { return this; }
};
class OfficeArtBlip {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBlip() :_data(0), _size(0) {}
    explicit OfficeArtBlip(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtBlip;
    private:
        OfficeArtBlipEMF _OfficeArtBlipEMF;
        OfficeArtBlipWMF _OfficeArtBlipWMF;
        OfficeArtBlipPICT _OfficeArtBlipPICT;
        OfficeArtBlipJPEG _OfficeArtBlipJPEG;
        OfficeArtBlipPNG _OfficeArtBlipPNG;
        OfficeArtBlipDIB _OfficeArtBlipDIB;
        OfficeArtBlipTIFF _OfficeArtBlipTIFF;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBlip* operator->() const { return this; }
    inline const OfficeArtBlip& operator*() const { return *this; }
    inline const OfficeArtBlip* data() const { return this; }
};
class ZoomViewInfoAtom {
public:
    const char* _data;
    static const quint32 _size;
    ZoomViewInfoAtom() :_data(0) {}
    ZoomViewInfoAtom(const char* data, quint32/*ignored*/ = 0);// 60 bytes
    RecordHeader rh;
    ScalingStruct curScale;
    MSOCastArray<char> unused1;
    PointStruct origin;
    quint8 fUseVarScale;
    quint8 fDraftMode;
    quint16 unused2;
    inline operator const void * () const { return _data; }
    inline const ZoomViewInfoAtom* operator->() const { return this; }
    inline const ZoomViewInfoAtom& operator*() const { return *this; }
    inline const ZoomViewInfoAtom* data() const { return this; }
};
class PP9DocBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP9DocBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP9DocBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> tagName;
    RecordHeader rhData;
    MSOArray<TextMasterStyle9Atom> rgTextMasterStyle9;
    BlipCollection9Container blipCollectionContainer;
    TextDefaults9Atom textDefaultsAtom;
    Kinsoku9Container kinsokuContainer;
    MSOArray<ExHyperlink9Container> rgExternalHyperlink9;
    PresAdvisorFlags9Atom presAdvisorFlagsAtom;
    EnvelopeData9Atom envelopeDataAtom;
    EnvelopeFlags9Atom envelopeFlagsAtom;
    HTMLDocInfo9Atom htmlDocInfoAtom;
    HTMLPublishInfo9Container htmlPublishInfoAtom;
    MSOArray<BroadcastDocInfo9Container> rgBroadcastDocInfo9;
    OutlineTextProps9Container outlineTextPropsContainer;
    inline operator const void * () const { return _data; }
    inline const PP9DocBinaryTagExtension* operator->() const { return this; }
    inline const PP9DocBinaryTagExtension& operator*() const { return *this; }
    inline const PP9DocBinaryTagExtension* data() const { return this; }
};
class TextMasterStyle9Level {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyle9Level() :_data(0), _size(0) {}
    explicit TextMasterStyle9Level(const char* data, const quint32 maxsize);
    TextPFException9 pf9;
    TextCFException9 cf9;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyle9Level* operator->() const { return this; }
    inline const TextMasterStyle9Level& operator*() const { return *this; }
    inline const TextMasterStyle9Level* data() const { return this; }
};
class StyleTextProp9 {
public:
    const char* _data;
    quint32 _size;
    StyleTextProp9() :_data(0), _size(0) {}
    explicit StyleTextProp9(const char* data, const quint32 maxsize);
    TextPFException9 pf9;
    TextCFException9 cf9;
    TextSIException si;
    inline operator const void * () const { return _data; }
    inline const StyleTextProp9* operator->() const { return this; }
    inline const StyleTextProp9& operator*() const { return *this; }
    inline const StyleTextProp9* data() const { return this; }
};
class PP10DocBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP10DocBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP10DocBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<char> tagName;
    RecordHeader rhData;
    FontCollection10Container fontCollectionContainer;
    MSOArray<TextMasterStyle10Atom> rgTextMasterStyle10;
    TextDefaults10Atom textDefaultsAtom;
    GridSpacing10Atom gridSpacingAtom;
    MSOArray<CommentIndex10Container> rgCommentIndex10;
    FontEmbedFlags10Atom fontEmbedFlagsAtom;
    CopyrightAtom copyrightAtom;
    KeywordsAtom keywordsAtom;
    FilterPrivacyFlags10Atom filterPrivacyFlagsAtom;
    OutlineTextProps10Container outlineTextPropsContainer;
    DocToolbarStates10Atom docToolbarStatesAtom;
    SlideListTable10Container slideListTableContainer;
    DiffTree10Container rgDiffTree10Container;
    ModifyPasswordAtom modifyPasswordAtom;
    PhotoAlbumInfo10Atom photoAlbumInfoAtom;
    inline operator const void * () const { return _data; }
    inline const PP10DocBinaryTagExtension* operator->() const { return this; }
    inline const PP10DocBinaryTagExtension& operator*() const { return *this; }
    inline const PP10DocBinaryTagExtension* data() const { return this; }
};
class TextMasterStyle10Level {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyle10Level() :_data(0), _size(0) {}
    explicit TextMasterStyle10Level(const char* data, const quint32 maxsize);
    TextCFException10 cf10;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyle10Level* operator->() const { return this; }
    inline const TextMasterStyle10Level& operator*() const { return *this; }
    inline const TextMasterStyle10Level* data() const { return this; }
};
class NotesTextViewInfoContainer {
public:
    const char* _data;
    static const quint32 _size;
    NotesTextViewInfoContainer() :_data(0) {}
    NotesTextViewInfoContainer(const char* data, quint32/*ignored*/ = 0);// 68 bytes
    RecordHeader rh;
    ZoomViewInfoAtom zoomViewInfo;
    inline operator const void * () const { return _data; }
    inline const NotesTextViewInfoContainer* operator->() const { return this; }
    inline const NotesTextViewInfoContainer& operator*() const { return *this; }
    inline const NotesTextViewInfoContainer* data() const { return this; }
};
class OutlineViewInfoContainer {
public:
    const char* _data;
    static const quint32 _size;
    OutlineViewInfoContainer() :_data(0) {}
    OutlineViewInfoContainer(const char* data, quint32/*ignored*/ = 0);// 68 bytes
    RecordHeader rh;
    NoZoomViewInfoAtom noZoomViewInfo;
    inline operator const void * () const { return _data; }
    inline const OutlineViewInfoContainer* operator->() const { return this; }
    inline const OutlineViewInfoContainer& operator*() const { return *this; }
    inline const OutlineViewInfoContainer* data() const { return this; }
};
class NormalViewSetInfoContainer {
public:
    const char* _data;
    static const quint32 _size;
    NormalViewSetInfoContainer() :_data(0) {}
    NormalViewSetInfoContainer(const char* data, quint32/*ignored*/ = 0);// 36 bytes
    RecordHeader rh;
    NormalViewSetInfoAtom normalViewSetInfoAtom;
    inline operator const void * () const { return _data; }
    inline const NormalViewSetInfoContainer* operator->() const { return this; }
    inline const NormalViewSetInfoContainer& operator*() const { return *this; }
    inline const NormalViewSetInfoContainer* data() const { return this; }
};
class SlideListWithTextSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    SlideListWithTextSubContainerOrAtom() :_data(0), _size(0) {}
    explicit SlideListWithTextSubContainerOrAtom(const char* data, const quint32 maxsize);
    SlidePersistAtom slidePersistAtom;
    MSOArray<TextContainer> atoms;
    inline operator const void * () const { return _data; }
    inline const SlideListWithTextSubContainerOrAtom* operator->() const { return this; }
    inline const SlideListWithTextSubContainerOrAtom& operator*() const { return *this; }
    inline const SlideListWithTextSubContainerOrAtom* data() const { return this; }
};
class MouseClickTextInfo {
public:
    const char* _data;
    quint32 _size;
    MouseClickTextInfo() :_data(0), _size(0) {}
    explicit MouseClickTextInfo(const char* data, const quint32 maxsize);
    MouseClickInteractiveInfoContainer interactive;
    MouseClickTextInteractiveInfoAtom text;
    inline operator const void * () const { return _data; }
    inline const MouseClickTextInfo* operator->() const { return this; }
    inline const MouseClickTextInfo& operator*() const { return *this; }
    inline const MouseClickTextInfo* data() const { return this; }
};
class MouseOverTextInfo {
public:
    const char* _data;
    quint32 _size;
    MouseOverTextInfo() :_data(0), _size(0) {}
    explicit MouseOverTextInfo(const char* data, const quint32 maxsize);
    MouseOverInteractiveInfoContainer interactive;
    MouseOverTextInteractiveInfoAtom text;
    inline operator const void * () const { return _data; }
    inline const MouseOverTextInfo* operator->() const { return this; }
    inline const MouseOverTextInfo& operator*() const { return *this; }
    inline const MouseOverTextInfo* data() const { return this; }
};
class TextClientDataSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    TextClientDataSubContainerOrAtom() :_data(0), _size(0) {}
    explicit TextClientDataSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class TextClientDataSubContainerOrAtom;
    private:
        OutlineTextRefAtom _OutlineTextRefAtom;
        TextContainer _TextContainer;
        TextRulerAtom _TextRulerAtom;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const TextClientDataSubContainerOrAtom* operator->() const { return this; }
    inline const TextClientDataSubContainerOrAtom& operator*() const { return *this; }
    inline const TextClientDataSubContainerOrAtom* data() const { return this; }
};
class TextPFRun {
public:
    const char* _data;
    quint32 _size;
    TextPFRun() :_data(0), _size(0) {}
    explicit TextPFRun(const char* data, const quint32 maxsize);
    quint32 count;
    quint16 indentLevel;
    TextPFException pf;
    inline operator const void * () const { return _data; }
    inline const TextPFRun* operator->() const { return this; }
    inline const TextPFRun& operator*() const { return *this; }
    inline const TextPFRun* data() const { return this; }
};
class TextCFRun {
public:
    const char* _data;
    quint32 _size;
    TextCFRun() :_data(0), _size(0) {}
    explicit TextCFRun(const char* data, const quint32 maxsize);
    quint32 count;
    TextCFException cf;
    inline operator const void * () const { return _data; }
    inline const TextCFRun* operator->() const { return this; }
    inline const TextCFRun& operator*() const { return *this; }
    inline const TextCFRun* data() const { return this; }
};
class TextCFExceptionAtom {
public:
    const char* _data;
    quint32 _size;
    TextCFExceptionAtom() :_data(0), _size(0) {}
    explicit TextCFExceptionAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextCFException cf;
    inline operator const void * () const { return _data; }
    inline const TextCFExceptionAtom* operator->() const { return this; }
    inline const TextCFExceptionAtom& operator*() const { return *this; }
    inline const TextCFExceptionAtom* data() const { return this; }
};
class DefaultRulerAtom {
public:
    const char* _data;
    quint32 _size;
    DefaultRulerAtom() :_data(0), _size(0) {}
    explicit DefaultRulerAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextRuler defaultTextRuler;
    inline operator const void * () const { return _data; }
    inline const DefaultRulerAtom* operator->() const { return this; }
    inline const DefaultRulerAtom& operator*() const { return *this; }
    inline const DefaultRulerAtom* data() const { return this; }
};
class TextPFExceptionAtom {
public:
    const char* _data;
    quint32 _size;
    TextPFExceptionAtom() :_data(0), _size(0) {}
    explicit TextPFExceptionAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint16 reserved;
    TextPFException pf;
    inline operator const void * () const { return _data; }
    inline const TextPFExceptionAtom* operator->() const { return this; }
    inline const TextPFExceptionAtom& operator*() const { return *this; }
    inline const TextPFExceptionAtom* data() const { return this; }
};
class TextSIRun {
public:
    const char* _data;
    quint32 _size;
    TextSIRun() :_data(0), _size(0) {}
    explicit TextSIRun(const char* data, const quint32 maxsize);
    quint32 count;
    TextSIException si;
    inline operator const void * () const { return _data; }
    inline const TextSIRun* operator->() const { return this; }
    inline const TextSIRun& operator*() const { return *this; }
    inline const TextSIRun* data() const { return this; }
};
class TextSIExceptionAtom {
public:
    const char* _data;
    quint32 _size;
    TextSIExceptionAtom() :_data(0), _size(0) {}
    explicit TextSIExceptionAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    TextSIException textSIException;
    inline operator const void * () const { return _data; }
    inline const TextSIExceptionAtom* operator->() const { return this; }
    inline const TextSIExceptionAtom& operator*() const { return *this; }
    inline const TextSIExceptionAtom* data() const { return this; }
};
class TextMasterStyleAtom {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyleAtom() :_data(0), _size(0) {}
    explicit TextMasterStyleAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint16 cLevels;
    quint16 lstLvl1level;
    TextMasterStyleLevel lstLvl1;
    quint16 lstLvl2level;
    TextMasterStyleLevel lstLvl2;
    quint16 lstLvl3level;
    TextMasterStyleLevel lstLvl3;
    quint16 lstLvl4level;
    TextMasterStyleLevel lstLvl4;
    quint16 lstLvl5level;
    TextMasterStyleLevel lstLvl5;
    bool _has_lstLvl1level;
    bool _has_lstLvl2level;
    bool _has_lstLvl3level;
    bool _has_lstLvl4level;
    bool _has_lstLvl5level;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyleAtom* operator->() const { return this; }
    inline const TextMasterStyleAtom& operator*() const { return *this; }
    inline const TextMasterStyleAtom* data() const { return this; }
};
class PP10SlideBinaryTagExtension {
public:
    const char* _data;
    quint32 _size;
    PP10SlideBinaryTagExtension() :_data(0), _size(0) {}
    explicit PP10SlideBinaryTagExtension(const char* data, const quint32 maxsize);
    RecordHeader rh;
    MSOCastArray<quint16> tagName;
    RecordHeader rhData;
    MSOArray<TextMasterStyle10Atom> rgTextMasterStyleAtom;
    MSOArray<Comment10Container> rgComment10Container;
    LinkedSlide10Atom linkedSlideAtom;
    MSOArray<LinkedShape10Atom> rgLinkedShape10Atom;
    SlideFlags10Atom slideFlagsAtom;
    SlideTime10Atom slideTimeAtom;
    UnknownSlideContainerChild unknown;
    HashCode10Atom hashCodeAtom;
    ExtTimeNodeContainer extTimeNodeContainer;
    BuildListContainer buildListContainer;
    inline operator const void * () const { return _data; }
    inline const PP10SlideBinaryTagExtension* operator->() const { return this; }
    inline const PP10SlideBinaryTagExtension& operator*() const { return *this; }
    inline const PP10SlideBinaryTagExtension* data() const { return this; }
};
class ExObjListSubContainer {
public:
    const char* _data;
    quint32 _size;
    ExObjListSubContainer() :_data(0), _size(0) {}
    explicit ExObjListSubContainer(const char* data, const quint32 maxsize);
    class C_anon {
    friend class ExObjListSubContainer;
    private:
        ExAviMovieContainer _ExAviMovieContainer;
        ExCDAudioContainer _ExCDAudioContainer;
        ExControlContainer _ExControlContainer;
        ExHyperlinkContainer _ExHyperlinkContainer;
        ExMCIMovieContainer _ExMCIMovieContainer;
        ExMIDIAudioContainer _ExMIDIAudioContainer;
        ExOleEmbedContainer _ExOleEmbedContainer;
        ExOleLinkContainer _ExOleLinkContainer;
        ExWAVAudioEmbeddedContainer _ExWAVAudioEmbeddedContainer;
        ExWAVAudioLinkContainer _ExWAVAudioLinkContainer;
        UnknownExObjListSubContainerChild _UnknownExObjListSubContainerChild;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const ExObjListSubContainer* operator->() const { return this; }
    inline const ExObjListSubContainer& operator*() const { return *this; }
    inline const ExObjListSubContainer* data() const { return this; }
};
class OfficeArtDggContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtDggContainer() :_data(0), _size(0) {}
    explicit OfficeArtDggContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    OfficeArtFDGGBlock drawingGroup;
    OfficeArtBStoreContainer blipStore;
    OfficeArtFOPT drawingPrimaryOptions;
    OfficeArtTertiaryFOPT drawingTertiaryOptions;
    OfficeArtColorMRUContainer colorMRU;
    OfficeArtSplitMenuColorContainer splitColors;
    OfficeArtBStoreContainer blipStore2;
    OfficeArtTertiaryFOPT unknown;
    inline operator const void * () const { return _data; }
    inline const OfficeArtDggContainer* operator->() const { return this; }
    inline const OfficeArtDggContainer& operator*() const { return *this; }
    inline const OfficeArtDggContainer* data() const { return this; }
};
class OfficeArtFOPTEChoice {
public:
    const char* _data;
    static const quint32 _size;
    OfficeArtFOPTEChoice() :_data(0) {}
    OfficeArtFOPTEChoice(const char* data, quint32/*ignored*/ = 0);// 6 bytes
    class C_anon {
    friend class OfficeArtFOPTEChoice;
    private:
        Rotation _Rotation;
        ProtectionBooleanProperties _ProtectionBooleanProperties;
        ITxid _ITxid;
        DxTextLeft _DxTextLeft;
        DyTextTop _DyTextTop;
        DxTextRight _DxTextRight;
        DyTextBottom _DyTextBottom;
        WrapText _WrapText;
        AnchorText _AnchorText;
        TxflTextFlow _TxflTextFlow;
        CdirFont _CdirFont;
        HspNext _HspNext;
        Txdir _Txdir;
        TextBooleanProperties _TextBooleanProperties;
        CropFromTop _CropFromTop;
        CropFromBottom _CropFromBottom;
        CropFromLeft _CropFromLeft;
        CropFromRight _CropFromRight;
        Pib _Pib;
        PibName _PibName;
        PibFlags _PibFlags;
        PictureTransparent _PictureTransparent;
        PictureContrast _PictureContrast;
        PictureBrightness _PictureBrightness;
        BlipBooleanProperties _BlipBooleanProperties;
        GeoLeft _GeoLeft;
        GeoTop _GeoTop;
        GeoRight _GeoRight;
        GeoBottom _GeoBottom;
        ShapePath _ShapePath;
        PVertices _PVertices;
        PSegmentInfo _PSegmentInfo;
        AdjustValue _AdjustValue;
        Adjust2Value _Adjust2Value;
        Adjust3Value _Adjust3Value;
        Adjust4Value _Adjust4Value;
        Adjust5Value _Adjust5Value;
        Adjust6Value _Adjust6Value;
        Adjust7Value _Adjust7Value;
        Adjust8Value _Adjust8Value;
        GeometryBooleanProperties _GeometryBooleanProperties;
        FillType _FillType;
        FillColor _FillColor;
        FillOpacity _FillOpacity;
        FillBackColor _FillBackColor;
        FillBackOpacity _FillBackOpacity;
        FillCrMod _FillCrMod;
        FillBlip _FillBlip;
        FillBlipName _FillBlipName;
        FillBlipFlags _FillBlipFlags;
        FillWidth _FillWidth;
        FillHeight _FillHeight;
        FillAngle _FillAngle;
        FillFocus _FillFocus;
        FillToLeft _FillToLeft;
        FillToTop _FillToTop;
        FillToRight _FillToRight;
        FillToBottom _FillToBottom;
        FillRectLeft _FillRectLeft;
        FillRectTop _FillRectTop;
        FillRectRight _FillRectRight;
        FillRectBottom _FillRectBottom;
        FillDztype _FillDztype;
        FillShadePreset _FillShadePreset;
        FillShadeColors _FillShadeColors;
        FillOriginX _FillOriginX;
        FillOriginY _FillOriginY;
        FillShapeOriginX _FillShapeOriginX;
        FillShapeOriginY _FillShapeOriginY;
        FillColorExt _FillColorExt;
        FillBackColorExt _FillBackColorExt;
        FillStyleBooleanProperties _FillStyleBooleanProperties;
        LineColor _LineColor;
        LineOpacity _LineOpacity;
        LineBackColor _LineBackColor;
        LineFillBlip _LineFillBlip;
        LineWidth _LineWidth;
        LineStyle _LineStyle;
        LineDashing _LineDashing;
        LineStartArrowhead _LineStartArrowhead;
        LineEndArrowhead _LineEndArrowhead;
        LineStartArrowWidth _LineStartArrowWidth;
        LineStartArrowLength _LineStartArrowLength;
        LineEndArrowWidth _LineEndArrowWidth;
        LineEndArrowLength _LineEndArrowLength;
        LineJoinStyle _LineJoinStyle;
        LineStyleBooleanProperties _LineStyleBooleanProperties;
        ShadowType _ShadowType;
        ShadowColor _ShadowColor;
        ShadowOpacity _ShadowOpacity;
        ShadowOffsetX _ShadowOffsetX;
        ShadowOffsetY _ShadowOffsetY;
        ShadowStyleBooleanProperties _ShadowStyleBooleanProperties;
        HspMaster _HspMaster;
        Cxstyle _Cxstyle;
        BWMode _BWMode;
        ShapeBooleanProperties _ShapeBooleanProperties;
        DxyCalloutGap _DxyCalloutGap;
        Spcoa _Spcoa;
        Spcod _Spcod;
        DxyCalloutDropSpecified _DxyCalloutDropSpecified;
        DxyCalloutLengthSpecified _DxyCalloutLengthSpecified;
        CalloutBooleanProperties _CalloutBooleanProperties;
        PWrapPolygonVertices _PWrapPolygonVertices;
        DxWrapDistLeft _DxWrapDistLeft;
        DyWrapDistTop _DyWrapDistTop;
        DxWrapDistRight _DxWrapDistRight;
        DyWrapDistBottom _DyWrapDistBottom;
        LidRegroup _LidRegroup;
        PosH _PosH;
        PosRelH _PosRelH;
        PosV _PosV;
        PosRelV _PosRelV;
        PctHR _PctHR;
        AlignHR _AlignHR;
        DxHeightHR _DxHeightHR;
        DxWidthHR _DxWidthHR;
        GroupShapeBooleanProperties _GroupShapeBooleanProperties;
        WzFillId _WzFillId;
        DiagramBooleanProperties _DiagramBooleanProperties;
        OfficeArtFOPTE _OfficeArtFOPTE;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFOPTEChoice* operator->() const { return this; }
    inline const OfficeArtFOPTEChoice& operator*() const { return *this; }
    inline const OfficeArtFOPTEChoice* data() const { return this; }
};
class OfficeArtClientAnchor {
public:
    const char* _data;
    quint32 _size;
    OfficeArtClientAnchor() :_data(0), _size(0) {}
    explicit OfficeArtClientAnchor(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtClientAnchor;
    private:
        PptOfficeArtClientAnchor _PptOfficeArtClientAnchor;
        DocOfficeArtClientAnchor _DocOfficeArtClientAnchor;
        XlsOfficeArtClientAnchor _XlsOfficeArtClientAnchor;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtClientAnchor* operator->() const { return this; }
    inline const OfficeArtClientAnchor& operator*() const { return *this; }
    inline const OfficeArtClientAnchor* data() const { return this; }
};
class PptOfficeArtClientData {
public:
    const char* _data;
    quint32 _size;
    PptOfficeArtClientData() :_data(0), _size(0) {}
    explicit PptOfficeArtClientData(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    ShapeFlagsAtom shapeFlagsAtom;
    ShapeFlags10Atom shapeFlags10Atom;
    ExObjRefAtom exObjRefAtom;
    AnimationInfoContainer animationInfo;
    MouseClickInteractiveInfoContainer mouseClickInteractiveInfo;
    MouseOverInteractiveInfoContainer mouseOverInteractiveInfo;
    MSOArray<ShapeClientRoundtripDataSubcontainerOrAtom> rgShapeClientRoundtripData0;
    PlaceholderAtom placeholderAtom;
    RecolorInfoAtom recolorInfoAtom;
    UnknownOfficeArtClientDataChild unknown1;
    MSOArray<ShapeClientRoundtripDataSubcontainerOrAtom> rgShapeClientRoundtripData;
    UnknownOfficeArtClientDataChild unknown2;
    inline operator const void * () const { return _data; }
    inline const PptOfficeArtClientData* operator->() const { return this; }
    inline const PptOfficeArtClientData& operator*() const { return *this; }
    inline const PptOfficeArtClientData* data() const { return this; }
};
class ShapeProgBinaryTagContainer {
public:
    const char* _data;
    quint32 _size;
    ShapeProgBinaryTagContainer() :_data(0), _size(0) {}
    explicit ShapeProgBinaryTagContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    ShapeProgBinaryTagSubContainerOrAtom rec;
    inline operator const void * () const { return _data; }
    inline const ShapeProgBinaryTagContainer* operator->() const { return this; }
    inline const ShapeProgBinaryTagContainer& operator*() const { return *this; }
    inline const ShapeProgBinaryTagContainer* data() const { return this; }
};
class WordDocument {
public:
    const char* _data;
    quint32 _size;
    WordDocument() :_data(0), _size(0) {}
    explicit WordDocument(const char* data, const quint32 maxsize);
    Fib fib;
    inline operator const void * () const { return _data; }
    inline const WordDocument* operator->() const { return this; }
    inline const WordDocument& operator*() const { return *this; }
    inline const WordDocument* data() const { return this; }
};
class Table {
public:
    const char* _data;
    quint32 _size;
    Table() :_data(0), _size(0) {}
    explicit Table(const char* data, const quint32 maxsize);
    STSH stsh;
    PlcfSed plcfSed;
    Plcfhdd plcfHdd;
    PlcBteChpx plcfBteChpx;
    PlcfBtePapx plcfBtePapx;
    Tcg cmds;
    Clx clx;
    SttbfFfn sttbfFfn;
    MSOCastArray<char> dop;
    inline operator const void * () const { return _data; }
    inline const Table* operator->() const { return this; }
    inline const Table& operator*() const { return *this; }
    inline const Table* data() const { return this; }
};
class Pcd {
public:
    const char* _data;
    static const quint32 _size;
    Pcd() :_data(0) {}
    Pcd(const char* data, quint32/*ignored*/ = 0);// 8 bytes
    bool fNoParaLast;
    bool fR1;
    bool fDirtly;
    bool fR2;
    quint16 fR3;
    FCompressed fc;
    Prm prm;
    inline operator const void * () const { return _data; }
    inline const Pcd* operator->() const { return this; }
    inline const Pcd& operator*() const { return *this; }
    inline const Pcd* data() const { return this; }
};
class OfficeArtFBSE {
public:
    const char* _data;
    quint32 _size;
    OfficeArtFBSE() :_data(0), _size(0) {}
    explicit OfficeArtFBSE(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    quint8 btWin32;
    quint8 btMacOS;
    MSOCastArray<char> rgbUid;
    quint16 tag;
    quint32 size;
    quint32 cRef;
    quint32 foDelay;
    quint8 unused1;
    quint8 cbName;
    quint8 unused2;
    quint8 unused3;
    MSOCastArray<char> nameData;
    OfficeArtBlip embeddedBlip;
    bool _has_nameData;
    inline operator const void * () const { return _data; }
    inline const OfficeArtFBSE* operator->() const { return this; }
    inline const OfficeArtFBSE& operator*() const { return *this; }
    inline const OfficeArtFBSE* data() const { return this; }
};
class OfficeArtBStoreContainerFileBlock {
public:
    const char* _data;
    quint32 _size;
    OfficeArtBStoreContainerFileBlock() :_data(0), _size(0) {}
    explicit OfficeArtBStoreContainerFileBlock(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtBStoreContainerFileBlock;
    private:
        OfficeArtFBSE _OfficeArtFBSE;
        OfficeArtBlip _OfficeArtBlip;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtBStoreContainerFileBlock* operator->() const { return this; }
    inline const OfficeArtBStoreContainerFileBlock& operator*() const { return *this; }
    inline const OfficeArtBStoreContainerFileBlock* data() const { return this; }
};
class SlideViewInfoInstance {
public:
    const char* _data;
    quint32 _size;
    SlideViewInfoInstance() :_data(0), _size(0) {}
    explicit SlideViewInfoInstance(const char* data, const quint32 maxsize);
    RecordHeader rh;
    SlideViewInfoAtom slideViewInfoAtom;
    ZoomViewInfoAtom zoomViewInfoAtom;
    MSOArray<GuideAtom> rgGuideAtom;
    inline operator const void * () const { return _data; }
    inline const SlideViewInfoInstance* operator->() const { return this; }
    inline const SlideViewInfoInstance& operator*() const { return *this; }
    inline const SlideViewInfoInstance* data() const { return this; }
};
class DocProgBinaryTagSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    DocProgBinaryTagSubContainerOrAtom() :_data(0), _size(0) {}
    explicit DocProgBinaryTagSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class DocProgBinaryTagSubContainerOrAtom;
    private:
        PP9DocBinaryTagExtension _PP9DocBinaryTagExtension;
        PP10DocBinaryTagExtension _PP10DocBinaryTagExtension;
        PP11DocBinaryTagExtension _PP11DocBinaryTagExtension;
        PP12DocBinaryTagExtension _PP12DocBinaryTagExtension;
        UnknownBinaryTag _UnknownBinaryTag;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const DocProgBinaryTagSubContainerOrAtom* operator->() const { return this; }
    inline const DocProgBinaryTagSubContainerOrAtom& operator*() const { return *this; }
    inline const DocProgBinaryTagSubContainerOrAtom* data() const { return this; }
};
class TextMasterStyle9Atom {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyle9Atom() :_data(0), _size(0) {}
    explicit TextMasterStyle9Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint16 cLevels;
    TextMasterStyle9Level lstLvl1;
    TextMasterStyle9Level lstLvl2;
    TextMasterStyle9Level lstLvl3;
    TextMasterStyle9Level lstLvl4;
    TextMasterStyle9Level lstLvl5;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyle9Atom* operator->() const { return this; }
    inline const TextMasterStyle9Atom& operator*() const { return *this; }
    inline const TextMasterStyle9Atom* data() const { return this; }
};
class BlipEntityAtom {
public:
    const char* _data;
    quint32 _size;
    BlipEntityAtom() :_data(0), _size(0) {}
    explicit BlipEntityAtom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint8 winBlipType;
    quint8 unused;
    OfficeArtBStoreContainerFileBlock blip;
    inline operator const void * () const { return _data; }
    inline const BlipEntityAtom* operator->() const { return this; }
    inline const BlipEntityAtom& operator*() const { return *this; }
    inline const BlipEntityAtom* data() const { return this; }
};
class TextMasterStyle10Atom {
public:
    const char* _data;
    quint32 _size;
    TextMasterStyle10Atom() :_data(0), _size(0) {}
    explicit TextMasterStyle10Atom(const char* data, const quint32 maxsize);
    RecordHeader rh;
    quint16 cLevels;
    quint16 lstLvl1level;
    TextMasterStyle10Level lstLvl1;
    quint16 lstLvl2level;
    TextMasterStyle10Level lstLvl2;
    quint16 lstLvl3level;
    TextMasterStyle10Level lstLvl3;
    quint16 lstLvl4level;
    TextMasterStyle10Level lstLvl4;
    quint16 lstLvl5level;
    TextMasterStyle10Level lstLvl5;
    bool _has_lstLvl1level;
    bool _has_lstLvl2level;
    bool _has_lstLvl3level;
    bool _has_lstLvl4level;
    bool _has_lstLvl5level;
    inline operator const void * () const { return _data; }
    inline const TextMasterStyle10Atom* operator->() const { return this; }
    inline const TextMasterStyle10Atom& operator*() const { return *this; }
    inline const TextMasterStyle10Atom* data() const { return this; }
};
class TextContainerInteractiveInfo {
public:
    const char* _data;
    quint32 _size;
    TextContainerInteractiveInfo() :_data(0), _size(0) {}
    explicit TextContainerInteractiveInfo(const char* data, const quint32 maxsize);
    class C_interactive {
    friend class TextContainerInteractiveInfo;
    private:
        MouseClickTextInfo _MouseClickTextInfo;
        MouseOverTextInfo _MouseOverTextInfo;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_interactive interactive;
    inline operator const void * () const { return _data; }
    inline const TextContainerInteractiveInfo* operator->() const { return this; }
    inline const TextContainerInteractiveInfo& operator*() const { return *this; }
    inline const TextContainerInteractiveInfo* data() const { return this; }
};
class DocumentTextInfoContainer {
public:
    const char* _data;
    quint32 _size;
    DocumentTextInfoContainer() :_data(0), _size(0) {}
    explicit DocumentTextInfoContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    KinsokuContainer kinsoku;
    FontCollectionContainer fontCollection;
    TextCFExceptionAtom textCFDefaultsAtom;
    TextPFExceptionAtom textPFDefaultsAtom;
    DefaultRulerAtom defaultRulerAtom;
    TextSIExceptionAtom textSIDefaultsAtom;
    TextMasterStyleAtom textMasterStyleAtom;
    TextMasterStyleAtom textMasterStyleAtom2;
    inline operator const void * () const { return _data; }
    inline const DocumentTextInfoContainer* operator->() const { return this; }
    inline const DocumentTextInfoContainer& operator*() const { return *this; }
    inline const DocumentTextInfoContainer* data() const { return this; }
};
class SlideProgBinaryTagSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    SlideProgBinaryTagSubContainerOrAtom() :_data(0), _size(0) {}
    explicit SlideProgBinaryTagSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class SlideProgBinaryTagSubContainerOrAtom;
    private:
        PP9SlideBinaryTagExtension _PP9SlideBinaryTagExtension;
        PP12SlideBinaryTagExtension _PP12SlideBinaryTagExtension;
        PP10SlideBinaryTagExtension _PP10SlideBinaryTagExtension;
        UnknownBinaryTag _UnknownBinaryTag;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const SlideProgBinaryTagSubContainerOrAtom* operator->() const { return this; }
    inline const SlideProgBinaryTagSubContainerOrAtom& operator*() const { return *this; }
    inline const SlideProgBinaryTagSubContainerOrAtom* data() const { return this; }
};
class DrawingGroupContainer {
public:
    const char* _data;
    quint32 _size;
    DrawingGroupContainer() :_data(0), _size(0) {}
    explicit DrawingGroupContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    OfficeArtDggContainer OfficeArtDgg;
    inline operator const void * () const { return _data; }
    inline const DrawingGroupContainer* operator->() const { return this; }
    inline const DrawingGroupContainer& operator*() const { return *this; }
    inline const DrawingGroupContainer* data() const { return this; }
};
class OfficeArtClientData {
public:
    const char* _data;
    quint32 _size;
    OfficeArtClientData() :_data(0), _size(0) {}
    explicit OfficeArtClientData(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtClientData;
    private:
        DocOfficeArtClientData _DocOfficeArtClientData;
        PptOfficeArtClientData _PptOfficeArtClientData;
        XlsOfficeArtClientData _XlsOfficeArtClientData;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtClientData* operator->() const { return this; }
    inline const OfficeArtClientData& operator*() const { return *this; }
    inline const OfficeArtClientData* data() const { return this; }
};
class ShapeProgTagsSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    ShapeProgTagsSubContainerOrAtom() :_data(0), _size(0) {}
    explicit ShapeProgTagsSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class ShapeProgTagsSubContainerOrAtom;
    private:
        ProgStringTagContainer _ProgStringTagContainer;
        ShapeProgBinaryTagContainer _ShapeProgBinaryTagContainer;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const ShapeProgTagsSubContainerOrAtom* operator->() const { return this; }
    inline const ShapeProgTagsSubContainerOrAtom& operator*() const { return *this; }
    inline const ShapeProgTagsSubContainerOrAtom* data() const { return this; }
};
class DocumentContainer {
public:
    const char* _data;
    quint32 _size;
    DocumentContainer() :_data(0), _size(0) {}
    explicit DocumentContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    DocumentAtom documentAtom;
    ExObjListContainer exObjList;
    DocumentTextInfoContainer documentTextInfo;
    SoundCollectionContainer soundCollection;
    DrawingGroupContainer drawingGroup;
    MasterListWithTextContainer masterList;
    DocInfoListContainer docInfoList;
    SlideHeadersFootersContainer slideHF;
    NotesHeadersFootersContainer notesHF;
    SlideListWithTextContainer slideList;
    SlideHeadersFootersContainer slideHF2;
    NotesListWithTextContainer notesList;
    SlideShowDocInfoAtom slideShowDocInfoAtom;
    NamedShowsContainer namedShows;
    SummaryContainer summary;
    DocRoutingSlipAtom docRoutingSlipAtom;
    PrintOptionsAtom printOptionsAtom;
    MSOArray<UnknownDocumentContainerChild> unknown0;
    RoundTripCustomTableStyles12Atom rtCustomTableStylesAtom1;
    MSOArray<UnknownDocumentContainerChild> unknown1;
    EndDocumentAtom endDocumentAtom;
    MSOArray<UnknownDocumentContainerChild> unknown2;
    RoundTripCustomTableStyles12Atom rtCustomTableStylesAtom2;
    MSOArray<UnknownDocumentContainerChild> unknown4;
    TextMasterStyle10Atom unknown5;
    inline operator const void * () const { return _data; }
    inline const DocumentContainer* operator->() const { return this; }
    inline const DocumentContainer& operator*() const { return *this; }
    inline const DocumentContainer* data() const { return this; }
};
class DocInfoListSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    DocInfoListSubContainerOrAtom() :_data(0), _size(0) {}
    explicit DocInfoListSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class DocInfoListSubContainerOrAtom;
    private:
        DocProgTagsContainer _DocProgTagsContainer;
        NormalViewSetInfoContainer _NormalViewSetInfoContainer;
        NotesTextViewInfoContainer _NotesTextViewInfoContainer;
        OutlineViewInfoContainer _OutlineViewInfoContainer;
        SlideViewInfoInstance _SlideViewInfoInstance;
        SorterViewInfoContainer _SorterViewInfoContainer;
        VBAInfoContainer _VBAInfoContainer;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const DocInfoListSubContainerOrAtom* operator->() const { return this; }
    inline const DocInfoListSubContainerOrAtom& operator*() const { return *this; }
    inline const DocInfoListSubContainerOrAtom* data() const { return this; }
};
class DocProgBinaryTagContainer {
public:
    const char* _data;
    quint32 _size;
    DocProgBinaryTagContainer() :_data(0), _size(0) {}
    explicit DocProgBinaryTagContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    DocProgBinaryTagSubContainerOrAtom rec;
    inline operator const void * () const { return _data; }
    inline const DocProgBinaryTagContainer* operator->() const { return this; }
    inline const DocProgBinaryTagContainer& operator*() const { return *this; }
    inline const DocProgBinaryTagContainer* data() const { return this; }
};
class SlideProgBinaryTagContainer {
public:
    const char* _data;
    quint32 _size;
    SlideProgBinaryTagContainer() :_data(0), _size(0) {}
    explicit SlideProgBinaryTagContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    SlideProgBinaryTagSubContainerOrAtom rec;
    inline operator const void * () const { return _data; }
    inline const SlideProgBinaryTagContainer* operator->() const { return this; }
    inline const SlideProgBinaryTagContainer& operator*() const { return *this; }
    inline const SlideProgBinaryTagContainer* data() const { return this; }
};
class OfficeArtSpContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSpContainer() :_data(0), _size(0) {}
    explicit OfficeArtSpContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    OfficeArtFSPGR shapeGroup;
    OfficeArtFSP shapeProp;
    OfficeArtFPSPL deletedshape;
    OfficeArtFOPT shapePrimaryOptions;
    OfficeArtSecondaryFOPT shapeSecondaryOptions1;
    OfficeArtTertiaryFOPT shapeTertiaryOptions1;
    OfficeArtChildAnchor childAnchor;
    OfficeArtClientAnchor clientAnchor;
    OfficeArtClientData clientData;
    OfficeArtClientTextBox clientTextbox;
    OfficeArtSecondaryFOPT shapeSecondaryOptions2;
    OfficeArtTertiaryFOPT shapeTertiaryOptions2;
    UnknownTextContainerChild unknown;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSpContainer* operator->() const { return this; }
    inline const OfficeArtSpContainer& operator*() const { return *this; }
    inline const OfficeArtSpContainer* data() const { return this; }
};
class OfficeArtInlineSpContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtInlineSpContainer() :_data(0), _size(0) {}
    explicit OfficeArtInlineSpContainer(const char* data, const quint32 maxsize);
    OfficeArtSpContainer shape;
    MSOArray<OfficeArtBStoreContainerFileBlock> rgfb;
    inline operator const void * () const { return _data; }
    inline const OfficeArtInlineSpContainer* operator->() const { return this; }
    inline const OfficeArtInlineSpContainer& operator*() const { return *this; }
    inline const OfficeArtInlineSpContainer* data() const { return this; }
};
class DocProgTagsSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    DocProgTagsSubContainerOrAtom() :_data(0), _size(0) {}
    explicit DocProgTagsSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class DocProgTagsSubContainerOrAtom;
    private:
        ProgStringTagContainer _ProgStringTagContainer;
        DocProgBinaryTagContainer _DocProgBinaryTagContainer;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const DocProgTagsSubContainerOrAtom* operator->() const { return this; }
    inline const DocProgTagsSubContainerOrAtom& operator*() const { return *this; }
    inline const DocProgTagsSubContainerOrAtom* data() const { return this; }
};
class SlideProgTagsSubContainerOrAtom {
public:
    const char* _data;
    quint32 _size;
    SlideProgTagsSubContainerOrAtom() :_data(0), _size(0) {}
    explicit SlideProgTagsSubContainerOrAtom(const char* data, const quint32 maxsize);
    class C_anon {
    friend class SlideProgTagsSubContainerOrAtom;
    private:
        ProgStringTagContainer _ProgStringTagContainer;
        SlideProgBinaryTagContainer _SlideProgBinaryTagContainer;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const SlideProgTagsSubContainerOrAtom* operator->() const { return this; }
    inline const SlideProgTagsSubContainerOrAtom& operator*() const { return *this; }
    inline const SlideProgTagsSubContainerOrAtom* data() const { return this; }
};
class OfficeArtDgContainer {
public:
    const char* _data;
    quint32 _size;
    OfficeArtDgContainer() :_data(0), _size(0) {}
    explicit OfficeArtDgContainer(const char* data, const quint32 maxsize);
    OfficeArtRecordHeader rh;
    OfficeArtFDG drawingData;
    OfficeArtFRITContainer regroupItems;
    OfficeArtSpgrContainer groupShape;
    OfficeArtSpContainer shape;
    MSOArray<OfficeArtSpgrContainerFileBlock> deletedShapes;
    OfficeArtSolverContainer solvers;
    inline operator const void * () const { return _data; }
    inline const OfficeArtDgContainer* operator->() const { return this; }
    inline const OfficeArtDgContainer& operator*() const { return *this; }
    inline const OfficeArtDgContainer* data() const { return this; }
};
class OfficeArtSpgrContainerFileBlock {
public:
    const char* _data;
    quint32 _size;
    OfficeArtSpgrContainerFileBlock() :_data(0), _size(0) {}
    explicit OfficeArtSpgrContainerFileBlock(const char* data, const quint32 maxsize);
    class C_anon {
    friend class OfficeArtSpgrContainerFileBlock;
    private:
        OfficeArtSpContainer _OfficeArtSpContainer;
        OfficeArtSpgrContainer _OfficeArtSpgrContainer;
        OfficeArtFSP _OfficeArtFSP;
        OfficeArtFSPGR _OfficeArtFSPGR;
        OfficeArtClientAnchor _OfficeArtClientAnchor;
        OfficeArtClientData _OfficeArtClientData;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const OfficeArtSpgrContainerFileBlock* operator->() const { return this; }
    inline const OfficeArtSpgrContainerFileBlock& operator*() const { return *this; }
    inline const OfficeArtSpgrContainerFileBlock* data() const { return this; }
};
class DrawingContainer {
public:
    const char* _data;
    quint32 _size;
    DrawingContainer() :_data(0), _size(0) {}
    explicit DrawingContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    OfficeArtDgContainer OfficeArtDg;
    inline operator const void * () const { return _data; }
    inline const DrawingContainer* operator->() const { return this; }
    inline const DrawingContainer& operator*() const { return *this; }
    inline const DrawingContainer* data() const { return this; }
};
class MainMasterContainer {
public:
    const char* _data;
    quint32 _size;
    MainMasterContainer() :_data(0), _size(0) {}
    explicit MainMasterContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    SlideAtom slideAtom;
    SlideShowSlideInfoAtom unknown;
    MSOArray<SchemeListElementColorSchemeAtom> rgSchemeListElementColorScheme;
    MSOArray<TextMasterStyleAtom> rgTextMasterStyle;
    RoundTripOArtTextStyles12Atom roundTripOArtTextSTyles12Atom;
    SlideShowSlideInfoAtom slideShowInfoAtom;
    PerSlideHeadersFootersContainer perSlideHeadersFootersContainer;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    SlideNameAtom slideNameAtom;
    SlideProgTagsContainer slideProgTagsContainer;
    MSOArray<RoundTripMainMasterRecord> rgRoundTripMainMaster;
    TemplateNameAtom templateNameAtom;
    SlideProgTagsContainer unknown3;
    inline operator const void * () const { return _data; }
    inline const MainMasterContainer* operator->() const { return this; }
    inline const MainMasterContainer& operator*() const { return *this; }
    inline const MainMasterContainer* data() const { return this; }
};
class SlideContainer {
public:
    const char* _data;
    quint32 _size;
    SlideContainer() :_data(0), _size(0) {}
    explicit SlideContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    SlideAtom slideAtom;
    SlideShowSlideInfoAtom slideShowSlideInfoAtom;
    PerSlideHeadersFootersContainer perSlideHFContainer;
    RoundTripSlideSyncInfo12Container rtSlideSyncInfo12;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    SlideNameAtom slideNameAtom;
    SlideProgTagsContainer slideProgTagsContainer;
    UnknownSlideContainerChild unknown;
    MSOArray<RoundTripSlideRecord> rgRoundTripSlide;
    UnknownSlideContainerChild unknown2;
    inline operator const void * () const { return _data; }
    inline const SlideContainer* operator->() const { return this; }
    inline const SlideContainer& operator*() const { return *this; }
    inline const SlideContainer* data() const { return this; }
};
class NotesContainer {
public:
    const char* _data;
    quint32 _size;
    NotesContainer() :_data(0), _size(0) {}
    explicit NotesContainer(const char* data, const quint32 maxsize);
    RecordHeader rh;
    NotesAtom notesAtom;
    PerSlideHeadersFootersContainer perSlideHFContainer;
    DrawingContainer drawing;
    SlideSchemeColorSchemeAtom slideSchemeColorSchemeAtom;
    SlideNameAtom slideNameAtom;
    SlideProgTagsContainer slideProgTagsContainer;
    PerSlideHeadersFootersContainer perSlideHFContainer2;
    MSOArray<NotesRoundTripAtom> rgNotesRoundTripAtom;
    inline operator const void * () const { return _data; }
    inline const NotesContainer* operator->() const { return this; }
    inline const NotesContainer& operator*() const { return *this; }
    inline const NotesContainer* data() const { return this; }
};
class MasterOrSlideContainer {
public:
    const char* _data;
    quint32 _size;
    MasterOrSlideContainer() :_data(0), _size(0) {}
    explicit MasterOrSlideContainer(const char* data, const quint32 maxsize);
    class C_anon {
    friend class MasterOrSlideContainer;
    private:
        MainMasterContainer _MainMasterContainer;
        SlideContainer _SlideContainer;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const MasterOrSlideContainer* operator->() const { return this; }
    inline const MasterOrSlideContainer& operator*() const { return *this; }
    inline const MasterOrSlideContainer* data() const { return this; }
};
class PowerPointStruct {
public:
    const char* _data;
    quint32 _size;
    PowerPointStruct() :_data(0), _size(0) {}
    explicit PowerPointStruct(const char* data, const quint32 maxsize);
    class C_anon {
    friend class PowerPointStruct;
    private:
        DocumentContainer _DocumentContainer;
        MasterOrSlideContainer _MasterOrSlideContainer;
        PersistDirectoryAtom _PersistDirectoryAtom;
        NotesContainer _NotesContainer;
        HandoutContainer _HandoutContainer;
        SlideContainer _SlideContainer;
        ExOleObjStg _ExOleObjStg;
        ExControlStg _ExControlStg;
        VbaProjectStg _VbaProjectStg;
        UserEditAtom _UserEditAtom;
    public:
        template <typename A> const A* get() const;
        template <typename A> bool is() const;
    };
    C_anon anon;
    inline operator const void * () const { return _data; }
    inline const PowerPointStruct* operator->() const { return this; }
    inline const PowerPointStruct& operator*() const { return *this; }
    inline const PowerPointStruct* data() const { return this; }
};
} // close namespace
#endif
