<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE format>
<format version="1.0">
  <includes>
    <file name="QtCore/QtGlobal">
      <type name="qint16" size="2" />
      <type name="quint16" />
      <type name="qint32" />
      <type name="quint32" />
    </file>
  </includes>

  <typedefs>
    <type name="Cdr4Coord" original="qint16">
      <description>2-byte signed integer is used to describe the x and the y coordinates.</description>
    </type>
  </typedefs>

  <enums>
    <enum name="CdrObjectIds">
      <description>id for the type of the graphical object.</description>
      <item name="CdrLayerObjectId" value="0">
        <description>"Ebene1"</description>
      </item>
      <item name="CdrRectangleObjectId" value="1">
        <description>Rectangle</description>
      </item>
      <item name="CdrEllipseObjectId" value="2">
        <description>Ellipse</description>
      </item>
      <item name="CdrPathObjectId" value="3">
        <description>Path</description>
      </item>
      <item name="CdrTextObjectId" value="4">
        <description>Text</description>
      </item>
      <item name="CdrBitmapObjectId" value="5">
        <description>Bitmap</description>
      </item>
      <item name="CdrUnknown1ObjectId" value="6">
      </item>
      <item name="CdrGridObjectId" value="11">
        <description>"Gitter"</description>
      </item>
      <item name="CdrGuidesObjectId" value="12">
        <description>"Hilfslinien"</description>
      </item>
      <item name="CdrDesktopObjectId" value="17">
        <description>"Desktop"</description>
      </item>
    </enum>
  </enums>

  <structs>
    <struct name="Cdr4Point">
      <description>A point given by its x and y coordinates.</description>
      <method>
<code><![CDATA[Cdr4Point() {}]]></code>
      </method>
      <method>
<code><![CDATA[Cdr4Point( Cdr4Coord x, Cdr4Coord y ) : mX(x), mY(y) {}]]></code>
      </method>
      <!-- 0..1 -->
      <member type="Cdr4Coord" name="mX">
        <description>The x coordinate of the point.</description>
      </member>
      <!-- 2..3 -->
      <member type="Cdr4Coord" name="mY">
        <description>The y coordinate of the point.</description>
      </member>
    </struct>

    <struct name="Cdr4BoundingBoxChunkData">
      <description></description>
      <!-- 0..3 -->
      <member type="Cdr4Point" name="mUpperLeft">
        <description>The upper-left corner of the box.</description>
      </member>
      <!-- 4..7 -->
      <member type="Cdr4Point" name="mLowerRight">
      </member>
    </struct>

    <struct name="CdrColor">
      <!-- 0..0 -->
      <member type="quint8" name="m1" />
      <!-- 1..1 -->
      <member type="quint8" name="m2" />
      <!-- 2..2 -->
      <member type="quint8" name="m3" />
      <!-- 3..3 -->
      <member type="quint8" name="m4" />
    </struct>

    <struct name="CdrArgumentData">
<!--    // TODO: convert endianness on bigendian system // void convertToBugEndian(); -->
      <method>
<code><![CDATA[const quint16* argOffsets() const
{ return reinterpret_cast<const quint16*>( reinterpret_cast<const char*>(this)+startOfArgs ); }]]></code>
      </method>
      <method>
<code><![CDATA[template<typename T>
T arg( int i ) const
{ return *reinterpret_cast<const T*>( reinterpret_cast<const char*>(this)+argOffsets()[i] ); }]]></code>
      </method>
      <method>
<code><![CDATA[template<typename T>
const T* argPtr( int i ) const
{ return reinterpret_cast<const T*>( reinterpret_cast<const char*>(this)+argOffsets()[i] ); }]]></code>
      </method>

      <!-- 0..1 -->
      <member name="mChunkLength" type="quint16">
        <description>size of data</description>
      </member>
      <!-- 2..3 -->
      <member name="count" type="quint16">
        <description>number of arguments</description>
      </member>
      <!-- 4..5 -->
      <member name="startOfArgs" type="quint16">
        <description>start of arguments</description>
      </member>
    </struct>

    <struct name="CdrArgumentWithTypeData" base="CdrArgumentData">
      <method>
<code><![CDATA[const quint16* argTypes() const
{ return reinterpret_cast<const quint16*>( reinterpret_cast<const char*>(this)+startOfArgTypes ); }]]></code>
      </method>
      <method><!--order of types seems inverted...-->
<code><![CDATA[quint16 argType( int i ) const { return argTypes()[count-i-1]; }]]></code>
      </method>
      <!-- 6..7: start of arguments types-->
      <member name="startOfArgTypes" type="quint16" />
    </struct>

    <struct name="CdrObjectArgumentData" base="CdrArgumentWithTypeData">
      <!-- 8..9: type of loda-->
      <member name="chunkType" type="quint16" />
    </struct>
  </structs>

  <enums>
    <enum name="CdrStyleArgumentType">
      <!-- text/title/name -->
      <item name="CdrStyleTitleArgumentId" value="200" />
      <!-- 32bit 02 00 00 00 -->
      <item name="CdrStyle205ArgumentId" value="205" />
      <!-- 32bit 02 00 00 00 -->
      <item name="CdrStyle210ArgumentId" value="210" />
      <!-- 6 bytes CdrStyleFontArgumentData -->
      <item name="CdrStyleFontArgumentId" value="220" />
      <!-- 6 bit -->
      <item name="CdrStyle225ArgumentId" value="225" />
      <!-- 20 bytes (all 00) -->
      <item name="CdrStyle230ArgumentId" value="230" />
      <!-- 12 bytes (00 00 64 00 64 00 64 00 00 00 00 00) -->
      <item name="CdrStyle235ArgumentId" value="235" />
      <!-- 258 bytes (all 00) -->
      <item name="CdrStyle240ArgumentId" value="240" />
      <!-- 8 bytes (all 00) -->
      <item name="CdrStyle245ArgumentId" value="245" />
      <!-- 32bit (00 00 00 00) -->
      <item name="CdrStyle250ArgumentId" value="250" />
    </enum>
  </enums>

  <structs>
    <struct name="CdrStyleArgumentData" base="CdrArgumentWithTypeData">
      <!-- 8..9: ?-->
      <member name="_unknown0" type="qint16" />
      <!-- 10..11: ?-->
      <member name="_unknown1" type="qint16" />
      <!-- 12..13: ?-->
      <member name="_unknown2" type="qint16" />
      <!-- 14..15: ?-->
      <member name="_unknown3" type="qint16" />
      <!-- 16..17: ?-->
      <member name="_unknown4" type="qint16" />
    </struct>

    <struct name="CdrVersionChunkData">
      <!-- 0..1: version -->
      <member type="quint16" name="mVersion">
          <description>The version, multiplied with 100, e.g. 401 for version 4.01.</description>
      </member>
    </struct>

    <struct name="CdrStyleSheetChunkData">
      <method><!--order of types seems inverted...-->
<code><![CDATA[const char* fileName() const { return &firstFileNameChar; }]]></code>
      </method>
      <!-- 0..end: filename -->
      <member type="char" name="firstFileNameChar">
          <description>A \0 terminated string with some file name, e.g. "CORELDRW.CDT".</description>
      </member>
    </struct>

    <struct name="CdrLnkTableChunkData">
       <!-- 0..end: data-->
       <member type="CdrArgumentData" name="mArguments" />
    </struct>

    <struct name="CdrStyleChunkData">
       <!-- 0..1: int16 index/key/id-->
       <member type="quint16" name="mStyleIndex" />
       <!-- 2..end: data-->
       <member type="CdrStyleArgumentData" name="mArguments" />
    </struct>

    <struct name="CdrTrflChunkData">
       <!-- 0..5 + end: argument data-->
       <member type="CdrArgumentData" name="mArguments" />
      <!-- 6..7: seen FF FF-->
      <member name="_unknown0" type="qint16" />
      <!-- 8..9: seen 00 00-->
      <member name="_unknown1" type="qint16" />
    </struct>

    <!-- 0D 00 16 01 01 00 - also size, bold, italic etc. ?-->
    <struct name="CdrStyleFontArgumentData">
      <!-- 0..1: font index-->
      <member name="mFontIndex" type="quint16">
        <description>The index of the font in the font table.</description>
      </member>
      <!-- 2..2: fontsize?-->
      <member name="mFontSize" type="quint8" />
      <!-- 3..3: ?-->
      <member name="_unknown1" type="quint8" />
      <!-- 4..4: ?-->
      <member name="_unknown2" type="quint8" />
      <!-- 5..5: ?-->
      <member name="_unknown3" type="quint8" />
    </struct>

    <struct name="CdrFontChunkData">
      <method><!--order of types seems inverted...-->
<code><![CDATA[const char* fontName() const { return &firstFontNameChar; }]]></code>
      </method>
      <!-- 0..1: some index/id/key which seems sorted-->
      <member type="quint16" name="mFontIndex" />
      <!-- bytes 2..end: font name-->
      <member type="char" name="firstFontNameChar" />
    </struct>
  </structs>

  <enums>
    <enum name="CdrFillType">
      <item name="CdrTransparent" value="0" />
      <item name="CdrSolid" value="1" />
    </enum>

    <enum name="CdrColorModel">
      <item name="CdrPantoneId" value="1" />
    </enum>
  </enums>

  <structs>
<!--
// 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00
// 01 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 C2 01 3C 00 00 00
// 01 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 C2 01 3C 00 00 00
// 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C2 01 3C 00 00 00

// 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00
// 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 00
// 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
//            |           |           |           |           |
// colormd                 CMYK?
// possible data: color
-->
    <struct name="CdrSolidFillData">
      <!-- 0..3: seen 1, color model?-->
      <member name="mColorModel" type="quint32" />
      <!-- 4..7: seen 0-->
      <member name="_unknown2" type="quint32" />
      <!-- 8..11: seen 0, 20, 60, 100-->
      <member name="mColor" type="CdrColor" />
      <!-- 12..15: seen 0-->
      <member name="_unknown4" type="quint32" />
      <!-- 16..19: seen 0, C2 01 3C 00 (3932610 oder 450,60 oder 194,1,60,0)-->
      <member name="_unknown5" type="quint32" />
      <!-- 20..21: seen 0-->
      <member name="_unknown6" type="quint16" />
    </struct>

    <struct name="CdrFillChunkData">
      <method>
          <code><![CDATA[const CdrSolidFillData* solidFillData() const
          { return reinterpret_cast<const CdrSolidFillData*>(&firstFillTypeData); }]]></code></method>
      <!-- 0..3: uint32 index/key/id? would match loda-->
      <member type="quint32" name="mFillIndex" />
      <!-- 4..7: filltype (?)-->
      <member type="quint32" name="mFillType" />
      <!-- 8..end: fill specific data, size depends on type-->
      <member type="char" name="firstFillTypeData" />
    </struct>
<!--
// 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 02 00 00 00 02 00 00 00 00 00 03 00 64 00 00 00 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

// 01 00 00 00 01 00 00 00 00 00 0E 00 64 00 00 00 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 02 00 00 00 02 00 00 00 00 00 03 00 64 00 00 00 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 03 00 00 00 01 00 00 00 00 00 03 00 64 00 00 00 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 04 00 00 00 32 00 00 00 00 00 4A 00 0A 00 8E FE 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 05 00 00 00 32 00 00 00 00 00 4A 00 0A 00 8E FE 01 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 06 00 00 00 32 00 00 00 00 00 1E 00 0A 00 8E FE 01 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
// 07 00 00 00 32 00 00 00 00 00 1E 00 0A 00 8E FE 01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 C2 01 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
//            |     |     |     |     |     |     |           |           |           |           |           |
// 0           4     6     8     10    12    14    16          20          24          28          32          36
// possible data: line type, line ending type, color, shape of pen
// 68 bytes:
-->
    <struct name="CdrOutlineChunkData">
      <!-- 0..3: uint32 index/key/id? would match loda-->
      <member name="mIndex" type="quint32" />
      <!-- 4..5: type (?) seen 1, 2, 50-->
      <member name="mType" type="quint16" />
      <!-- 6..7: always 00 00 caps-->
      <member name="_unknown0" type="quint16" />
      <!-- 8..9: always 00 00 corner-->
      <member name="_unknown1" type="quint16" />
      <!-- 10..11: line width? seen 0, 3, 14, 30, 74-->
      <member name="mLineWidth" type="quint16" />
      <!-- 12..13: seen 0, 10, 100-->
      <member name="_unknown3" type="quint16" />
      <!-- 14..15: seen 0, -370-->
      <member name="_unknown4" type="quint16" />
      <!-- 16..37: sample data hints to be like CdrSolidFillData-->
      <member name="mFillData" type="CdrSolidFillData" />
      <!-- 16..19: seen 0, 1>
//     quint32 _unknown5;
      // 20..23: seen 0
//     quint32 _unknown6;
      // 24..27: seen 0, 50, 60, 100
//     quint32 _unknown7;
      // 28..31: seen 0
//     quint32 _unknown8;
      // 32..35: seen 0, C2 01 3C 00 (3932610 oder 450,60 oder 194,1,60,0)
//     quint32 _unknown9;
      // 36..37: seen 0
//     quint16 _unknown10;-->
      <!-- 38..67: seen 0-->
      <member name="_data[30]" type="char" />
    </struct>

<!--
// 000C:3990 |       40 00  01 90                                 |   @...          
// 000C:3B00 |                                 40 00  00 90       |           @...  
// 000C:8FE0 |                           00 00 00 90              |         ....    
00000190
-->
    <struct name="CdrPageFlagChunkData">
        <!-- 0..3: flags?-->
        <member name="_unknown" type="quint32" />
    </struct>

<!--
// 000C:39B0 |                    5A 01  01 98                    |       Z...      
// 000C:3A00 |                                 4A 00  01 98       |           J...  
// 000C:3A60 |       48 00  01 98                                 |   H...          
// 000C:3AB0 |                    40 00  00 98                    |       @...      
// 000C:3B00 |                                 40 00  00 90       |           @...  
// 000C:3B20 |                                              5A 01 |               Z.
// 000C:3B30 | 01 98                                              | ..              
// 000C:3B70 |                    4A 00  01 98                    |       J...      
// 000C:3BB0 |                                              48 00 |               H.
// 000C:3BC0 | 01 98                                              | ..              
// 000C:3C00 |                    40 00  00 98                    |       @...      
// 000C:3C40 |                                              00 02 |               ..
// 000C:3C50 | 00 08                                              | ..              
// 000C:3D40 |       00 02  00 08                                 |   ....          
1a010198  loda type 11
0a000198  loda type 12
08000198  loda type 17
00000098  loda type 0
-->
    <struct name="CdrLayerFlagChunkData">
        <!-- 0..3: flags?-->
        <member name="_unknown" type="quint32" />
    </struct>

    <struct name="CdrLinkGroupSpndChunkData">
        <!-- 0..1: flags?-->
        <member name="_unknown" type="quint16" />
    </struct>

    <struct name="CdrLinkGroupFlagChunkData">
        <!-- 0..3: flags?-->
        <member name="_unknown" type="quint32" />
    </struct>

    <struct name="CdrGroupSpndChunkData">
        <!-- 0..1: flags?-->
        <member name="_unknown" type="quint16" />
    </struct>

    <!-- seen 00000010, 00080010 -->
    <struct name="CdrGroupFlagChunkData">
        <!-- 0..3: flags?-->
        <member name="_unknown" type="quint32" />
    </struct>

    <struct name="CdrObjectSpndChunkData">
        <!-- 0..1: flags?-->
        <member name="_unknown" type="quint16" />
    </struct>

    <!-- seen 00020008-->
    <struct name="CdrObjectFlagChunkData">
        <!-- 0..3: flags?-->
        <member name="_unknown" type="quint32" />
    </struct>
  </structs>

  <enums>
<!--
// each page has as start types 0B, 0C, 11, 0
// first set has both arg type 1000 and 2000, with text set for 1000, other have just 2000, no text
// types 3 and 4 are on second, type 5 on last
// type 3 and 5 have args 10, 20, 30, 100, 200, 1010 (1010 sometimes missing)

// type 2: ellipse
//  200:    5    (05 00)
//  100: 197636  (04 04 03 00)
//   40:         (28 FD 14 FE)
//   30:         (...)
//   20:   15    (0F 00 00 00)
//   10:    3    (03 00 00 00)

// type 5: bitmap?
// 1010:  320    (40 01)
//  200:    5    (05 00)
//  100: 2756    (C4 0A 00 00)
//   30:         (...) 44 bytes
//   20:    2    (02 00 00 00)
//   10:    2    (02 00 00 00)

// type 4: text
//  200:   29    (1D 00)
//  100:         (94 06 EA 01)
//   30:         (...)
//   20:    1    (01 00 00 00)
//   10:    2    (01 00 00 00)

// type 4: text
//  200:   32    (20 00)
//  100:         (64 07 FE 01)
//   30:         (...)
//   20:    1    (01 00 00 00)
//   10:    2    (01 00 00 00)

// type 3: line or curve
//  200:    5    (05 00)
//  100: 1972    (B4 07 00 00)
//   30:         (...) 64 bytes
//   20:    1    (01 00 00 00)
//   10:    2    (02 00 00 00)

// type 3: line or curve
// 1010: 32768   (01 80)
//  200:    5    (05 00)
//  100: 1940    (94 07 00 00)
//   30:         (...) 872 bytes
//   20:  256    (00 01 00 00)
//   10: 1024    (00 04 00 00)
-->
    <enum name="CdrObjectArgumentType">
      <!-- 10: 32bit (outline?) -->
      <item name="CdrObjectOutlineIndexArgumentId" value="10">
          <description>The index of the outline in the outline table of the document.</description>
      </item>
      <!-- 20: 32bit (fill?)-->
      <item name="CdrObjectFillIndexArgumentId" value="20">
          <description>The index of the fill in the fill table of the document.</description>
      </item>
      <!-- 30: object specific data-->
      <item name="CdrObjectSpecificDataArgumentId" value="30" />
      <!-- 40: 32bit  seen only with ellipse so far, rotation center?-->
      <item name="CdrObject40ArgumentId" value="40" />
      <!-- 100: 32bit (point, transform?)-->
      <item name="CdrObjectOffsetPointArgumentId" value="100" />
      <!-- 200: 16 bit  (style index?)-->
      <item name="CdrObjectStyleIndexArgumentId" value="200">
          <description>The index of the style in the style table of the document.</description>
      </item>
      <!-- 1000: text/title-->
      <item name="CdrObjectTitleArgumentId" value="1000">
          <description>The tile of the object.</description>
      </item>
      <!-- 1010: 16 bit, seen 80 01 (3=path), 01 40 (5=bitmap) -->
      <item name="CdrObject1010ArgumentId" value="1010" />
      <!-- 2000: data 01 00 64 00 64 00 00 00 00 00 00 00-->
      <item name="CdrObject2000ArgumentId" value="2000" />
    </enum>
  </enums>

  <structs>
    <!-- sample data: AC 2D B6 DF 00 00-->
    <struct name="Cdr4RectangleData">
      <!-- 0..1: width?-->
      <member name="mWidth" type="quint16" />
      <!-- 2..3: height?-->
      <member name="mHeight" type="quint16" />
      <!-- 4..5: ? rounded corners?-->
      <member name="_unknown" type="quint16" />
    </struct>

    <!-- sample data: 4F FA 28 FC 8C 0A 8C 0A 00 00-->
    <struct name="Cdr4EllipseData">
      <!-- 0..3: center?-->
      <member name="mCenterPoint" type="Cdr4Point" />
      <!-- 4..5: x radius?-->
      <member name="mXRadius" type="quint16" />
      <!-- 6..7: y radius?-->
      <member name="mYRadius" type="quint16" />
      <!-- 8..9: ?-->
      <member name="_unknown" type="quint16" />
    </struct>
  </structs>
<!--
// point types:
// 0C
// 44
// 48
// 64
// C0
// 84
// first point has 0C (or 0D)
// last point has 48 (or 49)
// a break in the line are points with 48 0C
// but there is also C0 84, difference is?
// lots of connected straight lines seem 44 44 44
// no idea about this example yet:
// -63.5019 , 115.261 : "c" 
// 19.6554 , 47.2277 : "44" 
// 114.116 , 98.271 : "64" 
// 114.116 , 98.271 : "c0" 
// 42.3346 , 188.911 : "c0" 
// 42.3346 , 188.911 : "84" 
// -63.5019 , 115.261 : "48" 

// looks like flags, a nibble per direction?
// 0  0000
// 4  0100
// 6  0110
// 8  1000
// 9  1001
// C  1100
// D  1101
-->
  <typedefs>
    <type name="PointType" original="unsigned char" />
  </typedefs>

  <enums>
    <enum name="PointFlags">
      <item name="UnknownPointFlag" value="1" />
      <item name="LineCurved" value="2" />
      <item name="LineStart" value="4 " />
      <item name="UnknownPointFlag2" value="8" />
    </enum>
  </enums>

  <structs>
    <struct name="Cdr4PointList">
      <method>
<code><![CDATA[Cdr4Point point( int i ) const
    { return (&firstPoint)[i]; }]]></code>
      </method>
      <method>
        <!-- TODO: check that type is not inverted like arg types are-->
<code><![CDATA[PointType pointType( int i ) const
    { return reinterpret_cast<const PointType*>(&firstPoint+count)[i]; }]]></code>
      </method>
      <!-- 0..1: number of points-->
      <member name="count" type="quint16" />
      <!-- 2..3: ?-->
      <member name="_unknown" type="quint16" />
      <!-- 4..4+num*4: num of 16bit coord pairs-->
      <member name="firstPoint" type="Cdr4Point" /> // used to get pointer in pointType(...)
      <!-- 4+num*4+1..4+num*5: point types (inverted?)-->
      <!-- seems types are padded to full 32 bit slots, but no need to care while reading-->
    </struct>

    <struct name="Cdr4CharData">
      <member name="_unknown" type="quint8" />
      <member name="mChar" type="char" />
      <member name="_unknown2" type="quint8" />
    </struct>

    <struct name="Cdr4TextData">
      <method>
<code><![CDATA[Cdr4CharData charData( int i ) const
    { return (&firstChar)[i]; }]]></code>
      </method>
      <!-- 0..1: ? is 00 00 in samples-->
      <member name="_unknown" type="quint16" />
      <!-- 2..3: length of text-->
      <member name="mLength" type="quint16" />
      <!-- 4..5: size of complete data-->
      <member name="mDataSize" type="quint16" />
      <!-- now the chars, have two \0 bytes between them,
           one before the first, not sure if the first has meaning or belongs to char
           assume this for now, see CharData
           "ä" was seen, so encoding is local one (was 8-bit one for me, visible with iso-8859-1)
           linebreak is with 0D 0A chars-->
      <!-- 4..4+num*4: num of 16bit coord pairs-->
      <member name="firstChar" type="Cdr4CharData" />; // used to get pointer in pointType(...)
    </struct>
  </structs>

<!--
// possible transformations:
// translate: needs two coords, qint16 -> 4 byte
// scale: needs two scale, qint16 -> 4 byte
// rotate: needs center coords + angle -> 4+x byte
// skewX: needs angle -> x byte
// skewY: needs angle -> x byte
// 26 bytes:
// sample: 08 00 00 00 01 00 00 00 00 00 04 EC FF FF 00 00 00 00 00 00 01 00 13 0E 00 00
// sample: 08 00 29 B6 05 00 86 6A FE FF 83 F7 FF FF 7A 95 01 00 29 B6 05 00 6F FC FF FF
// sample: 08 00 29 B6 05 00 86 6A FE FF D6 F7 FF FF 7A 95 01 00 29 B6 05 00 34 FC FF FF
// sample: 08 00 1A EF 00 00 00 00 00 00 D8 F0 FF FF 00 00 00 00 00 00 01 00 8B 0B 00 00
// sample: 08 00 00 00 01 00 00 00 00 00 2A E9 FF FF 00 00 00 00 00 00 01 00 25 10 00 00
// sample: 08 00 00 00 01 00 00 00 00 00 3E 04 00 00 00 00 00 00 00 00 01 00 DF 03 00 00
// sample: 08 00 00 00 01 00 00 00 00 00 87 F3 FF FF 00 00 00 00 00 00 01 00 98 F8 FF FF
//              |     |     |           |           |           |     |     |           |
// Also found this in a list of data, size 72 bytes:
// sample: 02 00 01 00 00 00 BC F3 13 08 FB 0F E9 F7 BC F3 E9 F7 BC F3 13 08 FB 0F 13 08 FB 0F E9 F7 BC F3 E9 F7 E8 1C 00 00 00 00 80 84 2E 41 00 00 00 00 00 00 00 C0 D0 1C 00 00 00 00 00 B8 7D 40 00 00 00 00 80 84 2E 41 00 00
//              |     |     |           |           |           |     |     |           |
// for type 3 number of trfd args: 2, 15, 1, 12, in sync with arg type 10 (outline index?)
// Also seen: 01 00, size 42 bytes
-->
  <enums>
    <enum name="CdrTransformDataType">
      <!-- data is 10x 32bit -->
      <item name="CdrUnknownTransform1Id" value="1" />
      <!-- data is 35x 16bit -->
      <item name="CdrUnknownTransform2Id" value="2" />
      <!-- data is 6x 32bit -->
      <item name="CdrUnknownTransform8Id" value="8" />
    </enum>
  </enums>

  <structs>
    <struct name="CdrTransform8Data">
      <!-- 0..3: ? -->
      <member name="m1" type="float" />
      <!-- 4..7: ? -->
      <member name="m2" type="float" />
      <!-- 8..11: ? -->
      <member name="mX" type="qint32" />
      <!-- 12..15: ? -->
      <member name="m4" type="float" />
      <!-- 16..19: ? -->
      <member name="m5" type="float" />
      <!-- 20..23: ? -->
      <member name="mY" type="qint32" />
    </struct>

    <struct name="CdrTransformData">
      <method>
          <code><![CDATA[const CdrTransform8Data* data8() const
              { return reinterpret_cast<const CdrTransform8Data*>(&_firstOfData); }]]></code>
      </method>
      <method>
          <code><![CDATA[const char* data() const
          { return &_firstOfData; }]]></code>
      </method>
      <method>
          <code><![CDATA[int dataSize() const
          { return (mIndex == 1) ? 40 : (mIndex == 2) ? 70 : (mIndex == 8) ? 24 : 0; }]]></code>
      </method>
      <!-- 0..1: could be some kind of index or type id -->
      <member name="mIndex" type="quint16" />
      <!-- 2..end: actual data-->
      <member name="_firstOfData" type="char" />
    </struct>

   <!-- CDR4 has 54 bytes, CDR5 56 bytes (const structure?)-->
   <struct name="MCfgChunkData">
      <!-- 0..1: width-->
      <member name="mWidth" type="quint16" />
      <!-- 2..3: height-->
      <member name="mHeight" type="quint16" />
    </struct>

<!--
// 0000:0020 |       61 00  01 00 00 00  00 00 00 00  00 00 00 00 |   a.............
// 0000:0030 | 04 00 C2 00  98 1F                                 | ..Â...
-->
    <struct name="LnkData">
      <!-- 0..19: unknown-->
      <member name="unknown[20]" type="char" />
    </struct>
  </structs>
</format>
