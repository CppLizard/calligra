diff --git a/libs/flake/KoUnavailShape.cpp b/libs/flake/KoUnavailShape.cpp
index ecc771f..ce83900 100644
--- a/libs/flake/KoUnavailShape.cpp
+++ b/libs/flake/KoUnavailShape.cpp
@@ -607,7 +607,7 @@ void KoUnavailShape::Private::storeXmlRecursive(const KoXmlElement &el, KoXmlWri
 void KoUnavailShape::Private::storeFile(const QString &fileName, KoShapeLoadingContext &context)
 {
     kDebug(30006) << "Saving file: " << fileName;
-
+return;
     // Directories need to be saved too, but they don't have any file contents.
     if (fileName.endsWith('/')) {
         FileEntry *entry = new FileEntry;
@@ -652,6 +652,7 @@ QByteArray KoUnavailShape::Private::loadFile(const QString &fileName, KoShapeLoa
     fileContent = store->read(fileSize);
     store->close();
 
-    //kDebug(30006) << "File content: " << fileContent;
+    kDebug(30006) << "File size: " << fileSize;
+    kDebug(30006) << "File content: " << fileContent;
     return fileContent;
 }
diff --git a/libs/main/KoDocumentSectionView.cpp b/libs/main/KoDocumentSectionView.cpp
index 154e4a8..0dd1334 100644
--- a/libs/main/KoDocumentSectionView.cpp
+++ b/libs/main/KoDocumentSectionView.cpp
@@ -395,5 +395,5 @@ void KoDocumentSectionView::setDraggingFlag(bool flag)
     m_draggingFlag = flag;
 }
 
-#include <KoDocumentSectionPropertyAction_p.moc>
+//#include <KoDocumentSectionPropertyAction_p.moc>
 #include <KoDocumentSectionView.moc>
diff --git a/libs/main/KoView.cpp b/libs/main/KoView.cpp
index efd39ec..e5cc661 100644
--- a/libs/main/KoView.cpp
+++ b/libs/main/KoView.cpp
@@ -631,5 +631,5 @@ QList<QAction*> KoView::createChangeUnitActions()
     return unitActions->actions();
 }
 
-#include <KoView_p.moc>
+//#include <KoView_p.moc>
 #include <KoView.moc>
diff --git a/plugins/pictureshape/PictureShapeFactory.cpp b/plugins/pictureshape/PictureShapeFactory.cpp
index c7786cb..9cd8b20 100644
--- a/plugins/pictureshape/PictureShapeFactory.cpp
+++ b/plugins/pictureshape/PictureShapeFactory.cpp
@@ -22,7 +22,7 @@
 #include "PictureShapeFactory.h"
 
 #include "PictureShape.h"
-#include "PictureShapeConfigWidget.h"
+//#include "PictureShapeConfigWidget.h"
 
 #include <QByteArray>
 #include <QBuffer>
@@ -114,7 +114,7 @@ bool PictureShapeFactory::supports(const KoXmlElement &e, KoShapeLoadingContext
 QList<KoShapeConfigWidgetBase*> PictureShapeFactory::createShapeOptionPanels()
 {
     QList<KoShapeConfigWidgetBase*> panels;
-    panels.append( new PictureShapeConfigWidget() );
+    //panels.append( new PictureShapeConfigWidget() );
     return panels;
 }
 
diff --git a/plugins/pictureshape/Plugin.cpp b/plugins/pictureshape/Plugin.cpp
index b167d2e..43ba7ad 100644
--- a/plugins/pictureshape/Plugin.cpp
+++ b/plugins/pictureshape/Plugin.cpp
@@ -18,7 +18,7 @@
  */
 #include "Plugin.h"
 #include "PictureShapeFactory.h"
-#include "PictureToolFactory.h"
+//#include "PictureToolFactory.h"
 
 #include <QPixmapCache>
 
@@ -40,7 +40,7 @@ Plugin::Plugin(QObject *parent, const QVariantList &)
     }
 
     KoShapeRegistry::instance()->add( new PictureShapeFactory() );
-    KoToolRegistry::instance()->add( new PictureToolFactory() );
+    //KoToolRegistry::instance()->add( new PictureToolFactory() );
 }
 
 #include <Plugin.moc>
diff --git a/plugins/textshape/TextPlugin.cpp b/plugins/textshape/TextPlugin.cpp
index b99243f..bafee04 100644
--- a/plugins/textshape/TextPlugin.cpp
+++ b/plugins/textshape/TextPlugin.cpp
@@ -17,9 +17,9 @@
  * Boston, MA 02110-1301, USA.
  */
 #include "TextPlugin.h"
-#include "TextToolFactory.h"
-#include "ReferencesToolFactory.h"
-#include "ReviewToolFactory.h"
+// #include "TextToolFactory.h"
+// #include "ReferencesToolFactory.h"
+// #include "ReviewToolFactory.h"
 #ifdef CREATE_TEXTDOCUMENT_INSPECTOR
 #include "TextDocumentInspectionPlugin.h"
 #endif
@@ -46,9 +46,9 @@ K_EXPORT_PLUGIN(TextPluginFactory("TextShape"))
 TextPlugin::TextPlugin(QObject * parent, const QVariantList &)
         : QObject(parent)
 {
-    KoToolRegistry::instance()->add(new TextToolFactory());
-    KoToolRegistry::instance()->add(new ReviewToolFactory());
-    KoToolRegistry::instance()->add(new ReferencesToolFactory());
+//     KoToolRegistry::instance()->add(new TextToolFactory());
+//     KoToolRegistry::instance()->add(new ReviewToolFactory());
+//     KoToolRegistry::instance()->add(new ReferencesToolFactory());
     KoShapeRegistry::instance()->add(new TextShapeFactory());
 }
 
diff --git a/words/part/KWDocument.cpp b/words/part/KWDocument.cpp
index 54cccdc..c62c60c 100644
--- a/words/part/KWDocument.cpp
+++ b/words/part/KWDocument.cpp
@@ -353,9 +353,9 @@ void KWDocument::relayout(QList<KWFrameSet*> framesets)
         KoTextDocumentLayout *lay = dynamic_cast<KoTextDocumentLayout*>(tfs->document()->documentLayout());
         Q_ASSERT(lay);
 
-        if (tfs->textFrameSetType() == Words::MainTextFrameSet && m_layoutProgressUpdater) {
-            connect(lay, SIGNAL(layoutProgressChanged(int)), this, SLOT(layoutProgressChanged(int)));
-            connect(lay, SIGNAL(finishedLayout()), this, SLOT(layoutFinished()));
+        if (tfs->textFrameSetType() == Words::MainTextFrameSet) {
+            connect(lay, SIGNAL(layoutProgressChanged(int)), this, SLOT(slotLayoutProgressChanged(int)));
+            connect(lay, SIGNAL(finishedLayout()), this, SLOT(slotLayoutFinished()));
         }
 
         // schedule all calls so multiple layout calls are compressed
@@ -365,19 +365,21 @@ void KWDocument::relayout(QList<KWFrameSet*> framesets)
     firePageSetupChanged();
 }
 
-void KWDocument::layoutProgressChanged(int percent)
+void KWDocument::slotLayoutProgressChanged(int percent)
 {
-    Q_ASSERT(m_layoutProgressUpdater);
-    m_layoutProgressUpdater->setProgress(percent);
+    if (m_layoutProgressUpdater)
+        m_layoutProgressUpdater->setProgress(percent);
 }
 
-void KWDocument::layoutFinished()
+void KWDocument::slotLayoutFinished()
 {
-    Q_ASSERT(m_layoutProgressUpdater);
-    disconnect(QObject::sender(), SIGNAL(layoutProgressChanged(int)), this, SLOT(layoutProgressChanged(int)));
-    disconnect(QObject::sender(), SIGNAL(finishedLayout()), this, SLOT(layoutFinished()));
-    m_layoutProgressUpdater->setProgress(100);
-    m_layoutProgressUpdater = 0; // free the instance
+    if (m_layoutProgressUpdater) {
+        disconnect(QObject::sender(), SIGNAL(layoutProgressChanged(int)), this, SLOT(slotLayoutProgressChanged(int)));
+        disconnect(QObject::sender(), SIGNAL(finishedLayout()), this, SLOT(slotLayoutFinished()));
+        m_layoutProgressUpdater->setProgress(100);
+        m_layoutProgressUpdater = 0; // free the instance
+    }
+    emit layoutFinished();
 }
 
 void KWDocument::addFrameSet(KWFrameSet *fs)
diff --git a/words/part/KWDocument.h b/words/part/KWDocument.h
index 7654aa3..14e50ec 100644
--- a/words/part/KWDocument.h
+++ b/words/part/KWDocument.h
@@ -226,6 +226,9 @@ signals:
     /// signal emitted when a page has been added
     void pageSetupChanged();
 
+    /// signal emitted when layouting finished
+    void layoutFinished();
+
     /// emitted whenever a shape is added.
     void shapeAdded(KoShape *, KoShapeManager::Repaint);
 
@@ -242,8 +245,8 @@ private slots:
     /// Called after the constructor figures out there is an install problem.
     void mainTextFrameSetLayoutDone();
 
-    void layoutProgressChanged(int percent);
-    void layoutFinished();
+    void slotLayoutProgressChanged(int percent);
+    void slotLayoutFinished();
 
 protected:
     /// reimplemented from KoDocument
diff --git a/words/part/frames/KWFrameLayout.h b/words/part/frames/KWFrameLayout.h
index 72bd252..cba5517 100644
--- a/words/part/frames/KWFrameLayout.h
+++ b/words/part/frames/KWFrameLayout.h
@@ -24,6 +24,7 @@
 #define KWFRAMELAYOUT_H
 
 #include "../Words.h"
+#include "../KWPageStyle.h"
 
 #include "../words_export.h"
 
@@ -34,7 +35,6 @@
 class KWPageManager;
 class KWFrameSet;
 class KWTextFrameSet;
-class KWPageStyle;
 class KWPage;
 class KWFrame;
 class KWDocument;
