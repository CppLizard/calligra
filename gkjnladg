benchmarks/kis_floodfill_benchmark.cpp:        fillPainter.setSampleMerged(false);
image/kis_fill_painter.h:    void setSampleMerged(bool set) {
image/metadata/kis_legacy_importer.cc:    { "Exif.Image.BitsPerSample", "http://ns.adobe.com/tiff/1.0/", "BitsPerSample" },
image/metadata/kis_legacy_importer.cc:    { "Exif.Image.SamplesPerPixel", "http://ns.adobe.com/tiff/1.0/", "SamplesPerPixel" },
image/metadata/schemas/tiff.schema:    <integer name="SamplesPerPixel" />
plugins/formats/jpeg/README:  example.c         Sample code for calling the JPEG library.
plugins/formats/psd/psd.h:namespace PSDColorSampler {
plugins/formats/psd/psd.h:enum PSDColorSamplers {
plugins/formats/tiff/kis_tiff_reader.cc:        for (i = 0; i < nbColorsSamples() ; i++) {
plugins/formats/tiff/kis_tiff_reader.cc:        for (int k = 0; k < nbExtraSamples(); k++) {
plugins/formats/tiff/kis_tiff_reader.cc:        for (i = 0; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.cc:        for (int k = 0; k < nbExtraSamples(); k++) {
plugins/formats/tiff/kis_tiff_reader.cc:        for (i = 0; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.cc:        for (int k = 0; k < nbExtraSamples(); k++) {
plugins/formats/tiff/kis_tiff_reader.h:    inline uint8 nbColorsSamples() {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 0; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 0; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 0; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 1; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 1; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:        for (int i = 1; i < nbColorsSamples(); i++) {
plugins/formats/tiff/kis_tiff_reader.h:    inline quint8 nbColorsSamples() {
plugins/formats/tiff/kis_tiff_reader.h:    inline quint8 nbExtraSamples() {
plugins/formats/tiff/kis_tiff_ycbcr_reader.cc:                for (int k = 0; k < nbExtraSamples(); k++) {
plugins/formats/tiff/kis_tiff_ycbcr_reader.cc:                for (int k = 0; k < nbExtraSamples(); k++) {
plugins/paintops/hairy/kis_hairy_ink_option.h:    int m_curveSamples;
plugins/paintops/libpaintop/forms/wdgcoloroptions.ui:       <string>Sample Input layer</string>
plugins/tools/defaulttools/kis_tool_fill.cc:    m_checkSampleMerged = new QCheckBox(i18n("Limit to current layer"), widget);
plugins/tools/defaulttools/kis_tool_fill.cc:    m_checkSampleMerged->setChecked(m_unmerged);
plugins/tools/defaulttools/kis_tool_fill.cc:    connect (m_checkSampleMerged , SIGNAL(toggled(bool))    , this, SLOT(slotSetSampleMerged(bool)));
plugins/tools/defaulttools/kis_tool_fill.cc:    addOptionWidgetOption(m_checkSampleMerged);
plugins/tools/defaulttools/kis_tool_fill.cc:void KisToolFill::slotSetSampleMerged(bool state)
plugins/tools/defaulttools/kis_tool_fill.cc:    m_checkSampleMerged->setEnabled(!state);
plugins/tools/defaulttools/kis_tool_fill.h:    virtual void slotSetSampleMerged(bool);
plugins/tools/defaulttools/kis_tool_fill.h:    QCheckBox *m_checkSampleMerged;
plugins/tools/defaulttools/wdgcolorpicker.ui:        <string>Sample radius:</string>
plugins/tools/defaulttools/wdgcolorpicker.ui:       <string>Sample All Visible Layers</string>
plugins/tools/selectiontools/kis_tool_select_contiguous.cc:    fillpainter.setSampleMerged(!m_limitToCurrentLayer);
sketch/qml/panels/toolconfigpages/fill.qml:            onCheckedChanged: if (toolManager.currentTool) toolManager.currentTool.slotSetSampleMerged(checked);
ui/opengl/kis_opengl.cpp:    QGLFormat format(QGL::SampleBuffers);
ui/processing/fill_processing_visitor.cpp:        fillPainter.setSampleMerged(!m_unmerged);
ui/tool/kis_painting_information_builder.cpp:    m_pressureSamples = curve.floatTransfer(LEVEL_OF_PRESSURE_RESOLUTION + 1);
ui/tool/kis_painting_information_builder.cpp:    return m_pressureSamples.at(qRound(pressure * LEVEL_OF_PRESSURE_RESOLUTION));
ui/tool/kis_painting_information_builder.h:    QVector<qreal> m_pressureSamples;
ui/tool/kis_tool_paint.cc:    updateTabletPressureSamples();
ui/tool/kis_tool_paint.cc:    connect(KisConfigNotifier::instance(), SIGNAL(configChanged()), SLOT(updateTabletPressureSamples()), Qt::UniqueConnection);
ui/tool/kis_tool_paint.cc:void KisToolPaint::updateTabletPressureSamples()
ui/tool/kis_tool_paint.cc:    m_pressureSamples = curve.floatTransfer(LEVEL_OF_PRESSURE_RESOLUTION + 1);
ui/tool/kis_tool_paint.h:        return m_pressureSamples.at( qRound(pressure * LEVEL_OF_PRESSURE_RESOLUTION) );
ui/tool/kis_tool_paint.h:    virtual void updateTabletPressureSamples();
ui/tool/kis_tool_paint.h:    QVector<qreal> m_pressureSamples;
